//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Simple/Simple_Emission_Opaque_Wound_RimMask" {
Properties {
_Color ("Main Color", Color) = (0.5,0.5,0.5,1)
_EmissionColor ("Emmisive Color", Color) = (0.5,0.5,0.5,1)
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_Outline ("Outline Width", Float) = 0.02
[Toggle] _OutlineUseTangent ("Use Tangent For Outline", Float) = 0
_SpecMulti ("Specular Multiply", Float) = 1
_Shininess ("Shininess", Range(0.1, 100)) = 2
_FadeDistance ("Fade Start Distance", Range(0.1, 10)) = 0.5
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 1
_BloomFactor ("Bloom Factor", Float) = 1
_MainTex ("Base (RGB)", 2D) = "white" { }
_Ramp ("Toon Ramp (RGB)", 2D) = "white" { }
_SpecRamp ("Specular Ramp (RGB)", 2D) = "black" { }
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
[Toggle(USINGDITHERALPAH)] _UsingClipAlpha ("Using Clip Alpha", Float) = 0
_ClipAlpha ("Clip Alpha Value", Range(0, 1)) = 1
_Emission ("Emission", Range(1, 100)) = 1
_EmissionBloomFactor ("Emission Bloom Factor", Float) = 1
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
_RGMaskR ("Rim Mask R", Range(0, 1)) = 0
_RGMaskG ("Rim Mask G", Range(0, 1)) = 0
_RGMaskB ("Rim Mask B", Range(0, 1)) = 0
_RGMaskA ("Rim Mask A", Range(0, 1)) = 0
_RGMaskIntensity ("Rim Mask Intensity", Range(0, 1)) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
[Toggle(WOUND_SYSTEM)] _WoundSystem ("Wound System", Float) = 1
[Toggle(DEBUG_WOUND_SYSTEM)] _DebugWoundSystem ("Debug Wound System", Float) = 0
_VertexTex ("Texture", 2D) = "white" { }
_MaskTex ("WoundMask (RGBA)", 2D) = "white" { }
[Enum(Left, 0, Right, 1)] _offSetX ("WoundMask U", Float) = 0
[Enum(Down, 0, Up, 1)] _offSetY ("WoundMask V", Float) = 0
_MaskColor ("Wound Color", Color) = (1,1,1,1)
_WoundAlpha0 ("WoundAlpha Factor", Range(0, 1)) = 1
_WoundOffsetHead0 ("Wound Offset Head", Range(-1, 1)) = 0
_ColorScale0 ("ColorScale", Range(0, 5)) = 2.5
_BaseWoundScale ("Base Wound Scale", Range(0.1, 5)) = 1
_woundScaleX0 ("WoundScaleX", Range(0.01, 3)) = 1
_woundScaleZ0 ("WoundScaleZ", Range(0.01, 3)) = 1
_WoundPos0 ("WoundPos", Vector) = (0,0,0,0)
_WoundX0 ("WoundX", Vector) = (0,0,0,0)
_WoundY0 ("WoundY", Vector) = (0,0,0,0)
_WoundZ0 ("WoundZ", Vector) = (0,0,0,0)
_XPositionAdd ("_XPositionAdd", Vector) = (0,0,-1,0)
_YPositionAdd ("_YPositionAdd", Vector) = (0,-1,0,0)
_ZPositionAdd ("_ZPositionAdd", Vector) = (-1,0,0,0)
_BipScale ("_BipPosScale", Vector) = (0,0.056,0.981,0)
_TextureSize ("WoundTextureSize", Vector) = (128,32,0,0)
_MeshMaxLength ("Mesh Max Length", Float) = 2
_WoundClipMax ("Wound Clip Max", Float) = 1
_WoundClipMin ("Wound Clip Min", Float) = 0
[Enum(Left, 0, Right, 1)] _offSetX1 ("WoundMask1 U", Float) = 0
[Enum(Down, 0, Up, 1)] _offSetY1 ("WoundMask1 V", Float) = 0
_MaskColor1 ("Wound Color Other", Color) = (1,1,1,1)
_WoundAlpha1 ("WoundAlpha Factor Other", Range(0, 1)) = 1
_WoundOffsetHead1 ("Wound Offset Head Other", Range(-1, 1)) = 0
_ColorScale1 ("ColorScale Other", Range(0, 5)) = 2.5
_woundScaleX1 ("WoundScaleX Other", Range(0.01, 3)) = 1
_woundScaleZ1 ("WoundScaleZ Other", Range(0.01, 3)) = 1
_WoundPos1 ("WoundPos Other", Vector) = (0,0,0,0)
_WoundX1 ("WoundX Other", Vector) = (0,0,0,0)
_WoundY1 ("WoundY Other", Vector) = (0,0,0,0)
_WoundZ1 ("WoundZ Other", Vector) = (0,0,0,0)
[Enum(Left, 0, Right, 1)] _offSetX2 ("WoundMask2 U", Float) = 0
[Enum(Down, 0, Up, 1)] _offSetY2 ("WoundMask2 V", Float) = 0
_MaskColor2 ("Wound Color2", Color) = (1,1,1,1)
_WoundAlpha2 ("WoundAlpha Factor 2", Range(0, 1)) = 1
_WoundOffsetHead2 ("Wound Offset Head 2", Range(-1, 1)) = 0
_ColorScale2 ("ColorScale 2", Range(0, 5)) = 2.5
_woundScaleX2 ("WoundScaleX 2", Range(0.01, 3)) = 1
_woundScaleZ2 ("WoundScaleZ 2", Range(0.01, 3)) = 1
_WoundPos2 ("WoundPos 2", Vector) = (0,0,0,0)
_WoundX2 ("WoundX 2", Vector) = (0,0,0,0)
_WoundY2 ("WoundY 2", Vector) = (0,0,0,0)
_WoundZ2 ("WoundZ 2", Vector) = (0,0,0,0)
[Toggle(TRANSPARENT)] _Transparent ("Transparent", Float) = 0
_MainAlpha ("Main Alpha Range(0, 1)", Range(0, 1)) = 1
_AdditiveLightIntensity ("Addtive Light Intensity", Range(0, 5)) = 1
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
}
SubShader {
 LOD 600
 Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "OutlineType" = "Simple" "QUEUE" = "Geometry+10" "RenderType" = "Opaque" }
 Pass {
  Name "BASE"
  LOD 600
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Simple" "QUEUE" = "Geometry+10" "RenderType" = "Opaque" }
  GpuProgramID 24243
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _ZPositionAdd.x + u_xlat18;
    u_xlat18 = u_xlat12 * _ZPositionAdd.z + u_xlat18;
    u_xlat1.x = (-u_xlat18);
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat6 = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat0.x * _YPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.x = u_xlat12 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat6;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_12;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
ivec2 u_xlati20;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_12.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12.x = u_xlat3.x * u_xlat16_12.x;
    u_xlat16_12.x = u_xlat3.z * u_xlat16_12.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati20.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati20.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati22 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati20.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati22 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat22 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat22 = max(u_xlat22, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat22);
    u_xlat22 = u_xlat2.w + u_xlat3.z;
    u_xlat22 = u_xlat22 + _WoundOffsetHead2;
    u_xlat22 = max(u_xlat6.z, u_xlat22);
    u_xlat6.y = min(u_xlat6.w, u_xlat22);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat22 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat22 = ceil(u_xlat22);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_19 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_19 = u_xlat22 * u_xlat16_19;
    u_xlat16_12.y = u_xlat3.x * u_xlat16_19;
    u_xlat16_22 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_22 = u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_22 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_12.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_10 = u_xlat16_12.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_10 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_22) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_17);
    u_xlat24 = u_xlat3.x * _ColorScale1;
    u_xlat16_17 = u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) * u_xlat16_17 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat22 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    SV_Target0.w = u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _ZPositionAdd.x + u_xlat18;
    u_xlat18 = u_xlat12 * _ZPositionAdd.z + u_xlat18;
    u_xlat1.x = (-u_xlat18);
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat6 = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat0.x * _YPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.x = u_xlat12 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat6;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_12;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
ivec2 u_xlati20;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_12.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12.x = u_xlat3.x * u_xlat16_12.x;
    u_xlat16_12.x = u_xlat3.z * u_xlat16_12.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati20.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati20.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati22 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati20.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati22 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat22 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat22 = max(u_xlat22, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat22);
    u_xlat22 = u_xlat2.w + u_xlat3.z;
    u_xlat22 = u_xlat22 + _WoundOffsetHead2;
    u_xlat22 = max(u_xlat6.z, u_xlat22);
    u_xlat6.y = min(u_xlat6.w, u_xlat22);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat22 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat22 = ceil(u_xlat22);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_19 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_19 = u_xlat22 * u_xlat16_19;
    u_xlat16_12.y = u_xlat3.x * u_xlat16_19;
    u_xlat16_22 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_22 = u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_22 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_12.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_10 = u_xlat16_12.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_10 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_22) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_17);
    u_xlat24 = u_xlat3.x * _ColorScale1;
    u_xlat16_17 = u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) * u_xlat16_17 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat22 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    SV_Target0.w = u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _ZPositionAdd.x + u_xlat18;
    u_xlat18 = u_xlat12 * _ZPositionAdd.z + u_xlat18;
    u_xlat1.x = (-u_xlat18);
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat6 = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat0.x * _YPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.x = u_xlat12 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat6;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_12;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
ivec2 u_xlati20;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_12.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12.x = u_xlat3.x * u_xlat16_12.x;
    u_xlat16_12.x = u_xlat3.z * u_xlat16_12.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati20.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati20.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati22 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati20.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati22 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat22 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat22 = max(u_xlat22, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat22);
    u_xlat22 = u_xlat2.w + u_xlat3.z;
    u_xlat22 = u_xlat22 + _WoundOffsetHead2;
    u_xlat22 = max(u_xlat6.z, u_xlat22);
    u_xlat6.y = min(u_xlat6.w, u_xlat22);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat22 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat22 = ceil(u_xlat22);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_19 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_19 = u_xlat22 * u_xlat16_19;
    u_xlat16_12.y = u_xlat3.x * u_xlat16_19;
    u_xlat16_22 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_22 = u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_22 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_12.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_10 = u_xlat16_12.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_10 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_22) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_17);
    u_xlat24 = u_xlat3.x * _ColorScale1;
    u_xlat16_17 = u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) * u_xlat16_17 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat22 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    SV_Target0.w = u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat7;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_12;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
ivec2 u_xlati20;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_12.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12.x = u_xlat3.x * u_xlat16_12.x;
    u_xlat16_12.x = u_xlat3.z * u_xlat16_12.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati20.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati20.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati22 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati20.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati22 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat22 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat22 = max(u_xlat22, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat22);
    u_xlat22 = u_xlat2.w + u_xlat3.z;
    u_xlat22 = u_xlat22 + _WoundOffsetHead2;
    u_xlat22 = max(u_xlat6.z, u_xlat22);
    u_xlat6.y = min(u_xlat6.w, u_xlat22);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat22 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat22 = ceil(u_xlat22);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_19 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_19 = u_xlat22 * u_xlat16_19;
    u_xlat16_12.y = u_xlat3.x * u_xlat16_19;
    u_xlat16_22 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_22 = u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_22 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_12.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_10 = u_xlat16_12.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_10 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_22) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_17);
    u_xlat24 = u_xlat3.x * _ColorScale1;
    u_xlat16_17 = u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) * u_xlat16_17 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat22 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    SV_Target0.w = u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat7;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_12;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
ivec2 u_xlati20;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_12.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12.x = u_xlat3.x * u_xlat16_12.x;
    u_xlat16_12.x = u_xlat3.z * u_xlat16_12.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati20.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati20.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati22 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati20.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati22 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat22 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat22 = max(u_xlat22, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat22);
    u_xlat22 = u_xlat2.w + u_xlat3.z;
    u_xlat22 = u_xlat22 + _WoundOffsetHead2;
    u_xlat22 = max(u_xlat6.z, u_xlat22);
    u_xlat6.y = min(u_xlat6.w, u_xlat22);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat22 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat22 = ceil(u_xlat22);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_19 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_19 = u_xlat22 * u_xlat16_19;
    u_xlat16_12.y = u_xlat3.x * u_xlat16_19;
    u_xlat16_22 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_22 = u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_22 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_12.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_10 = u_xlat16_12.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_10 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_22) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_17);
    u_xlat24 = u_xlat3.x * _ColorScale1;
    u_xlat16_17 = u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) * u_xlat16_17 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat22 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    SV_Target0.w = u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat7;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_12;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
ivec2 u_xlati20;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_12.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12.x = u_xlat3.x * u_xlat16_12.x;
    u_xlat16_12.x = u_xlat3.z * u_xlat16_12.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati20.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati20.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati22 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati20.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati22 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati22) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat22 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat22 = max(u_xlat22, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat22);
    u_xlat22 = u_xlat2.w + u_xlat3.z;
    u_xlat22 = u_xlat22 + _WoundOffsetHead2;
    u_xlat22 = max(u_xlat6.z, u_xlat22);
    u_xlat6.y = min(u_xlat6.w, u_xlat22);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat22 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat22 = ceil(u_xlat22);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_19 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_19 = u_xlat22 * u_xlat16_19;
    u_xlat16_12.y = u_xlat3.x * u_xlat16_19;
    u_xlat16_22 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_22 = u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_22 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_12.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_10 = u_xlat16_12.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_10 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_22) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_17);
    u_xlat24 = u_xlat3.x * _ColorScale1;
    u_xlat16_17 = u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) * u_xlat16_17 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat22 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    SV_Target0.w = u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
int u_xlati12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat12) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat19 = max(u_xlat19, 0.0);
    u_xlat19 = log2(u_xlat19);
    u_xlat19 = u_xlat19 * _Shininess;
    u_xlat19 = exp2(u_xlat19);
    vs_TEXCOORD2.xy = (int(u_xlati12) != 0) ? vec2(u_xlat19) : vec2(0.0250000004, 0.0250000004);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
int u_xlati12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat12) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat19 = max(u_xlat19, 0.0);
    u_xlat19 = log2(u_xlat19);
    u_xlat19 = u_xlat19 * _Shininess;
    u_xlat19 = exp2(u_xlat19);
    vs_TEXCOORD2.xy = (int(u_xlati12) != 0) ? vec2(u_xlat19) : vec2(0.0250000004, 0.0250000004);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
int u_xlati12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat12) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat19 = max(u_xlat19, 0.0);
    u_xlat19 = log2(u_xlat19);
    u_xlat19 = u_xlat19 * _Shininess;
    u_xlat19 = exp2(u_xlat19);
    vs_TEXCOORD2.xy = (int(u_xlati12) != 0) ? vec2(u_xlat19) : vec2(0.0250000004, 0.0250000004);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    u_xlat4.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat2.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat2 = (-u_xlat4.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat2 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    u_xlat4.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat2.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat2 = (-u_xlat4.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat2 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    u_xlat4.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat2.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat2 = (-u_xlat4.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat2 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
float u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat5 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5>=(-u_xlat5));
#else
    u_xlatb5 = u_xlat5>=(-u_xlat5);
#endif
    u_xlat5 = (u_xlatb5) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat10 = float(1.0) / u_xlat5;
    u_xlat10 = u_xlat10 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat10);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat5 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat5 = u_xlat5 + _BipScale.y;
    u_xlat15 = u_xlat5 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat10 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat10 = u_xlat10 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat15 = u_xlat0.x * _ZPositionAdd.x + u_xlat15;
    u_xlat15 = u_xlat10 * _ZPositionAdd.z + u_xlat15;
    u_xlat1.x = (-u_xlat15);
    u_xlat15 = u_xlat5 * _XPositionAdd.y;
    u_xlat5 = u_xlat5 * _YPositionAdd.y;
    u_xlat5 = u_xlat0.x * _YPositionAdd.x + u_xlat5;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat15;
    u_xlat0.x = u_xlat10 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat10 * _YPositionAdd.z + u_xlat5;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
ivec2 u_xlati24;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_14.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_14.x = u_xlat3.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat3.z * u_xlat16_14.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati24.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati24.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati24.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat2.w + u_xlat3.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat6.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_23 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_23 = u_xlat28 * u_xlat16_23;
    u_xlat16_14.y = u_xlat3.x * u_xlat16_23;
    u_xlat16_28 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_14.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_12 = u_xlat16_14.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_12 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_14.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_21);
    u_xlat30 = u_xlat3.x * _ColorScale1;
    u_xlat16_21 = u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) * u_xlat16_21 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat28 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat28) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat2 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat2.xxx;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat2.yyy;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat2.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat2.www;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(_RGMaskB) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_14.x = u_xlat3.y + u_xlat3.x;
    u_xlat16_14.x = u_xlat3.z + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_23 = (-u_xlat16_5) + _RGBloomFactor;
    u_xlat16_2.xyz = u_xlat16_14.xxx * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_2.w = u_xlat16_14.x * u_xlat16_23 + u_xlat16_5;
    u_xlat2 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_2;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat2 + u_xlat16_1;
    u_xlat16_14.x = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_14.x * _RGRatio;
    u_xlat2.xyz = (-u_xlat0.xyz);
    u_xlat2.w = (-u_xlat16_5);
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
float u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat5 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5>=(-u_xlat5));
#else
    u_xlatb5 = u_xlat5>=(-u_xlat5);
#endif
    u_xlat5 = (u_xlatb5) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat10 = float(1.0) / u_xlat5;
    u_xlat10 = u_xlat10 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat10);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat5 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat5 = u_xlat5 + _BipScale.y;
    u_xlat15 = u_xlat5 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat10 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat10 = u_xlat10 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat15 = u_xlat0.x * _ZPositionAdd.x + u_xlat15;
    u_xlat15 = u_xlat10 * _ZPositionAdd.z + u_xlat15;
    u_xlat1.x = (-u_xlat15);
    u_xlat15 = u_xlat5 * _XPositionAdd.y;
    u_xlat5 = u_xlat5 * _YPositionAdd.y;
    u_xlat5 = u_xlat0.x * _YPositionAdd.x + u_xlat5;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat15;
    u_xlat0.x = u_xlat10 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat10 * _YPositionAdd.z + u_xlat5;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
ivec2 u_xlati24;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_14.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_14.x = u_xlat3.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat3.z * u_xlat16_14.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati24.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati24.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati24.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat2.w + u_xlat3.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat6.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_23 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_23 = u_xlat28 * u_xlat16_23;
    u_xlat16_14.y = u_xlat3.x * u_xlat16_23;
    u_xlat16_28 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_14.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_12 = u_xlat16_14.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_12 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_14.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_21);
    u_xlat30 = u_xlat3.x * _ColorScale1;
    u_xlat16_21 = u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) * u_xlat16_21 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat28 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat28) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat2 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat2.xxx;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat2.yyy;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat2.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat2.www;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(_RGMaskB) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_14.x = u_xlat3.y + u_xlat3.x;
    u_xlat16_14.x = u_xlat3.z + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_23 = (-u_xlat16_5) + _RGBloomFactor;
    u_xlat16_2.xyz = u_xlat16_14.xxx * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_2.w = u_xlat16_14.x * u_xlat16_23 + u_xlat16_5;
    u_xlat2 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_2;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat2 + u_xlat16_1;
    u_xlat16_14.x = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_14.x * _RGRatio;
    u_xlat2.xyz = (-u_xlat0.xyz);
    u_xlat2.w = (-u_xlat16_5);
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
float u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat5 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5>=(-u_xlat5));
#else
    u_xlatb5 = u_xlat5>=(-u_xlat5);
#endif
    u_xlat5 = (u_xlatb5) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat10 = float(1.0) / u_xlat5;
    u_xlat10 = u_xlat10 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat10);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat5 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat5 = u_xlat5 + _BipScale.y;
    u_xlat15 = u_xlat5 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat10 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat10 = u_xlat10 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat15 = u_xlat0.x * _ZPositionAdd.x + u_xlat15;
    u_xlat15 = u_xlat10 * _ZPositionAdd.z + u_xlat15;
    u_xlat1.x = (-u_xlat15);
    u_xlat15 = u_xlat5 * _XPositionAdd.y;
    u_xlat5 = u_xlat5 * _YPositionAdd.y;
    u_xlat5 = u_xlat0.x * _YPositionAdd.x + u_xlat5;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat15;
    u_xlat0.x = u_xlat10 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat10 * _YPositionAdd.z + u_xlat5;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
ivec2 u_xlati24;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_14.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_14.x = u_xlat3.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat3.z * u_xlat16_14.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati24.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati24.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati24.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat2.w + u_xlat3.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat6.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_23 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_23 = u_xlat28 * u_xlat16_23;
    u_xlat16_14.y = u_xlat3.x * u_xlat16_23;
    u_xlat16_28 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_14.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_12 = u_xlat16_14.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_12 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_14.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_21);
    u_xlat30 = u_xlat3.x * _ColorScale1;
    u_xlat16_21 = u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) * u_xlat16_21 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat28 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat28) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat2 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat2.xxx;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat2.yyy;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat2.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat2.www;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(_RGMaskB) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_14.x = u_xlat3.y + u_xlat3.x;
    u_xlat16_14.x = u_xlat3.z + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_23 = (-u_xlat16_5) + _RGBloomFactor;
    u_xlat16_2.xyz = u_xlat16_14.xxx * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_2.w = u_xlat16_14.x * u_xlat16_23 + u_xlat16_5;
    u_xlat2 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_2;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat2 + u_xlat16_1;
    u_xlat16_14.x = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_14.x * _RGRatio;
    u_xlat2.xyz = (-u_xlat0.xyz);
    u_xlat2.w = (-u_xlat16_5);
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat7;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
ivec2 u_xlati24;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_14.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_14.x = u_xlat3.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat3.z * u_xlat16_14.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati24.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati24.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati24.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat2.w + u_xlat3.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat6.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_23 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_23 = u_xlat28 * u_xlat16_23;
    u_xlat16_14.y = u_xlat3.x * u_xlat16_23;
    u_xlat16_28 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_14.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_12 = u_xlat16_14.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_12 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_14.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_21);
    u_xlat30 = u_xlat3.x * _ColorScale1;
    u_xlat16_21 = u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) * u_xlat16_21 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat28 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat28) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat2 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat2.xxx;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat2.yyy;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat2.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat2.www;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(_RGMaskB) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_14.x = u_xlat3.y + u_xlat3.x;
    u_xlat16_14.x = u_xlat3.z + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_23 = (-u_xlat16_5) + _RGBloomFactor;
    u_xlat16_2.xyz = u_xlat16_14.xxx * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_2.w = u_xlat16_14.x * u_xlat16_23 + u_xlat16_5;
    u_xlat2 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_2;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat2 + u_xlat16_1;
    u_xlat16_14.x = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_14.x * _RGRatio;
    u_xlat2.xyz = (-u_xlat0.xyz);
    u_xlat2.w = (-u_xlat16_5);
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat7;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
ivec2 u_xlati24;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_14.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_14.x = u_xlat3.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat3.z * u_xlat16_14.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati24.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati24.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati24.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat2.w + u_xlat3.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat6.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_23 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_23 = u_xlat28 * u_xlat16_23;
    u_xlat16_14.y = u_xlat3.x * u_xlat16_23;
    u_xlat16_28 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_14.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_12 = u_xlat16_14.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_12 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_14.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_21);
    u_xlat30 = u_xlat3.x * _ColorScale1;
    u_xlat16_21 = u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) * u_xlat16_21 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat28 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat28) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat2 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat2.xxx;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat2.yyy;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat2.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat2.www;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(_RGMaskB) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_14.x = u_xlat3.y + u_xlat3.x;
    u_xlat16_14.x = u_xlat3.z + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_23 = (-u_xlat16_5) + _RGBloomFactor;
    u_xlat16_2.xyz = u_xlat16_14.xxx * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_2.w = u_xlat16_14.x * u_xlat16_23 + u_xlat16_5;
    u_xlat2 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_2;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat2 + u_xlat16_1;
    u_xlat16_14.x = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_14.x * _RGRatio;
    u_xlat2.xyz = (-u_xlat0.xyz);
    u_xlat2.w = (-u_xlat16_5);
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat7;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
ivec4 u_xlati2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec4 u_xlat6;
ivec2 u_xlati6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
ivec2 u_xlati24;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati2 = ~u_xlati1.yxwz;
    u_xlati3 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati2));
    u_xlat4.x = (u_xlati3.x != 0) ? float(0.25) : float(0.5);
    u_xlat4.y = (u_xlati3.x != 0) ? float(0.75) : float(0.5);
    u_xlat4.z = (u_xlati3.z != 0) ? float(0.25) : float(0.5);
    u_xlat4.w = (u_xlati3.z != 0) ? float(0.75) : float(0.5);
    u_xlati2 = ivec4(uvec4(uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.y) & uint(u_xlati2.x), uint(u_xlati2.w) & uint(u_xlati2.z), uint(u_xlati2.w) & uint(u_xlati2.z)));
    u_xlat2.x = (u_xlati2.x != 0) ? float(0.25) : u_xlat4.x;
    u_xlat2.y = (u_xlati2.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat2.z = (u_xlati2.z != 0) ? float(0.25) : u_xlat4.z;
    u_xlat2.w = (u_xlati2.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlat2.x = (u_xlati3.y != 0) ? float(0.75) : u_xlat2.x;
    u_xlat2.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat2.y;
    u_xlat2.z = (u_xlati3.w != 0) ? float(0.75) : u_xlat2.z;
    u_xlat2.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat2.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat2.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat2.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat2.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat2.w;
    u_xlat2 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_3 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_5 = u_xlat16_4.w * _WoundAlpha0;
    u_xlat16_5 = u_xlat1.x * u_xlat16_5;
    u_xlat16_5 = u_xlat1.y * u_xlat16_5;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat2.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat2 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat2.x);
    u_xlat6.x = min(u_xlat2.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat2.z, u_xlat1.x);
    u_xlat6.y = min(u_xlat2.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.z = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.z = min(max(u_xlat3.z, 0.0), 1.0);
#else
    u_xlat3.z = clamp(u_xlat3.z, 0.0, 1.0);
#endif
    u_xlat3.xz = ceil(u_xlat3.xz);
    u_xlat16_14.x = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_14.x = u_xlat3.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat3.z * u_xlat16_14.x;
    u_xlati3.xz = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetY2, _offSetX2, _offSetY2), ivec4(0, 0, 0, 0)).xz) * 0xFFFFFFFFu);
    u_xlati6.xy = ~u_xlati3.zx;
    u_xlati24.xy = ivec2(uvec2(u_xlati3.xz) & uvec2(u_xlati6.xy));
    u_xlat2 = (u_xlati24.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati6.y) & uint(u_xlati6.x));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat2 = (u_xlati24.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.z));
    u_xlat2 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat2;
    u_xlat3.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat3.xz = u_xlat3.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat3.xz = vec2((-u_xlat2.y) + u_xlat3.x, (-u_xlat2.w) + u_xlat3.z);
    u_xlat3.xz = u_xlat3.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat2.y;
    u_xlat6 = u_xlat2 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat6.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat2.w + u_xlat3.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat6.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_2 = texture(_MaskTex, u_xlat6.xy);
    u_xlat16_2 = u_xlat10_2 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_23 = u_xlat16_2.w * _WoundAlpha2;
    u_xlat16_23 = u_xlat28 * u_xlat16_23;
    u_xlat16_14.y = u_xlat3.x * u_xlat16_23;
    u_xlat16_28 = u_xlat16_5 * 1.10000002 + u_xlat10_3.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_14.x * 1.10000002 + u_xlat10_3.y;
    u_xlat3.x = u_xlat16_3 + -1.0;
    u_xlat16_12 = u_xlat16_14.y * 1.10000002 + u_xlat10_3.y;
    u_xlat3.y = u_xlat16_12 + -1.0;
    u_xlat3.xy = u_xlat3.xy / u_xlat16_14.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_21);
    u_xlat30 = u_xlat3.x * _ColorScale1;
    u_xlat16_21 = u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) * u_xlat16_21 + 1.0;
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_4.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat3.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorScale2);
    u_xlat28 = (-u_xlat3.x) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat28) + u_xlat0.xyz;
    u_xlat16_5 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_5 = u_xlat10_0.w * u_xlat16_5 + _BloomFactor;
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat2 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat2.xxx;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat2.yyy;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat2.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat2.www;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(_RGMaskB) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_14.x = u_xlat3.y + u_xlat3.x;
    u_xlat16_14.x = u_xlat3.z + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_23 = (-u_xlat16_5) + _RGBloomFactor;
    u_xlat16_2.xyz = u_xlat16_14.xxx * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_2.w = u_xlat16_14.x * u_xlat16_23 + u_xlat16_5;
    u_xlat2 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_2;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat2 + u_xlat16_1;
    u_xlat16_14.x = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_14.x * _RGRatio;
    u_xlat2.xyz = (-u_xlat0.xyz);
    u_xlat2.w = (-u_xlat16_5);
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_5;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat18;
float u_xlat19;
int u_xlati19;
float u_xlat20;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat19) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati19 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _Shininess;
    u_xlat12 = exp2(u_xlat12);
    vs_TEXCOORD2.xy = (int(u_xlati19) != 0) ? vec2(u_xlat12) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat18;
float u_xlat19;
int u_xlati19;
float u_xlat20;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat19) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati19 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _Shininess;
    u_xlat12 = exp2(u_xlat12);
    vs_TEXCOORD2.xy = (int(u_xlati19) != 0) ? vec2(u_xlat12) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat18;
float u_xlat19;
int u_xlati19;
float u_xlat20;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat19) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati19 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _Shininess;
    u_xlat12 = exp2(u_xlat12);
    vs_TEXCOORD2.xy = (int(u_xlati19) != 0) ? vec2(u_xlat12) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
float u_xlat21;
float u_xlat22;
int u_xlati22;
float u_xlat23;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat22) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati22 = int(u_xlat16_4);
    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat6.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat14) + u_xlat5.xyz;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat5.xyz = vec3(u_xlat14) * u_xlat6.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat14 = log2(u_xlat14);
    u_xlat14 = u_xlat14 * _Shininess;
    u_xlat14 = exp2(u_xlat14);
    vs_TEXCOORD2.xy = (int(u_xlati22) != 0) ? vec2(u_xlat14) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat5.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat5.zz + u_xlat5.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat4 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat2 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
float u_xlat21;
float u_xlat22;
int u_xlati22;
float u_xlat23;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat22) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati22 = int(u_xlat16_4);
    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat6.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat14) + u_xlat5.xyz;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat5.xyz = vec3(u_xlat14) * u_xlat6.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat14 = log2(u_xlat14);
    u_xlat14 = u_xlat14 * _Shininess;
    u_xlat14 = exp2(u_xlat14);
    vs_TEXCOORD2.xy = (int(u_xlati22) != 0) ? vec2(u_xlat14) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat5.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat5.zz + u_xlat5.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat4 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat2 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
float u_xlat21;
float u_xlat22;
int u_xlati22;
float u_xlat23;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat22) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati22 = int(u_xlat16_4);
    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat6.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat14) + u_xlat5.xyz;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat5.xyz = vec3(u_xlat14) * u_xlat6.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat14 = log2(u_xlat14);
    u_xlat14 = u_xlat14 * _Shininess;
    u_xlat14 = exp2(u_xlat14);
    vs_TEXCOORD2.xy = (int(u_xlati22) != 0) ? vec2(u_xlat14) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat5.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat5.zz + u_xlat5.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat4 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat2 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _ZPositionAdd.x + u_xlat18;
    u_xlat18 = u_xlat12 * _ZPositionAdd.z + u_xlat18;
    u_xlat1.x = (-u_xlat18);
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat6 = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat0.x * _YPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.x = u_xlat12 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat6;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec4 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
mediump float u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
ivec2 u_xlati21;
mediump float u_xlat16_22;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati3 = ~u_xlati1.yxwz;
    u_xlati4 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati3));
    u_xlat5.x = (u_xlati4.x != 0) ? float(0.25) : float(0.5);
    u_xlat5.y = (u_xlati4.x != 0) ? float(0.75) : float(0.5);
    u_xlat5.z = (u_xlati4.z != 0) ? float(0.25) : float(0.5);
    u_xlat5.w = (u_xlati4.z != 0) ? float(0.75) : float(0.5);
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.w) & uint(u_xlati3.z), uint(u_xlati3.w) & uint(u_xlati3.z)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.25) : u_xlat5.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat5.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.25) : u_xlat5.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat5.w;
    u_xlat3.x = (u_xlati4.y != 0) ? float(0.75) : u_xlat3.x;
    u_xlat3.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat3.y;
    u_xlat3.z = (u_xlati4.w != 0) ? float(0.75) : u_xlat3.z;
    u_xlat3.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat3.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat3.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat3.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat3.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat3.w;
    u_xlat3 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat3 = u_xlat3 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat3.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_5 = u_xlat10_4 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_5.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat3.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat3 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat3.x);
    u_xlat3.x = min(u_xlat3.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat3.z, u_xlat1.x);
    u_xlat3.y = min(u_xlat3.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.y = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_11 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_11 = u_xlat3.x * u_xlat16_11;
    u_xlat16_11 = u_xlat3.y * u_xlat16_11;
    u_xlati3.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati21.xy = ~u_xlati3.yx;
    u_xlati4.xz = ivec2(uvec2(u_xlati3.xy) & uvec2(u_xlati21.xy));
    u_xlat6 = (u_xlati4.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati21.y) & uint(u_xlati21.x));
    u_xlat6 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat6;
    u_xlat6 = (u_xlati4.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat6;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.y));
    u_xlat3 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat6;
    u_xlat4.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat4.xz = u_xlat4.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat4.xz = vec2((-u_xlat3.y) + u_xlat4.x, (-u_xlat3.w) + u_xlat4.z);
    u_xlat4.xz = u_xlat4.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat4.x * _BaseWoundScale + u_xlat3.y;
    u_xlat6 = u_xlat3 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat3.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat3.w + u_xlat4.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat3.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat4.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_20 = u_xlat16_3.w * _WoundAlpha2;
    u_xlat16_20 = u_xlat28 * u_xlat16_20;
    u_xlat16_20 = u_xlat4.x * u_xlat16_20;
    u_xlat16_28 = u_xlat16_2.x * 1.10000002 + u_xlat10_4.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_11 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_30 = u_xlat16_30 + -1.0;
    u_xlat16_30 = u_xlat16_30 / u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_20 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_4 = u_xlat16_4 + -1.0;
    u_xlat16_4 = u_xlat16_4 / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_13);
    u_xlat16_22 = u_xlat16_30 * _ColorScale1;
    u_xlat16_13 = u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) * u_xlat16_13 + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22) + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_30);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * vec3(u_xlat16_4);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_28 = (-u_xlat16_30) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_28) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _ZPositionAdd.x + u_xlat18;
    u_xlat18 = u_xlat12 * _ZPositionAdd.z + u_xlat18;
    u_xlat1.x = (-u_xlat18);
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat6 = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat0.x * _YPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.x = u_xlat12 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat6;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec4 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
mediump float u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
ivec2 u_xlati21;
mediump float u_xlat16_22;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati3 = ~u_xlati1.yxwz;
    u_xlati4 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati3));
    u_xlat5.x = (u_xlati4.x != 0) ? float(0.25) : float(0.5);
    u_xlat5.y = (u_xlati4.x != 0) ? float(0.75) : float(0.5);
    u_xlat5.z = (u_xlati4.z != 0) ? float(0.25) : float(0.5);
    u_xlat5.w = (u_xlati4.z != 0) ? float(0.75) : float(0.5);
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.w) & uint(u_xlati3.z), uint(u_xlati3.w) & uint(u_xlati3.z)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.25) : u_xlat5.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat5.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.25) : u_xlat5.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat5.w;
    u_xlat3.x = (u_xlati4.y != 0) ? float(0.75) : u_xlat3.x;
    u_xlat3.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat3.y;
    u_xlat3.z = (u_xlati4.w != 0) ? float(0.75) : u_xlat3.z;
    u_xlat3.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat3.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat3.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat3.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat3.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat3.w;
    u_xlat3 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat3 = u_xlat3 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat3.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_5 = u_xlat10_4 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_5.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat3.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat3 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat3.x);
    u_xlat3.x = min(u_xlat3.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat3.z, u_xlat1.x);
    u_xlat3.y = min(u_xlat3.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.y = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_11 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_11 = u_xlat3.x * u_xlat16_11;
    u_xlat16_11 = u_xlat3.y * u_xlat16_11;
    u_xlati3.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati21.xy = ~u_xlati3.yx;
    u_xlati4.xz = ivec2(uvec2(u_xlati3.xy) & uvec2(u_xlati21.xy));
    u_xlat6 = (u_xlati4.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati21.y) & uint(u_xlati21.x));
    u_xlat6 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat6;
    u_xlat6 = (u_xlati4.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat6;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.y));
    u_xlat3 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat6;
    u_xlat4.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat4.xz = u_xlat4.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat4.xz = vec2((-u_xlat3.y) + u_xlat4.x, (-u_xlat3.w) + u_xlat4.z);
    u_xlat4.xz = u_xlat4.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat4.x * _BaseWoundScale + u_xlat3.y;
    u_xlat6 = u_xlat3 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat3.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat3.w + u_xlat4.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat3.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat4.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_20 = u_xlat16_3.w * _WoundAlpha2;
    u_xlat16_20 = u_xlat28 * u_xlat16_20;
    u_xlat16_20 = u_xlat4.x * u_xlat16_20;
    u_xlat16_28 = u_xlat16_2.x * 1.10000002 + u_xlat10_4.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_11 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_30 = u_xlat16_30 + -1.0;
    u_xlat16_30 = u_xlat16_30 / u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_20 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_4 = u_xlat16_4 + -1.0;
    u_xlat16_4 = u_xlat16_4 / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_13);
    u_xlat16_22 = u_xlat16_30 * _ColorScale1;
    u_xlat16_13 = u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) * u_xlat16_13 + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22) + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_30);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * vec3(u_xlat16_4);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_28 = (-u_xlat16_30) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_28) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _ZPositionAdd.x + u_xlat18;
    u_xlat18 = u_xlat12 * _ZPositionAdd.z + u_xlat18;
    u_xlat1.x = (-u_xlat18);
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat6 = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat0.x * _YPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.x = u_xlat12 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat6;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec4 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
mediump float u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
ivec2 u_xlati21;
mediump float u_xlat16_22;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati3 = ~u_xlati1.yxwz;
    u_xlati4 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati3));
    u_xlat5.x = (u_xlati4.x != 0) ? float(0.25) : float(0.5);
    u_xlat5.y = (u_xlati4.x != 0) ? float(0.75) : float(0.5);
    u_xlat5.z = (u_xlati4.z != 0) ? float(0.25) : float(0.5);
    u_xlat5.w = (u_xlati4.z != 0) ? float(0.75) : float(0.5);
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.w) & uint(u_xlati3.z), uint(u_xlati3.w) & uint(u_xlati3.z)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.25) : u_xlat5.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat5.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.25) : u_xlat5.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat5.w;
    u_xlat3.x = (u_xlati4.y != 0) ? float(0.75) : u_xlat3.x;
    u_xlat3.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat3.y;
    u_xlat3.z = (u_xlati4.w != 0) ? float(0.75) : u_xlat3.z;
    u_xlat3.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat3.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat3.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat3.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat3.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat3.w;
    u_xlat3 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat3 = u_xlat3 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat3.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_5 = u_xlat10_4 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_5.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat3.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat3 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat3.x);
    u_xlat3.x = min(u_xlat3.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat3.z, u_xlat1.x);
    u_xlat3.y = min(u_xlat3.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.y = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_11 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_11 = u_xlat3.x * u_xlat16_11;
    u_xlat16_11 = u_xlat3.y * u_xlat16_11;
    u_xlati3.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati21.xy = ~u_xlati3.yx;
    u_xlati4.xz = ivec2(uvec2(u_xlati3.xy) & uvec2(u_xlati21.xy));
    u_xlat6 = (u_xlati4.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati21.y) & uint(u_xlati21.x));
    u_xlat6 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat6;
    u_xlat6 = (u_xlati4.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat6;
    u_xlati28 = int(uint(u_xlati3.x) & uint(u_xlati3.y));
    u_xlat3 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat6;
    u_xlat4.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat6.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat4.xz = u_xlat4.xz * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlat4.xz = vec2((-u_xlat3.y) + u_xlat4.x, (-u_xlat3.w) + u_xlat4.z);
    u_xlat4.xz = u_xlat4.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat4.x * _BaseWoundScale + u_xlat3.y;
    u_xlat6 = u_xlat3 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat6.x);
    u_xlat3.x = min(u_xlat6.y, u_xlat28);
    u_xlat28 = u_xlat3.w + u_xlat4.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat6.z, u_xlat28);
    u_xlat3.y = min(u_xlat6.w, u_xlat28);
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat4.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_20 = u_xlat16_3.w * _WoundAlpha2;
    u_xlat16_20 = u_xlat28 * u_xlat16_20;
    u_xlat16_20 = u_xlat4.x * u_xlat16_20;
    u_xlat16_28 = u_xlat16_2.x * 1.10000002 + u_xlat10_4.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_11 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_30 = u_xlat16_30 + -1.0;
    u_xlat16_30 = u_xlat16_30 / u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_20 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_4 = u_xlat16_4 + -1.0;
    u_xlat16_4 = u_xlat16_4 / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_13);
    u_xlat16_22 = u_xlat16_30 * _ColorScale1;
    u_xlat16_13 = u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) * u_xlat16_13 + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22) + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_30);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * vec3(u_xlat16_4);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_28 = (-u_xlat16_30) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_28) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat7;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
mediump float u_xlat16_12;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat19;
ivec2 u_xlati19;
mediump float u_xlat16_20;
float u_xlat25;
mediump float u_xlat16_25;
int u_xlati25;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat19 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat25 = u_xlat25 * u_xlat19 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_26 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_26 = (u_xlati3.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati3 = ~u_xlati1.yxwz;
    u_xlati4 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati3));
    u_xlat5.x = (u_xlati4.x != 0) ? float(0.25) : float(0.5);
    u_xlat5.y = (u_xlati4.x != 0) ? float(0.75) : float(0.5);
    u_xlat5.z = (u_xlati4.z != 0) ? float(0.25) : float(0.5);
    u_xlat5.w = (u_xlati4.z != 0) ? float(0.75) : float(0.5);
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.w) & uint(u_xlati3.z), uint(u_xlati3.w) & uint(u_xlati3.z)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.25) : u_xlat5.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat5.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.25) : u_xlat5.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat5.w;
    u_xlat3.x = (u_xlati4.y != 0) ? float(0.75) : u_xlat3.x;
    u_xlat3.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat3.y;
    u_xlat3.z = (u_xlati4.w != 0) ? float(0.75) : u_xlat3.z;
    u_xlat3.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat3.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat3.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat3.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat3.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat3.w;
    u_xlat3 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat3 = u_xlat3 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat3.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_5 = u_xlat10_4 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_5.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat3.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat3 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat3.x);
    u_xlat3.x = min(u_xlat3.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat3.z, u_xlat1.x);
    u_xlat3.y = min(u_xlat3.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.y = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_10 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_10 = u_xlat3.x * u_xlat16_10;
    u_xlat16_10 = u_xlat3.y * u_xlat16_10;
    u_xlati3.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati19.xy = ~u_xlati3.yx;
    u_xlati4.xz = ivec2(uvec2(u_xlati3.xy) & uvec2(u_xlati19.xy));
    u_xlat6 = (u_xlati4.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati25 = int(uint(u_xlati19.y) & uint(u_xlati19.x));
    u_xlat6 = (int(u_xlati25) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat6;
    u_xlat6 = (u_xlati4.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat6;
    u_xlati25 = int(uint(u_xlati3.x) & uint(u_xlati3.y));
    u_xlat3 = (int(u_xlati25) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat6;
    u_xlat4.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat7.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat4.xz = u_xlat4.xz * vec2(0.5, 0.5) + u_xlat7.xy;
    u_xlat4.xz = vec2((-u_xlat3.y) + u_xlat4.x, (-u_xlat3.w) + u_xlat4.z);
    u_xlat4.xz = u_xlat4.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat25 = u_xlat4.x * _BaseWoundScale + u_xlat3.y;
    u_xlat6 = u_xlat3 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat25 = max(u_xlat25, u_xlat6.x);
    u_xlat3.x = min(u_xlat6.y, u_xlat25);
    u_xlat25 = u_xlat3.w + u_xlat4.z;
    u_xlat25 = u_xlat25 + _WoundOffsetHead2;
    u_xlat25 = max(u_xlat6.z, u_xlat25);
    u_xlat3.y = min(u_xlat6.w, u_xlat25);
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor2;
    u_xlat25 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat25 = ceil(u_xlat25);
    u_xlat4.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_18 = u_xlat16_3.w * _WoundAlpha2;
    u_xlat16_18 = u_xlat25 * u_xlat16_18;
    u_xlat16_18 = u_xlat4.x * u_xlat16_18;
    u_xlat16_25 = u_xlat16_2.x * 1.10000002 + u_xlat10_4.y;
    u_xlat16_25 = u_xlat16_25 + -1.0;
    u_xlat16_25 = u_xlat16_25 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_10 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_27 = u_xlat16_27 + -1.0;
    u_xlat16_27 = u_xlat16_27 / u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_18 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_4 = u_xlat16_4 + -1.0;
    u_xlat16_4 = u_xlat16_4 / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat16_25) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_12);
    u_xlat16_20 = u_xlat16_27 * _ColorScale1;
    u_xlat16_12 = u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_20 = (-u_xlat16_20) * u_xlat16_12 + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_20) + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_12) + u_xlat0.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * vec3(u_xlat16_4);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_25 = (-u_xlat16_27) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat7;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
mediump float u_xlat16_12;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat19;
ivec2 u_xlati19;
mediump float u_xlat16_20;
float u_xlat25;
mediump float u_xlat16_25;
int u_xlati25;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat19 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat25 = u_xlat25 * u_xlat19 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_26 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_26 = (u_xlati3.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati3 = ~u_xlati1.yxwz;
    u_xlati4 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati3));
    u_xlat5.x = (u_xlati4.x != 0) ? float(0.25) : float(0.5);
    u_xlat5.y = (u_xlati4.x != 0) ? float(0.75) : float(0.5);
    u_xlat5.z = (u_xlati4.z != 0) ? float(0.25) : float(0.5);
    u_xlat5.w = (u_xlati4.z != 0) ? float(0.75) : float(0.5);
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.w) & uint(u_xlati3.z), uint(u_xlati3.w) & uint(u_xlati3.z)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.25) : u_xlat5.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat5.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.25) : u_xlat5.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat5.w;
    u_xlat3.x = (u_xlati4.y != 0) ? float(0.75) : u_xlat3.x;
    u_xlat3.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat3.y;
    u_xlat3.z = (u_xlati4.w != 0) ? float(0.75) : u_xlat3.z;
    u_xlat3.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat3.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat3.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat3.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat3.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat3.w;
    u_xlat3 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat3 = u_xlat3 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat3.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_5 = u_xlat10_4 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_5.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat3.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat3 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat3.x);
    u_xlat3.x = min(u_xlat3.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat3.z, u_xlat1.x);
    u_xlat3.y = min(u_xlat3.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.y = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_10 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_10 = u_xlat3.x * u_xlat16_10;
    u_xlat16_10 = u_xlat3.y * u_xlat16_10;
    u_xlati3.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati19.xy = ~u_xlati3.yx;
    u_xlati4.xz = ivec2(uvec2(u_xlati3.xy) & uvec2(u_xlati19.xy));
    u_xlat6 = (u_xlati4.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati25 = int(uint(u_xlati19.y) & uint(u_xlati19.x));
    u_xlat6 = (int(u_xlati25) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat6;
    u_xlat6 = (u_xlati4.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat6;
    u_xlati25 = int(uint(u_xlati3.x) & uint(u_xlati3.y));
    u_xlat3 = (int(u_xlati25) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat6;
    u_xlat4.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat7.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat4.xz = u_xlat4.xz * vec2(0.5, 0.5) + u_xlat7.xy;
    u_xlat4.xz = vec2((-u_xlat3.y) + u_xlat4.x, (-u_xlat3.w) + u_xlat4.z);
    u_xlat4.xz = u_xlat4.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat25 = u_xlat4.x * _BaseWoundScale + u_xlat3.y;
    u_xlat6 = u_xlat3 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat25 = max(u_xlat25, u_xlat6.x);
    u_xlat3.x = min(u_xlat6.y, u_xlat25);
    u_xlat25 = u_xlat3.w + u_xlat4.z;
    u_xlat25 = u_xlat25 + _WoundOffsetHead2;
    u_xlat25 = max(u_xlat6.z, u_xlat25);
    u_xlat3.y = min(u_xlat6.w, u_xlat25);
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor2;
    u_xlat25 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat25 = ceil(u_xlat25);
    u_xlat4.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_18 = u_xlat16_3.w * _WoundAlpha2;
    u_xlat16_18 = u_xlat25 * u_xlat16_18;
    u_xlat16_18 = u_xlat4.x * u_xlat16_18;
    u_xlat16_25 = u_xlat16_2.x * 1.10000002 + u_xlat10_4.y;
    u_xlat16_25 = u_xlat16_25 + -1.0;
    u_xlat16_25 = u_xlat16_25 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_10 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_27 = u_xlat16_27 + -1.0;
    u_xlat16_27 = u_xlat16_27 / u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_18 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_4 = u_xlat16_4 + -1.0;
    u_xlat16_4 = u_xlat16_4 / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat16_25) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_12);
    u_xlat16_20 = u_xlat16_27 * _ColorScale1;
    u_xlat16_12 = u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_20 = (-u_xlat16_20) * u_xlat16_12 + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_20) + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_12) + u_xlat0.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * vec3(u_xlat16_4);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_25 = (-u_xlat16_27) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat7;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
mediump float u_xlat16_12;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat19;
ivec2 u_xlati19;
mediump float u_xlat16_20;
float u_xlat25;
mediump float u_xlat16_25;
int u_xlati25;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat19 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat25 = u_xlat25 * u_xlat19 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_26 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_26 = (u_xlati3.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati3 = ~u_xlati1.yxwz;
    u_xlati4 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati3));
    u_xlat5.x = (u_xlati4.x != 0) ? float(0.25) : float(0.5);
    u_xlat5.y = (u_xlati4.x != 0) ? float(0.75) : float(0.5);
    u_xlat5.z = (u_xlati4.z != 0) ? float(0.25) : float(0.5);
    u_xlat5.w = (u_xlati4.z != 0) ? float(0.75) : float(0.5);
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.y) & uint(u_xlati3.x), uint(u_xlati3.w) & uint(u_xlati3.z), uint(u_xlati3.w) & uint(u_xlati3.z)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.25) : u_xlat5.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.25) : u_xlat5.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.25) : u_xlat5.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.25) : u_xlat5.w;
    u_xlat3.x = (u_xlati4.y != 0) ? float(0.75) : u_xlat3.x;
    u_xlat3.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat3.y;
    u_xlat3.z = (u_xlati4.w != 0) ? float(0.75) : u_xlat3.z;
    u_xlat3.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat3.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat3.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat3.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat3.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat3.w;
    u_xlat3 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat3 = u_xlat3 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat3.xy;
    u_xlat3.xy = (-u_xlat1.xy) + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3.x = u_xlat3.x * _BaseWoundScale + u_xlat1.x;
    u_xlat4 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat3.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat3.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_5 = u_xlat10_4 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_5.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat3.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat3 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat3.x);
    u_xlat3.x = min(u_xlat3.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat3.z, u_xlat1.x);
    u_xlat3.y = min(u_xlat3.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat3.x = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.y = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_10 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_10 = u_xlat3.x * u_xlat16_10;
    u_xlat16_10 = u_xlat3.y * u_xlat16_10;
    u_xlati3.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati19.xy = ~u_xlati3.yx;
    u_xlati4.xz = ivec2(uvec2(u_xlati3.xy) & uvec2(u_xlati19.xy));
    u_xlat6 = (u_xlati4.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati25 = int(uint(u_xlati19.y) & uint(u_xlati19.x));
    u_xlat6 = (int(u_xlati25) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat6;
    u_xlat6 = (u_xlati4.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat6;
    u_xlati25 = int(uint(u_xlati3.x) & uint(u_xlati3.y));
    u_xlat3 = (int(u_xlati25) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat6;
    u_xlat4.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat7.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat4.xz = u_xlat4.xz * vec2(0.5, 0.5) + u_xlat7.xy;
    u_xlat4.xz = vec2((-u_xlat3.y) + u_xlat4.x, (-u_xlat3.w) + u_xlat4.z);
    u_xlat4.xz = u_xlat4.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat25 = u_xlat4.x * _BaseWoundScale + u_xlat3.y;
    u_xlat6 = u_xlat3 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat25 = max(u_xlat25, u_xlat6.x);
    u_xlat3.x = min(u_xlat6.y, u_xlat25);
    u_xlat25 = u_xlat3.w + u_xlat4.z;
    u_xlat25 = u_xlat25 + _WoundOffsetHead2;
    u_xlat25 = max(u_xlat6.z, u_xlat25);
    u_xlat3.y = min(u_xlat6.w, u_xlat25);
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor2;
    u_xlat25 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat25 = ceil(u_xlat25);
    u_xlat4.x = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_18 = u_xlat16_3.w * _WoundAlpha2;
    u_xlat16_18 = u_xlat25 * u_xlat16_18;
    u_xlat16_18 = u_xlat4.x * u_xlat16_18;
    u_xlat16_25 = u_xlat16_2.x * 1.10000002 + u_xlat10_4.y;
    u_xlat16_25 = u_xlat16_25 + -1.0;
    u_xlat16_25 = u_xlat16_25 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_10 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_27 = u_xlat16_27 + -1.0;
    u_xlat16_27 = u_xlat16_27 / u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_18 * 1.10000002 + u_xlat10_4.y;
    u_xlat16_4 = u_xlat16_4 + -1.0;
    u_xlat16_4 = u_xlat16_4 / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat16_25) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_12);
    u_xlat16_20 = u_xlat16_27 * _ColorScale1;
    u_xlat16_12 = u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_20 = (-u_xlat16_20) * u_xlat16_12 + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_20) + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_12) + u_xlat0.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * vec3(u_xlat16_4);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_25 = (-u_xlat16_27) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
vec2 u_xlat16;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat2.w + u_xlat2.y;
    u_xlat22 = u_xlat2.x * in_POSITION0.x;
    u_xlat16.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat16.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat16.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
vec2 u_xlat16;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat2.w + u_xlat2.y;
    u_xlat22 = u_xlat2.x * in_POSITION0.x;
    u_xlat16.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat16.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat16.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
vec2 u_xlat16;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat2.w + u_xlat2.y;
    u_xlat22 = u_xlat2.x * in_POSITION0.x;
    u_xlat16.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat16.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat16.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
vec2 u_xlat16;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    u_xlat4 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat2.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat2.w + u_xlat2.y;
    u_xlat22 = u_xlat2.x * in_POSITION0.x;
    u_xlat16.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat16.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat16.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat2 = (-u_xlat4.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat2 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
vec2 u_xlat16;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    u_xlat4 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat2.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat2.w + u_xlat2.y;
    u_xlat22 = u_xlat2.x * in_POSITION0.x;
    u_xlat16.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat16.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat16.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat2 = (-u_xlat4.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat2 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
int u_xlati14;
vec2 u_xlat16;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat14) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati14 = int(u_xlat16_5);
    u_xlat4 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
    u_xlat6.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat2.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlat22 = log2(u_xlat22);
    u_xlat22 = u_xlat22 * _Shininess;
    u_xlat22 = exp2(u_xlat22);
    vs_TEXCOORD2.xy = (int(u_xlati14) != 0) ? vec2(u_xlat22) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat2.w + u_xlat2.y;
    u_xlat22 = u_xlat2.x * in_POSITION0.x;
    u_xlat16.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat16.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat16.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat2 = (-u_xlat4.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat2 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat5 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5>=(-u_xlat5));
#else
    u_xlatb5 = u_xlat5>=(-u_xlat5);
#endif
    u_xlat5 = (u_xlatb5) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat10 = float(1.0) / u_xlat5;
    u_xlat10 = u_xlat10 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat10);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat5 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat5 = u_xlat5 + _BipScale.y;
    u_xlat15 = u_xlat5 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat10 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat10 = u_xlat10 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat15 = u_xlat0.x * _ZPositionAdd.x + u_xlat15;
    u_xlat15 = u_xlat10 * _ZPositionAdd.z + u_xlat15;
    u_xlat1.x = (-u_xlat15);
    u_xlat15 = u_xlat5 * _XPositionAdd.y;
    u_xlat5 = u_xlat5 * _YPositionAdd.y;
    u_xlat5 = u_xlat0.x * _YPositionAdd.x + u_xlat5;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat15;
    u_xlat0.x = u_xlat10 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat10 * _YPositionAdd.z + u_xlat5;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump float u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec4 u_xlati5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump float u_xlat16_12;
mediump float u_xlat16_15;
bvec2 u_xlatb20;
mediump float u_xlat16_22;
ivec2 u_xlati24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
int u_xlati31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat31 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_32 = u_xlat10_6.x * 1.99000001;
    u_xlat33 = u_xlat16_32 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + (-_WorldSpaceCameraPos.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat31 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat31 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat31) * vec2(1.70000005, 1.5) + (-vec2(u_xlat33));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat31 = u_xlat31 * 1.70000005 + (-u_xlat33);
    u_xlat31 = u_xlat31 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat33 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat31 = u_xlat31 * u_xlat33 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_32 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat31;
    u_xlat31 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_32 = (u_xlati5.x != 0) ? u_xlat16_32 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat31) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati4 = ~u_xlati1.yxwz;
    u_xlati5 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati4));
    u_xlat6.x = (u_xlati5.x != 0) ? float(0.25) : float(0.5);
    u_xlat6.y = (u_xlati5.x != 0) ? float(0.75) : float(0.5);
    u_xlat6.z = (u_xlati5.z != 0) ? float(0.25) : float(0.5);
    u_xlat6.w = (u_xlati5.z != 0) ? float(0.75) : float(0.5);
    u_xlati4 = ivec4(uvec4(uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.w) & uint(u_xlati4.z), uint(u_xlati4.w) & uint(u_xlati4.z)));
    u_xlat4.x = (u_xlati4.x != 0) ? float(0.25) : u_xlat6.x;
    u_xlat4.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat6.y;
    u_xlat4.z = (u_xlati4.z != 0) ? float(0.25) : u_xlat6.z;
    u_xlat4.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat6.w;
    u_xlat4.x = (u_xlati5.y != 0) ? float(0.75) : u_xlat4.x;
    u_xlat4.y = (u_xlati5.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat4.z = (u_xlati5.w != 0) ? float(0.75) : u_xlat4.z;
    u_xlat4.w = (u_xlati5.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat4.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat4.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat4.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat4.w;
    u_xlat4 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat4.xy;
    u_xlat4.xy = (-u_xlat1.xy) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat33 = u_xlat4.x * _BaseWoundScale + u_xlat1.x;
    u_xlat5 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat33, u_xlat5.x);
    u_xlat5.x = min(u_xlat5.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat4.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat5.z, u_xlat1.x);
    u_xlat5.y = min(u_xlat5.w, u_xlat1.x);
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy);
    u_xlat16_6 = u_xlat10_5 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_6.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat4.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat4 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat33 = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat33 = ceil(u_xlat33);
    u_xlat4.x = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_12 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12 = u_xlat33 * u_xlat16_12;
    u_xlat16_12 = u_xlat4.x * u_xlat16_12;
    u_xlati4.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati24.xy = ~u_xlati4.yx;
    u_xlati5.xz = ivec2(uvec2(u_xlati4.xy) & uvec2(u_xlati24.xy));
    u_xlat7 = (u_xlati5.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati31 = int(uint(u_xlati24.y) & uint(u_xlati24.x));
    u_xlat7 = (int(u_xlati31) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat7;
    u_xlat7 = (u_xlati5.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat7;
    u_xlati31 = int(uint(u_xlati4.x) & uint(u_xlati4.y));
    u_xlat4 = (int(u_xlati31) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat7;
    u_xlat5.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat9.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat5.xz = u_xlat5.xz * vec2(0.5, 0.5) + u_xlat9.xy;
    u_xlat5.xz = vec2((-u_xlat4.y) + u_xlat5.x, (-u_xlat4.w) + u_xlat5.z);
    u_xlat5.xz = u_xlat5.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat31 = u_xlat5.x * _BaseWoundScale + u_xlat4.y;
    u_xlat7 = u_xlat4 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat31 = max(u_xlat31, u_xlat7.x);
    u_xlat4.x = min(u_xlat7.y, u_xlat31);
    u_xlat31 = u_xlat4.w + u_xlat5.z;
    u_xlat31 = u_xlat31 + _WoundOffsetHead2;
    u_xlat31 = max(u_xlat7.z, u_xlat31);
    u_xlat4.y = min(u_xlat7.w, u_xlat31);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_4 * _MaskColor2;
    u_xlat31 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = ceil(u_xlat31);
    u_xlat33 = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat33 = ceil(u_xlat33);
    u_xlat16_22 = u_xlat16_4.w * _WoundAlpha2;
    u_xlat16_22 = u_xlat31 * u_xlat16_22;
    u_xlat16_22 = u_xlat33 * u_xlat16_22;
    u_xlat16_31 = u_xlat16_2.x * 1.10000002 + u_xlat10_5.y;
    u_xlat16_31 = u_xlat16_31 + -1.0;
    u_xlat16_31 = u_xlat16_31 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_12 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_33 = u_xlat16_33 + -1.0;
    u_xlat16_33 = u_xlat16_33 / u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_22 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_34 = u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_34 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_5 = (-u_xlat16_31) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_5);
    u_xlat16_15 = u_xlat16_33 * _ColorScale1;
    u_xlat16_5 = u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
#else
    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat16_15) * u_xlat16_5 + 1.0;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_15) + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_5) + u_xlat0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_31 = (-u_xlat16_33) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_32) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_32;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat30) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_12 = u_xlat3.y + u_xlat3.x;
    u_xlat16_12 = u_xlat3.z + u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_22 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_12 * u_xlat16_22 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_12 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_12 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat5 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5>=(-u_xlat5));
#else
    u_xlatb5 = u_xlat5>=(-u_xlat5);
#endif
    u_xlat5 = (u_xlatb5) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat10 = float(1.0) / u_xlat5;
    u_xlat10 = u_xlat10 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat10);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat5 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat5 = u_xlat5 + _BipScale.y;
    u_xlat15 = u_xlat5 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat10 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat10 = u_xlat10 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat15 = u_xlat0.x * _ZPositionAdd.x + u_xlat15;
    u_xlat15 = u_xlat10 * _ZPositionAdd.z + u_xlat15;
    u_xlat1.x = (-u_xlat15);
    u_xlat15 = u_xlat5 * _XPositionAdd.y;
    u_xlat5 = u_xlat5 * _YPositionAdd.y;
    u_xlat5 = u_xlat0.x * _YPositionAdd.x + u_xlat5;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat15;
    u_xlat0.x = u_xlat10 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat10 * _YPositionAdd.z + u_xlat5;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump float u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec4 u_xlati5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump float u_xlat16_12;
mediump float u_xlat16_15;
bvec2 u_xlatb20;
mediump float u_xlat16_22;
ivec2 u_xlati24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
int u_xlati31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat31 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_32 = u_xlat10_6.x * 1.99000001;
    u_xlat33 = u_xlat16_32 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + (-_WorldSpaceCameraPos.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat31 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat31 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat31) * vec2(1.70000005, 1.5) + (-vec2(u_xlat33));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat31 = u_xlat31 * 1.70000005 + (-u_xlat33);
    u_xlat31 = u_xlat31 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat33 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat31 = u_xlat31 * u_xlat33 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_32 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat31;
    u_xlat31 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_32 = (u_xlati5.x != 0) ? u_xlat16_32 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat31) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati4 = ~u_xlati1.yxwz;
    u_xlati5 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati4));
    u_xlat6.x = (u_xlati5.x != 0) ? float(0.25) : float(0.5);
    u_xlat6.y = (u_xlati5.x != 0) ? float(0.75) : float(0.5);
    u_xlat6.z = (u_xlati5.z != 0) ? float(0.25) : float(0.5);
    u_xlat6.w = (u_xlati5.z != 0) ? float(0.75) : float(0.5);
    u_xlati4 = ivec4(uvec4(uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.w) & uint(u_xlati4.z), uint(u_xlati4.w) & uint(u_xlati4.z)));
    u_xlat4.x = (u_xlati4.x != 0) ? float(0.25) : u_xlat6.x;
    u_xlat4.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat6.y;
    u_xlat4.z = (u_xlati4.z != 0) ? float(0.25) : u_xlat6.z;
    u_xlat4.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat6.w;
    u_xlat4.x = (u_xlati5.y != 0) ? float(0.75) : u_xlat4.x;
    u_xlat4.y = (u_xlati5.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat4.z = (u_xlati5.w != 0) ? float(0.75) : u_xlat4.z;
    u_xlat4.w = (u_xlati5.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat4.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat4.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat4.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat4.w;
    u_xlat4 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat4.xy;
    u_xlat4.xy = (-u_xlat1.xy) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat33 = u_xlat4.x * _BaseWoundScale + u_xlat1.x;
    u_xlat5 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat33, u_xlat5.x);
    u_xlat5.x = min(u_xlat5.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat4.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat5.z, u_xlat1.x);
    u_xlat5.y = min(u_xlat5.w, u_xlat1.x);
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy);
    u_xlat16_6 = u_xlat10_5 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_6.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat4.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat4 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat33 = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat33 = ceil(u_xlat33);
    u_xlat4.x = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_12 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12 = u_xlat33 * u_xlat16_12;
    u_xlat16_12 = u_xlat4.x * u_xlat16_12;
    u_xlati4.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati24.xy = ~u_xlati4.yx;
    u_xlati5.xz = ivec2(uvec2(u_xlati4.xy) & uvec2(u_xlati24.xy));
    u_xlat7 = (u_xlati5.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati31 = int(uint(u_xlati24.y) & uint(u_xlati24.x));
    u_xlat7 = (int(u_xlati31) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat7;
    u_xlat7 = (u_xlati5.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat7;
    u_xlati31 = int(uint(u_xlati4.x) & uint(u_xlati4.y));
    u_xlat4 = (int(u_xlati31) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat7;
    u_xlat5.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat9.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat5.xz = u_xlat5.xz * vec2(0.5, 0.5) + u_xlat9.xy;
    u_xlat5.xz = vec2((-u_xlat4.y) + u_xlat5.x, (-u_xlat4.w) + u_xlat5.z);
    u_xlat5.xz = u_xlat5.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat31 = u_xlat5.x * _BaseWoundScale + u_xlat4.y;
    u_xlat7 = u_xlat4 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat31 = max(u_xlat31, u_xlat7.x);
    u_xlat4.x = min(u_xlat7.y, u_xlat31);
    u_xlat31 = u_xlat4.w + u_xlat5.z;
    u_xlat31 = u_xlat31 + _WoundOffsetHead2;
    u_xlat31 = max(u_xlat7.z, u_xlat31);
    u_xlat4.y = min(u_xlat7.w, u_xlat31);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_4 * _MaskColor2;
    u_xlat31 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = ceil(u_xlat31);
    u_xlat33 = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat33 = ceil(u_xlat33);
    u_xlat16_22 = u_xlat16_4.w * _WoundAlpha2;
    u_xlat16_22 = u_xlat31 * u_xlat16_22;
    u_xlat16_22 = u_xlat33 * u_xlat16_22;
    u_xlat16_31 = u_xlat16_2.x * 1.10000002 + u_xlat10_5.y;
    u_xlat16_31 = u_xlat16_31 + -1.0;
    u_xlat16_31 = u_xlat16_31 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_12 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_33 = u_xlat16_33 + -1.0;
    u_xlat16_33 = u_xlat16_33 / u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_22 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_34 = u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_34 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_5 = (-u_xlat16_31) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_5);
    u_xlat16_15 = u_xlat16_33 * _ColorScale1;
    u_xlat16_5 = u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
#else
    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat16_15) * u_xlat16_5 + 1.0;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_15) + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_5) + u_xlat0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_31 = (-u_xlat16_33) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_32) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_32;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat30) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_12 = u_xlat3.y + u_xlat3.x;
    u_xlat16_12 = u_xlat3.z + u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_22 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_12 * u_xlat16_22 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_12 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_12 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.x = float(gl_VertexID);
    u_xlat5 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5>=(-u_xlat5));
#else
    u_xlatb5 = u_xlat5>=(-u_xlat5);
#endif
    u_xlat5 = (u_xlatb5) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat10 = float(1.0) / u_xlat5;
    u_xlat10 = u_xlat10 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat10);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat5 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat5 = u_xlat5 + _BipScale.y;
    u_xlat15 = u_xlat5 * _ZPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat10 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat10 = u_xlat10 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat15 = u_xlat0.x * _ZPositionAdd.x + u_xlat15;
    u_xlat15 = u_xlat10 * _ZPositionAdd.z + u_xlat15;
    u_xlat1.x = (-u_xlat15);
    u_xlat15 = u_xlat5 * _XPositionAdd.y;
    u_xlat5 = u_xlat5 * _YPositionAdd.y;
    u_xlat5 = u_xlat0.x * _YPositionAdd.x + u_xlat5;
    u_xlat0.x = u_xlat0.x * _XPositionAdd.x + u_xlat15;
    u_xlat0.x = u_xlat10 * _XPositionAdd.z + u_xlat0.x;
    u_xlat1.z = u_xlat10 * _YPositionAdd.z + u_xlat5;
    u_xlat1.y = (-u_xlat0.x);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec4 u_xlati1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump float u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec4 u_xlati5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump float u_xlat16_12;
mediump float u_xlat16_15;
bvec2 u_xlatb20;
mediump float u_xlat16_22;
ivec2 u_xlati24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
int u_xlati31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat31 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_32 = u_xlat10_6.x * 1.99000001;
    u_xlat33 = u_xlat16_32 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + (-_WorldSpaceCameraPos.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat31 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat31 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat31) * vec2(1.70000005, 1.5) + (-vec2(u_xlat33));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat31 = u_xlat31 * 1.70000005 + (-u_xlat33);
    u_xlat31 = u_xlat31 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat33 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat31 = u_xlat31 * u_xlat33 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_32 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat31;
    u_xlat31 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_32 = (u_xlati5.x != 0) ? u_xlat16_32 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat31) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlati1 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati4 = ~u_xlati1.yxwz;
    u_xlati5 = ivec4(uvec4(u_xlati1) & uvec4(u_xlati4));
    u_xlat6.x = (u_xlati5.x != 0) ? float(0.25) : float(0.5);
    u_xlat6.y = (u_xlati5.x != 0) ? float(0.75) : float(0.5);
    u_xlat6.z = (u_xlati5.z != 0) ? float(0.25) : float(0.5);
    u_xlat6.w = (u_xlati5.z != 0) ? float(0.75) : float(0.5);
    u_xlati4 = ivec4(uvec4(uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.w) & uint(u_xlati4.z), uint(u_xlati4.w) & uint(u_xlati4.z)));
    u_xlat4.x = (u_xlati4.x != 0) ? float(0.25) : u_xlat6.x;
    u_xlat4.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat6.y;
    u_xlat4.z = (u_xlati4.z != 0) ? float(0.25) : u_xlat6.z;
    u_xlat4.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat6.w;
    u_xlat4.x = (u_xlati5.y != 0) ? float(0.75) : u_xlat4.x;
    u_xlat4.y = (u_xlati5.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat4.z = (u_xlati5.w != 0) ? float(0.75) : u_xlat4.z;
    u_xlat4.w = (u_xlati5.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlati1 = ivec4(uvec4(uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.x) & uint(u_xlati1.y), uint(u_xlati1.z) & uint(u_xlati1.w), uint(u_xlati1.z) & uint(u_xlati1.w)));
    u_xlat1.x = (u_xlati1.x != 0) ? float(0.75) : u_xlat4.x;
    u_xlat1.y = (u_xlati1.y != 0) ? float(0.75) : u_xlat4.y;
    u_xlat1.z = (u_xlati1.z != 0) ? float(0.75) : u_xlat4.z;
    u_xlat1.w = (u_xlati1.w != 0) ? float(0.75) : u_xlat4.w;
    u_xlat4 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat4.xy;
    u_xlat4.xy = (-u_xlat1.xy) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat33 = u_xlat4.x * _BaseWoundScale + u_xlat1.x;
    u_xlat5 = u_xlat1.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat1.x = max(u_xlat33, u_xlat5.x);
    u_xlat5.x = min(u_xlat5.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.y + u_xlat4.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead0;
    u_xlat1.x = max(u_xlat5.z, u_xlat1.x);
    u_xlat5.y = min(u_xlat5.w, u_xlat1.x);
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy);
    u_xlat16_6 = u_xlat10_5 * _MaskColor;
    u_xlat1.x = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.y = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat1.xy = ceil(u_xlat1.xy);
    u_xlat16_2.x = u_xlat16_6.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.y * u_xlat16_2.x;
    u_xlat1.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat4.zw;
    u_xlat1.xy = vec2((-u_xlat1.z) + u_xlat1.x, (-u_xlat1.w) + u_xlat1.y);
    u_xlat1.xy = u_xlat1.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat1.x = u_xlat1.x * _BaseWoundScale + u_xlat1.z;
    u_xlat4 = vec4(u_xlat1.z + float(-0.25), u_xlat1.z + float(0.25), u_xlat1.w + float(-0.25), u_xlat1.w + float(0.25));
    u_xlat1.x = max(u_xlat1.x, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat1.x);
    u_xlat1.x = u_xlat1.w + u_xlat1.y;
    u_xlat1.x = u_xlat1.x + _WoundOffsetHead1;
    u_xlat1.x = max(u_xlat4.z, u_xlat1.x);
    u_xlat4.y = min(u_xlat4.w, u_xlat1.x);
    u_xlat10_1 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_1 = u_xlat10_1 * _MaskColor1;
    u_xlat33 = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat33 = ceil(u_xlat33);
    u_xlat4.x = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_12 = u_xlat16_1.w * _WoundAlpha1;
    u_xlat16_12 = u_xlat33 * u_xlat16_12;
    u_xlat16_12 = u_xlat4.x * u_xlat16_12;
    u_xlati4.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati24.xy = ~u_xlati4.yx;
    u_xlati5.xz = ivec2(uvec2(u_xlati4.xy) & uvec2(u_xlati24.xy));
    u_xlat7 = (u_xlati5.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati31 = int(uint(u_xlati24.y) & uint(u_xlati24.x));
    u_xlat7 = (int(u_xlati31) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat7;
    u_xlat7 = (u_xlati5.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat7;
    u_xlati31 = int(uint(u_xlati4.x) & uint(u_xlati4.y));
    u_xlat4 = (int(u_xlati31) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat7;
    u_xlat5.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat9.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat5.xz = u_xlat5.xz * vec2(0.5, 0.5) + u_xlat9.xy;
    u_xlat5.xz = vec2((-u_xlat4.y) + u_xlat5.x, (-u_xlat4.w) + u_xlat5.z);
    u_xlat5.xz = u_xlat5.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat31 = u_xlat5.x * _BaseWoundScale + u_xlat4.y;
    u_xlat7 = u_xlat4 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat31 = max(u_xlat31, u_xlat7.x);
    u_xlat4.x = min(u_xlat7.y, u_xlat31);
    u_xlat31 = u_xlat4.w + u_xlat5.z;
    u_xlat31 = u_xlat31 + _WoundOffsetHead2;
    u_xlat31 = max(u_xlat7.z, u_xlat31);
    u_xlat4.y = min(u_xlat7.w, u_xlat31);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_4 * _MaskColor2;
    u_xlat31 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = ceil(u_xlat31);
    u_xlat33 = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat33 = ceil(u_xlat33);
    u_xlat16_22 = u_xlat16_4.w * _WoundAlpha2;
    u_xlat16_22 = u_xlat31 * u_xlat16_22;
    u_xlat16_22 = u_xlat33 * u_xlat16_22;
    u_xlat16_31 = u_xlat16_2.x * 1.10000002 + u_xlat10_5.y;
    u_xlat16_31 = u_xlat16_31 + -1.0;
    u_xlat16_31 = u_xlat16_31 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_12 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_33 = u_xlat16_33 + -1.0;
    u_xlat16_33 = u_xlat16_33 / u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_22 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_34 = u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_34 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_5 = (-u_xlat16_31) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_5);
    u_xlat16_15 = u_xlat16_33 * _ColorScale1;
    u_xlat16_5 = u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
#else
    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat16_15) * u_xlat16_5 + 1.0;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_15) + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_5) + u_xlat0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorScale2);
    u_xlat16_31 = (-u_xlat16_33) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_32) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_32;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat30) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_12 = u_xlat3.y + u_xlat3.x;
    u_xlat16_12 = u_xlat3.z + u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_22 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_12 * u_xlat16_22 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_12 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_12 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump float u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec4 u_xlati5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
mediump float u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
ivec2 u_xlati22;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat30 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat28) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat28)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlati3 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati4 = ~u_xlati3.yxwz;
    u_xlati5 = ivec4(uvec4(u_xlati3) & uvec4(u_xlati4));
    u_xlat6.x = (u_xlati5.x != 0) ? float(0.25) : float(0.5);
    u_xlat6.y = (u_xlati5.x != 0) ? float(0.75) : float(0.5);
    u_xlat6.z = (u_xlati5.z != 0) ? float(0.25) : float(0.5);
    u_xlat6.w = (u_xlati5.z != 0) ? float(0.75) : float(0.5);
    u_xlati4 = ivec4(uvec4(uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.w) & uint(u_xlati4.z), uint(u_xlati4.w) & uint(u_xlati4.z)));
    u_xlat4.x = (u_xlati4.x != 0) ? float(0.25) : u_xlat6.x;
    u_xlat4.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat6.y;
    u_xlat4.z = (u_xlati4.z != 0) ? float(0.25) : u_xlat6.z;
    u_xlat4.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat6.w;
    u_xlat4.x = (u_xlati5.y != 0) ? float(0.75) : u_xlat4.x;
    u_xlat4.y = (u_xlati5.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat4.z = (u_xlati5.w != 0) ? float(0.75) : u_xlat4.z;
    u_xlat4.w = (u_xlati5.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.x) & uint(u_xlati3.y), uint(u_xlati3.x) & uint(u_xlati3.y), uint(u_xlati3.z) & uint(u_xlati3.w), uint(u_xlati3.z) & uint(u_xlati3.w)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.75) : u_xlat4.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.75) : u_xlat4.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.75) : u_xlat4.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.75) : u_xlat4.w;
    u_xlat4 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat4.xy;
    u_xlat4.xy = (-u_xlat3.xy) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat28 = u_xlat4.x * _BaseWoundScale + u_xlat3.x;
    u_xlat5 = u_xlat3.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat5.x);
    u_xlat5.x = min(u_xlat5.y, u_xlat28);
    u_xlat28 = u_xlat3.y + u_xlat4.y;
    u_xlat28 = u_xlat28 + _WoundOffsetHead0;
    u_xlat28 = max(u_xlat5.z, u_xlat28);
    u_xlat5.y = min(u_xlat5.w, u_xlat28);
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy);
    u_xlat16_6 = u_xlat10_5 * _MaskColor;
    u_xlat28 = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_2.x = u_xlat16_6.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat28 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat3.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat4.zw;
    u_xlat3.xy = vec2((-u_xlat3.z) + u_xlat3.x, (-u_xlat3.w) + u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat3.z;
    u_xlat4 = vec4(u_xlat3.z + float(-0.25), u_xlat3.z + float(0.25), u_xlat3.w + float(-0.25), u_xlat3.w + float(0.25));
    u_xlat28 = max(u_xlat28, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat28);
    u_xlat28 = u_xlat3.w + u_xlat3.y;
    u_xlat28 = u_xlat28 + _WoundOffsetHead1;
    u_xlat28 = max(u_xlat4.z, u_xlat28);
    u_xlat4.y = min(u_xlat4.w, u_xlat28);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor1;
    u_xlat28 = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat4.x = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_11 = u_xlat16_3.w * _WoundAlpha1;
    u_xlat16_11 = u_xlat28 * u_xlat16_11;
    u_xlat16_11 = u_xlat4.x * u_xlat16_11;
    u_xlati4.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati22.xy = ~u_xlati4.yx;
    u_xlati5.xz = ivec2(uvec2(u_xlati4.xy) & uvec2(u_xlati22.xy));
    u_xlat7 = (u_xlati5.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati22.y) & uint(u_xlati22.x));
    u_xlat7 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat7;
    u_xlat7 = (u_xlati5.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat7;
    u_xlati28 = int(uint(u_xlati4.x) & uint(u_xlati4.y));
    u_xlat4 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat7;
    u_xlat5.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat7.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat5.xz = u_xlat5.xz * vec2(0.5, 0.5) + u_xlat7.xy;
    u_xlat5.xz = vec2((-u_xlat4.y) + u_xlat5.x, (-u_xlat4.w) + u_xlat5.z);
    u_xlat5.xz = u_xlat5.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat5.x * _BaseWoundScale + u_xlat4.y;
    u_xlat7 = u_xlat4 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat7.x);
    u_xlat4.x = min(u_xlat7.y, u_xlat28);
    u_xlat28 = u_xlat4.w + u_xlat5.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat7.z, u_xlat28);
    u_xlat4.y = min(u_xlat7.w, u_xlat28);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_4 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat30 = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = ceil(u_xlat30);
    u_xlat16_20 = u_xlat16_4.w * _WoundAlpha2;
    u_xlat16_20 = u_xlat28 * u_xlat16_20;
    u_xlat16_20 = u_xlat30 * u_xlat16_20;
    u_xlat16_28 = u_xlat16_2.x * 1.10000002 + u_xlat10_5.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_11 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_30 = u_xlat16_30 + -1.0;
    u_xlat16_30 = u_xlat16_30 / u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_20 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_31 = u_xlat16_31 + -1.0;
    u_xlat16_31 = u_xlat16_31 / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_5 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_5);
    u_xlat16_14 = u_xlat16_30 * _ColorScale1;
    u_xlat16_5 = u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
#else
    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_5 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_14) + u_xlat16_7.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_5) + u_xlat0.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorScale2);
    u_xlat16_28 = (-u_xlat16_30) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump float u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec4 u_xlati5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
mediump float u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
ivec2 u_xlati22;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat30 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat28) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat28)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlati3 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati4 = ~u_xlati3.yxwz;
    u_xlati5 = ivec4(uvec4(u_xlati3) & uvec4(u_xlati4));
    u_xlat6.x = (u_xlati5.x != 0) ? float(0.25) : float(0.5);
    u_xlat6.y = (u_xlati5.x != 0) ? float(0.75) : float(0.5);
    u_xlat6.z = (u_xlati5.z != 0) ? float(0.25) : float(0.5);
    u_xlat6.w = (u_xlati5.z != 0) ? float(0.75) : float(0.5);
    u_xlati4 = ivec4(uvec4(uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.w) & uint(u_xlati4.z), uint(u_xlati4.w) & uint(u_xlati4.z)));
    u_xlat4.x = (u_xlati4.x != 0) ? float(0.25) : u_xlat6.x;
    u_xlat4.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat6.y;
    u_xlat4.z = (u_xlati4.z != 0) ? float(0.25) : u_xlat6.z;
    u_xlat4.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat6.w;
    u_xlat4.x = (u_xlati5.y != 0) ? float(0.75) : u_xlat4.x;
    u_xlat4.y = (u_xlati5.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat4.z = (u_xlati5.w != 0) ? float(0.75) : u_xlat4.z;
    u_xlat4.w = (u_xlati5.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.x) & uint(u_xlati3.y), uint(u_xlati3.x) & uint(u_xlati3.y), uint(u_xlati3.z) & uint(u_xlati3.w), uint(u_xlati3.z) & uint(u_xlati3.w)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.75) : u_xlat4.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.75) : u_xlat4.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.75) : u_xlat4.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.75) : u_xlat4.w;
    u_xlat4 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat4.xy;
    u_xlat4.xy = (-u_xlat3.xy) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat28 = u_xlat4.x * _BaseWoundScale + u_xlat3.x;
    u_xlat5 = u_xlat3.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat5.x);
    u_xlat5.x = min(u_xlat5.y, u_xlat28);
    u_xlat28 = u_xlat3.y + u_xlat4.y;
    u_xlat28 = u_xlat28 + _WoundOffsetHead0;
    u_xlat28 = max(u_xlat5.z, u_xlat28);
    u_xlat5.y = min(u_xlat5.w, u_xlat28);
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy);
    u_xlat16_6 = u_xlat10_5 * _MaskColor;
    u_xlat28 = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_2.x = u_xlat16_6.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat28 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat3.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat4.zw;
    u_xlat3.xy = vec2((-u_xlat3.z) + u_xlat3.x, (-u_xlat3.w) + u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat3.z;
    u_xlat4 = vec4(u_xlat3.z + float(-0.25), u_xlat3.z + float(0.25), u_xlat3.w + float(-0.25), u_xlat3.w + float(0.25));
    u_xlat28 = max(u_xlat28, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat28);
    u_xlat28 = u_xlat3.w + u_xlat3.y;
    u_xlat28 = u_xlat28 + _WoundOffsetHead1;
    u_xlat28 = max(u_xlat4.z, u_xlat28);
    u_xlat4.y = min(u_xlat4.w, u_xlat28);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor1;
    u_xlat28 = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat4.x = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_11 = u_xlat16_3.w * _WoundAlpha1;
    u_xlat16_11 = u_xlat28 * u_xlat16_11;
    u_xlat16_11 = u_xlat4.x * u_xlat16_11;
    u_xlati4.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati22.xy = ~u_xlati4.yx;
    u_xlati5.xz = ivec2(uvec2(u_xlati4.xy) & uvec2(u_xlati22.xy));
    u_xlat7 = (u_xlati5.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati22.y) & uint(u_xlati22.x));
    u_xlat7 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat7;
    u_xlat7 = (u_xlati5.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat7;
    u_xlati28 = int(uint(u_xlati4.x) & uint(u_xlati4.y));
    u_xlat4 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat7;
    u_xlat5.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat7.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat5.xz = u_xlat5.xz * vec2(0.5, 0.5) + u_xlat7.xy;
    u_xlat5.xz = vec2((-u_xlat4.y) + u_xlat5.x, (-u_xlat4.w) + u_xlat5.z);
    u_xlat5.xz = u_xlat5.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat5.x * _BaseWoundScale + u_xlat4.y;
    u_xlat7 = u_xlat4 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat7.x);
    u_xlat4.x = min(u_xlat7.y, u_xlat28);
    u_xlat28 = u_xlat4.w + u_xlat5.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat7.z, u_xlat28);
    u_xlat4.y = min(u_xlat7.w, u_xlat28);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_4 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat30 = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = ceil(u_xlat30);
    u_xlat16_20 = u_xlat16_4.w * _WoundAlpha2;
    u_xlat16_20 = u_xlat28 * u_xlat16_20;
    u_xlat16_20 = u_xlat30 * u_xlat16_20;
    u_xlat16_28 = u_xlat16_2.x * 1.10000002 + u_xlat10_5.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_11 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_30 = u_xlat16_30 + -1.0;
    u_xlat16_30 = u_xlat16_30 / u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_20 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_31 = u_xlat16_31 + -1.0;
    u_xlat16_31 = u_xlat16_31 / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_5 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_5);
    u_xlat16_14 = u_xlat16_30 * _ColorScale1;
    u_xlat16_5 = u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
#else
    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_5 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_14) + u_xlat16_7.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_5) + u_xlat0.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorScale2);
    u_xlat16_28 = (-u_xlat16_30) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat18 = float(gl_VertexID);
    u_xlat1.x = u_xlat18 * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat18 = trunc(u_xlat18);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat2.y = u_xlat18 / _VertexTex_TexelSize.w;
    u_xlat18 = fract(u_xlat7);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.x = u_xlat18 / _VertexTex_TexelSize.z;
    u_xlat1.xyz = textureLod(_VertexTex, u_xlat2.xy, 0.0).xyz;
    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat18 = dot(u_xlat1.yy, vec2(_MeshMaxLength));
    u_xlat18 = u_xlat18 + _BipScale.y;
    u_xlat7 = u_xlat18 * _ZPositionAdd.y;
    u_xlat1.x = dot(u_xlat1.xx, vec2(_MeshMaxLength));
    u_xlat13 = dot(u_xlat1.zz, vec2(_MeshMaxLength));
    u_xlat13 = u_xlat13 + (-_BipScale.z);
    u_xlat1.x = u_xlat1.x + _BipScale.x;
    u_xlat7 = u_xlat1.x * _ZPositionAdd.x + u_xlat7;
    u_xlat7 = u_xlat13 * _ZPositionAdd.z + u_xlat7;
    u_xlat2.x = (-u_xlat7);
    u_xlat7 = u_xlat18 * _XPositionAdd.y;
    u_xlat18 = u_xlat18 * _YPositionAdd.y;
    u_xlat18 = u_xlat1.x * _YPositionAdd.x + u_xlat18;
    u_xlat1.x = u_xlat1.x * _XPositionAdd.x + u_xlat7;
    u_xlat1.x = u_xlat13 * _XPositionAdd.z + u_xlat1.x;
    u_xlat2.z = u_xlat13 * _YPositionAdd.z + u_xlat18;
    u_xlat2.y = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat1.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat2.xyz + (-_WoundPos1.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat1.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat2.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat2.xyz);
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform 	mediump float _WoundClipMax;
uniform 	mediump float _WoundClipMin;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	mediump vec4 _MaskColor1;
uniform 	mediump vec4 _MaskColor2;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	int _offSetX1;
uniform 	int _offSetY1;
uniform 	int _offSetX2;
uniform 	int _offSetY2;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform 	mediump float _WoundAlpha0;
uniform 	mediump float _ColorScale0;
uniform 	mediump float _woundScaleX1;
uniform 	mediump float _woundScaleZ1;
uniform 	mediump float _WoundOffsetHead1;
uniform 	mediump float _WoundAlpha1;
uniform 	mediump float _ColorScale1;
uniform 	mediump float _woundScaleX2;
uniform 	mediump float _woundScaleZ2;
uniform 	mediump float _WoundOffsetHead2;
uniform 	mediump float _WoundAlpha2;
uniform 	mediump float _ColorScale2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
uniform lowp sampler2D _MaskTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
in highp vec3 vs_TEXCOORD9;
in highp vec3 vs_TEXCOORD10;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec4 u_xlati3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec4 u_xlati4;
vec4 u_xlat5;
mediump float u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec4 u_xlati5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
mediump float u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
ivec2 u_xlati22;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_28;
int u_xlati28;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat30 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat28) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat28)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlati3 = ivec4(uvec4(notEqual(ivec4(_offSetY, _offSetX, _offSetY1, _offSetX1), ivec4(0, 0, 0, 0))) * 0xFFFFFFFFu);
    u_xlati4 = ~u_xlati3.yxwz;
    u_xlati5 = ivec4(uvec4(u_xlati3) & uvec4(u_xlati4));
    u_xlat6.x = (u_xlati5.x != 0) ? float(0.25) : float(0.5);
    u_xlat6.y = (u_xlati5.x != 0) ? float(0.75) : float(0.5);
    u_xlat6.z = (u_xlati5.z != 0) ? float(0.25) : float(0.5);
    u_xlat6.w = (u_xlati5.z != 0) ? float(0.75) : float(0.5);
    u_xlati4 = ivec4(uvec4(uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.y) & uint(u_xlati4.x), uint(u_xlati4.w) & uint(u_xlati4.z), uint(u_xlati4.w) & uint(u_xlati4.z)));
    u_xlat4.x = (u_xlati4.x != 0) ? float(0.25) : u_xlat6.x;
    u_xlat4.y = (u_xlati4.y != 0) ? float(0.25) : u_xlat6.y;
    u_xlat4.z = (u_xlati4.z != 0) ? float(0.25) : u_xlat6.z;
    u_xlat4.w = (u_xlati4.w != 0) ? float(0.25) : u_xlat6.w;
    u_xlat4.x = (u_xlati5.y != 0) ? float(0.75) : u_xlat4.x;
    u_xlat4.y = (u_xlati5.y != 0) ? float(0.25) : u_xlat4.y;
    u_xlat4.z = (u_xlati5.w != 0) ? float(0.75) : u_xlat4.z;
    u_xlat4.w = (u_xlati5.w != 0) ? float(0.25) : u_xlat4.w;
    u_xlati3 = ivec4(uvec4(uint(u_xlati3.x) & uint(u_xlati3.y), uint(u_xlati3.x) & uint(u_xlati3.y), uint(u_xlati3.z) & uint(u_xlati3.w), uint(u_xlati3.z) & uint(u_xlati3.w)));
    u_xlat3.x = (u_xlati3.x != 0) ? float(0.75) : u_xlat4.x;
    u_xlat3.y = (u_xlati3.y != 0) ? float(0.75) : u_xlat4.y;
    u_xlat3.z = (u_xlati3.z != 0) ? float(0.75) : u_xlat4.z;
    u_xlat3.w = (u_xlati3.w != 0) ? float(0.75) : u_xlat4.w;
    u_xlat4 = vec4(ivec4(_offSetX, _offSetY, _offSetX1, _offSetY1));
    u_xlat4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5) + u_xlat4.xy;
    u_xlat4.xy = (-u_xlat3.xy) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat28 = u_xlat4.x * _BaseWoundScale + u_xlat3.x;
    u_xlat5 = u_xlat3.xxyy + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat5.x);
    u_xlat5.x = min(u_xlat5.y, u_xlat28);
    u_xlat28 = u_xlat3.y + u_xlat4.y;
    u_xlat28 = u_xlat28 + _WoundOffsetHead0;
    u_xlat28 = max(u_xlat5.z, u_xlat28);
    u_xlat5.y = min(u_xlat5.w, u_xlat28);
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy);
    u_xlat16_6 = u_xlat10_5 * _MaskColor;
    u_xlat28 = (-vs_TEXCOORD8.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat3.x = vs_TEXCOORD8.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.x = ceil(u_xlat3.x);
    u_xlat16_2.x = u_xlat16_6.w * _WoundAlpha0;
    u_xlat16_2.x = u_xlat28 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat3.xy = vs_TEXCOORD9.xy * vec2(0.5, 0.5) + u_xlat4.zw;
    u_xlat3.xy = vec2((-u_xlat3.z) + u_xlat3.x, (-u_xlat3.w) + u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy / vec2(_woundScaleX1, _woundScaleZ1);
    u_xlat28 = u_xlat3.x * _BaseWoundScale + u_xlat3.z;
    u_xlat4 = vec4(u_xlat3.z + float(-0.25), u_xlat3.z + float(0.25), u_xlat3.w + float(-0.25), u_xlat3.w + float(0.25));
    u_xlat28 = max(u_xlat28, u_xlat4.x);
    u_xlat4.x = min(u_xlat4.y, u_xlat28);
    u_xlat28 = u_xlat3.w + u_xlat3.y;
    u_xlat28 = u_xlat28 + _WoundOffsetHead1;
    u_xlat28 = max(u_xlat4.z, u_xlat28);
    u_xlat4.y = min(u_xlat4.w, u_xlat28);
    u_xlat10_3 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_3 = u_xlat10_3 * _MaskColor1;
    u_xlat28 = (-vs_TEXCOORD9.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat4.x = vs_TEXCOORD9.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = ceil(u_xlat4.x);
    u_xlat16_11 = u_xlat16_3.w * _WoundAlpha1;
    u_xlat16_11 = u_xlat28 * u_xlat16_11;
    u_xlat16_11 = u_xlat4.x * u_xlat16_11;
    u_xlati4.xy = ivec2(uvec2(notEqual(ivec4(_offSetY2, _offSetX2, _offSetY2, _offSetY2), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati22.xy = ~u_xlati4.yx;
    u_xlati5.xz = ivec2(uvec2(u_xlati4.xy) & uvec2(u_xlati22.xy));
    u_xlat7 = (u_xlati5.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlati28 = int(uint(u_xlati22.y) & uint(u_xlati22.x));
    u_xlat7 = (int(u_xlati28) != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat7;
    u_xlat7 = (u_xlati5.z != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat7;
    u_xlati28 = int(uint(u_xlati4.x) & uint(u_xlati4.y));
    u_xlat4 = (int(u_xlati28) != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat7;
    u_xlat5.xz = vec2(ivec2(_offSetX2, _offSetY2));
    u_xlat7.xy = vs_TEXCOORD10.xy * vec2(0.5, 0.5);
    u_xlat5.xz = u_xlat5.xz * vec2(0.5, 0.5) + u_xlat7.xy;
    u_xlat5.xz = vec2((-u_xlat4.y) + u_xlat5.x, (-u_xlat4.w) + u_xlat5.z);
    u_xlat5.xz = u_xlat5.xz / vec2(_woundScaleX2, _woundScaleZ2);
    u_xlat28 = u_xlat5.x * _BaseWoundScale + u_xlat4.y;
    u_xlat7 = u_xlat4 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat28 = max(u_xlat28, u_xlat7.x);
    u_xlat4.x = min(u_xlat7.y, u_xlat28);
    u_xlat28 = u_xlat4.w + u_xlat5.z;
    u_xlat28 = u_xlat28 + _WoundOffsetHead2;
    u_xlat28 = max(u_xlat7.z, u_xlat28);
    u_xlat4.y = min(u_xlat7.w, u_xlat28);
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy);
    u_xlat16_4 = u_xlat10_4 * _MaskColor2;
    u_xlat28 = (-vs_TEXCOORD10.z) + _WoundClipMax;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat28 = ceil(u_xlat28);
    u_xlat30 = vs_TEXCOORD10.z + (-_WoundClipMin);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = ceil(u_xlat30);
    u_xlat16_20 = u_xlat16_4.w * _WoundAlpha2;
    u_xlat16_20 = u_xlat28 * u_xlat16_20;
    u_xlat16_20 = u_xlat30 * u_xlat16_20;
    u_xlat16_28 = u_xlat16_2.x * 1.10000002 + u_xlat10_5.y;
    u_xlat16_28 = u_xlat16_28 + -1.0;
    u_xlat16_28 = u_xlat16_28 / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_11 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_30 = u_xlat16_30 + -1.0;
    u_xlat16_30 = u_xlat16_30 / u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_20 * 1.10000002 + u_xlat10_5.y;
    u_xlat16_31 = u_xlat16_31 + -1.0;
    u_xlat16_31 = u_xlat16_31 / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_5 = (-u_xlat16_28) * _ColorScale0 + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_5);
    u_xlat16_14 = u_xlat16_30 * _ColorScale1;
    u_xlat16_5 = u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
#else
    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_5 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_ColorScale0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_14) + u_xlat16_7.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorScale1);
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_5) + u_xlat0.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorScale2);
    u_xlat16_28 = (-u_xlat16_30) * _ColorScale1 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28) + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
vec2 u_xlat14;
float u_xlat18;
float u_xlat19;
int u_xlati19;
float u_xlat20;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat19) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati19 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
    u_xlat5.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat20 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat5.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _Shininess;
    u_xlat12 = exp2(u_xlat12);
    vs_TEXCOORD2.xy = (int(u_xlati19) != 0) ? vec2(u_xlat12) : vec2(0.0250000004, 0.0250000004);
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat12 = u_xlat2.w + u_xlat2.y;
    u_xlat19 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat19 * 0.25 + u_xlat12;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
vec2 u_xlat14;
float u_xlat18;
float u_xlat19;
int u_xlati19;
float u_xlat20;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat19) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati19 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
    u_xlat5.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat20 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat5.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _Shininess;
    u_xlat12 = exp2(u_xlat12);
    vs_TEXCOORD2.xy = (int(u_xlati19) != 0) ? vec2(u_xlat12) : vec2(0.0250000004, 0.0250000004);
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat12 = u_xlat2.w + u_xlat2.y;
    u_xlat19 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat19 * 0.25 + u_xlat12;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat12;
vec2 u_xlat14;
float u_xlat18;
float u_xlat19;
int u_xlati19;
float u_xlat20;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat6 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb6 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = (u_xlatb6) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat12 = float(1.0) / u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat12);
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat6 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat6 = u_xlat6 + _BipScale.y;
    u_xlat18 = u_xlat6 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat12 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat12 = u_xlat12 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat18 = u_xlat0.x * _XPositionAdd.x + u_xlat18;
    u_xlat0.w = u_xlat12 * _XPositionAdd.z + u_xlat18;
    u_xlat1.x = u_xlat6 * _YPositionAdd.y;
    u_xlat6 = u_xlat6 * _ZPositionAdd.y;
    u_xlat6 = u_xlat0.x * _ZPositionAdd.x + u_xlat6;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat12 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat12 * _ZPositionAdd.z + u_xlat6;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat19) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati19 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
    u_xlat5.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat20 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat5.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _Shininess;
    u_xlat12 = exp2(u_xlat12);
    vs_TEXCOORD2.xy = (int(u_xlati19) != 0) ? vec2(u_xlat12) : vec2(0.0250000004, 0.0250000004);
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat12 = u_xlat2.w + u_xlat2.y;
    u_xlat19 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat19 * 0.25 + u_xlat12;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
vec2 u_xlat19;
float u_xlat21;
float u_xlat22;
int u_xlati22;
float u_xlat24;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat22) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati22 = int(u_xlat16_4);
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat6.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat14) + u_xlat5.xyz;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat5.xyz = vec3(u_xlat14) * u_xlat6.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat14 = log2(u_xlat14);
    u_xlat14 = u_xlat14 * _Shininess;
    u_xlat14 = exp2(u_xlat14);
    vs_TEXCOORD2.xy = (int(u_xlati22) != 0) ? vec2(u_xlat14) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat4 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat4.w + u_xlat4.y;
    u_xlat22 = u_xlat4.x * in_POSITION0.x;
    u_xlat19.x = u_xlat4.z * u_xlat4.z + u_xlat4.x;
    u_xlat19.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat19.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat5.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat5.zz + u_xlat5.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat4 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat2 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
vec2 u_xlat19;
float u_xlat21;
float u_xlat22;
int u_xlati22;
float u_xlat24;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat22) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati22 = int(u_xlat16_4);
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat6.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat14) + u_xlat5.xyz;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat5.xyz = vec3(u_xlat14) * u_xlat6.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat14 = log2(u_xlat14);
    u_xlat14 = u_xlat14 * _Shininess;
    u_xlat14 = exp2(u_xlat14);
    vs_TEXCOORD2.xy = (int(u_xlati22) != 0) ? vec2(u_xlat14) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat4 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat4.w + u_xlat4.y;
    u_xlat22 = u_xlat4.x * in_POSITION0.x;
    u_xlat19.x = u_xlat4.z * u_xlat4.z + u_xlat4.x;
    u_xlat19.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat19.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat5.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat5.zz + u_xlat5.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat4 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat2 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _VertexTex_TexelSize;
uniform 	vec4 _BipScale;
uniform 	float _MeshMaxLength;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
uniform 	mediump vec4 _XPositionAdd;
uniform 	mediump vec4 _YPositionAdd;
uniform 	mediump vec4 _ZPositionAdd;
uniform 	mediump vec4 _WoundPos0;
uniform 	mediump vec4 _WoundX0;
uniform 	mediump vec4 _WoundY0;
uniform 	mediump vec4 _WoundZ0;
uniform 	mediump vec4 _WoundPos1;
uniform 	mediump vec4 _WoundX1;
uniform 	mediump vec4 _WoundY1;
uniform 	mediump vec4 _WoundZ1;
uniform 	mediump vec4 _WoundPos2;
uniform 	mediump vec4 _WoundX2;
uniform 	mediump vec4 _WoundY2;
uniform 	mediump vec4 _WoundZ2;
uniform lowp sampler2D _VertexTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec3 vs_TEXCOORD9;
out highp vec3 vs_TEXCOORD10;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat14;
vec2 u_xlat19;
float u_xlat21;
float u_xlat22;
int u_xlati22;
float u_xlat24;
void main()
{
    u_xlat0.x = float(gl_VertexID);
    u_xlat7 = u_xlat0.x * _VertexTex_TexelSize.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7>=(-u_xlat7));
#else
    u_xlatb7 = u_xlat7>=(-u_xlat7);
#endif
    u_xlat7 = (u_xlatb7) ? _VertexTex_TexelSize.z : (-_VertexTex_TexelSize.z);
    u_xlat14 = float(1.0) / u_xlat7;
    u_xlat14 = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.x = trunc(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat1.y = u_xlat0.x / _VertexTex_TexelSize.w;
    u_xlat0.x = fract(u_xlat14);
    u_xlat0.x = u_xlat0.x * u_xlat7;
    u_xlat1.x = u_xlat0.x / _VertexTex_TexelSize.z;
    u_xlat0.xyz = textureLod(_VertexTex, u_xlat1.xy, 0.0).xyz;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat7 = dot(u_xlat0.yy, vec2(_MeshMaxLength));
    u_xlat7 = u_xlat7 + _BipScale.y;
    u_xlat21 = u_xlat7 * _XPositionAdd.y;
    u_xlat0.x = dot(u_xlat0.xx, vec2(_MeshMaxLength));
    u_xlat14 = dot(u_xlat0.zz, vec2(_MeshMaxLength));
    u_xlat14 = u_xlat14 + (-_BipScale.z);
    u_xlat0.x = u_xlat0.x + _BipScale.x;
    u_xlat21 = u_xlat0.x * _XPositionAdd.x + u_xlat21;
    u_xlat0.w = u_xlat14 * _XPositionAdd.z + u_xlat21;
    u_xlat1.x = u_xlat7 * _YPositionAdd.y;
    u_xlat7 = u_xlat7 * _ZPositionAdd.y;
    u_xlat7 = u_xlat0.x * _ZPositionAdd.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _YPositionAdd.x + u_xlat1.x;
    u_xlat1.z = u_xlat14 * _YPositionAdd.z + u_xlat0.x;
    u_xlat0.x = u_xlat14 * _ZPositionAdd.z + u_xlat7;
    u_xlat2 = u_xlat1.zzzz * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.wwww + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat1.xy = (-u_xlat0.xw);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat14 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat22) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati22 = int(u_xlat16_4);
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat6.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat14) + u_xlat5.xyz;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat5.xyz = vec3(u_xlat14) * u_xlat6.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat14 = log2(u_xlat14);
    u_xlat14 = u_xlat14 * _Shininess;
    u_xlat14 = exp2(u_xlat14);
    vs_TEXCOORD2.xy = (int(u_xlati22) != 0) ? vec2(u_xlat14) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat4 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat14 = u_xlat4.w + u_xlat4.y;
    u_xlat22 = u_xlat4.x * in_POSITION0.x;
    u_xlat19.x = u_xlat4.z * u_xlat4.z + u_xlat4.x;
    u_xlat19.y = u_xlat22 * 0.25 + u_xlat14;
    vs_TEXCOORD3.zw = u_xlat19.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat5.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat0.w;
    vs_TEXCOORD7.xy = u_xlat5.zz + u_xlat5.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos0.xyz);
    vs_TEXCOORD8.x = dot(_WoundX0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.z = dot(_WoundY0.xyz, u_xlat0.xyz);
    vs_TEXCOORD8.y = dot(_WoundZ0.xyz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat1.xyz + (-_WoundPos1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-_WoundPos2.xyz);
    vs_TEXCOORD9.x = dot(_WoundX1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.z = dot(_WoundY1.xyz, u_xlat0.xyz);
    vs_TEXCOORD9.y = dot(_WoundZ1.xyz, u_xlat0.xyz);
    vs_TEXCOORD10.x = dot(_WoundX2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.z = dot(_WoundY2.xyz, u_xlat1.xyz);
    vs_TEXCOORD10.y = dot(_WoundZ2.xyz, u_xlat1.xyz);
    u_xlat0 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat1 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat1 = u_xlat4 * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = u_xlat2 * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat2 * u_xlat2 + u_xlat0;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BaseWoundScale;
uniform 	mediump vec4 _MaskColor;
uniform 	int _offSetX;
uniform 	int _offSetY;
uniform 	mediump float _woundScaleX0;
uniform 	mediump float _woundScaleZ0;
uniform 	mediump float _WoundOffsetHead0;
uniform lowp sampler2D _MaskTex;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
ivec2 u_xlati1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
ivec2 u_xlati6;
ivec2 u_xlati7;
void main()
{
    u_xlat0.xy = vec2(ivec2(_offSetX, _offSetY));
    u_xlat6.xy = vs_TEXCOORD8.xy * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + u_xlat6.xy;
    u_xlati6.xy = ivec2(uvec2(notEqual(ivec4(_offSetY, _offSetX, _offSetY, _offSetX), ivec4(0, 0, 0, 0)).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ~u_xlati6.yx;
    u_xlati7.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(u_xlati1.xy));
    u_xlati1.x = int(uint(u_xlati1.y) & uint(u_xlati1.x));
    u_xlati6.x = int(uint(u_xlati6.x) & uint(u_xlati6.y));
    u_xlat2 = (u_xlati7.x != 0) ? vec4(0.25, 0.25, 0.75, 0.75) : vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2 = (u_xlati1.x != 0) ? vec4(0.25, 0.25, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati7.y != 0) ? vec4(0.75, 0.75, 0.25, 0.25) : u_xlat2;
    u_xlat1 = (u_xlati6.x != 0) ? vec4(0.75, 0.75, 0.75, 0.75) : u_xlat1;
    u_xlat0.xy = vec2(u_xlat0.x + (-u_xlat1.y), u_xlat0.y + (-u_xlat1.w));
    u_xlat0.xy = u_xlat0.xy / vec2(_woundScaleX0, _woundScaleZ0);
    u_xlat3 = u_xlat1.w + u_xlat0.y;
    u_xlat0.x = u_xlat0.x * _BaseWoundScale + u_xlat1.y;
    u_xlat1 = u_xlat1 + vec4(-0.25, 0.25, -0.25, 0.25);
    u_xlat0.x = max(u_xlat0.x, u_xlat1.x);
    u_xlat1.x = min(u_xlat1.y, u_xlat0.x);
    u_xlat0.x = u_xlat3 + _WoundOffsetHead0;
    u_xlat0.x = max(u_xlat1.z, u_xlat0.x);
    u_xlat1.y = min(u_xlat1.w, u_xlat0.x);
    u_xlat10_0.xyz = texture(_MaskTex, u_xlat1.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz * _MaskColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
}
}
 Pass {
  Name "OUTLINE"
  LOD 600
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "OutlineType" = "Simple" "QUEUE" = "Geometry+10" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 123442
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _OutlineColor;
uniform 	float _Outline;
uniform 	mediump float _OutlineUseTangent;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat3;
float u_xlat6;
bool u_xlatb9;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent);
#endif
    u_xlat1.xyz = (bool(u_xlatb9)) ? in_TANGENT0.xyz : in_NORMAL0.xyz;
    u_xlat0.z = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat0.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
    u_xlat3.xy = u_xlat0.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * u_xlat0.xx + u_xlat3.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xy * vec2(_Outline) + u_xlat1.xy;
    gl_Position = u_xlat1;
    vs_COLOR0 = _OutlineColor;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat3.x * 0.5;
    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD0.w = u_xlat1.w;
    vs_TEXCOORD0.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _UsingClipAlpha;
uniform 	float _ClipAlpha;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD0.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD0.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD0.yx / vs_TEXCOORD0.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD0.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2 = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2 = floor(u_xlat16_2);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vs_COLOR0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _OutlineColor;
uniform 	float _Outline;
uniform 	mediump float _OutlineUseTangent;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat3;
float u_xlat6;
bool u_xlatb9;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent);
#endif
    u_xlat1.xyz = (bool(u_xlatb9)) ? in_TANGENT0.xyz : in_NORMAL0.xyz;
    u_xlat0.z = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat0.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
    u_xlat3.xy = u_xlat0.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * u_xlat0.xx + u_xlat3.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xy * vec2(_Outline) + u_xlat1.xy;
    gl_Position = u_xlat1;
    vs_COLOR0 = _OutlineColor;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat3.x * 0.5;
    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD0.w = u_xlat1.w;
    vs_TEXCOORD0.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _UsingClipAlpha;
uniform 	float _ClipAlpha;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD0.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD0.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD0.yx / vs_TEXCOORD0.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD0.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2 = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2 = floor(u_xlat16_2);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vs_COLOR0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _OutlineColor;
uniform 	float _Outline;
uniform 	mediump float _OutlineUseTangent;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat3;
float u_xlat6;
bool u_xlatb9;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent);
#endif
    u_xlat1.xyz = (bool(u_xlatb9)) ? in_TANGENT0.xyz : in_NORMAL0.xyz;
    u_xlat0.z = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat0.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
    u_xlat3.xy = u_xlat0.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * u_xlat0.xx + u_xlat3.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xy * vec2(_Outline) + u_xlat1.xy;
    gl_Position = u_xlat1;
    vs_COLOR0 = _OutlineColor;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat3.x * 0.5;
    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD0.w = u_xlat1.w;
    vs_TEXCOORD0.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _UsingClipAlpha;
uniform 	float _ClipAlpha;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD0.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD0.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD0.yx / vs_TEXCOORD0.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD0.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2 = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2 = floor(u_xlat16_2);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vs_COLOR0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _OutlineColor;
uniform 	float _Outline;
uniform 	mediump float _OutlineUseTangent;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat3;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent);
#endif
    u_xlat1.xyz = (bool(u_xlatb9)) ? in_TANGENT0.xyz : in_NORMAL0.xyz;
    u_xlat0.z = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat0.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
    u_xlat3.xy = u_xlat0.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * u_xlat0.xx + u_xlat3.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xy * vec2(_Outline) + u_xlat1.xy;
    gl_Position = u_xlat1;
    vs_COLOR0 = _OutlineColor;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat3.x * 0.5;
    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD0.w = u_xlat1.w;
    vs_TEXCOORD0.z = _DitherAlpha;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3.x = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat1.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat1.y = u_xlat9 * 0.25 + u_xlat3.x;
    vs_TEXCOORD1.xy = u_xlat1.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	float _UsingClipAlpha;
uniform 	float _ClipAlpha;
uniform lowp sampler2D _SPNoiseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD0.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD0.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD0.yx / vs_TEXCOORD0.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD0.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2 = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2 = floor(u_xlat16_2);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat3.x = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat3.x * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _OutlineColor;
uniform 	float _Outline;
uniform 	mediump float _OutlineUseTangent;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat3;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent);
#endif
    u_xlat1.xyz = (bool(u_xlatb9)) ? in_TANGENT0.xyz : in_NORMAL0.xyz;
    u_xlat0.z = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat0.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
    u_xlat3.xy = u_xlat0.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * u_xlat0.xx + u_xlat3.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xy * vec2(_Outline) + u_xlat1.xy;
    gl_Position = u_xlat1;
    vs_COLOR0 = _OutlineColor;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat3.x * 0.5;
    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD0.w = u_xlat1.w;
    vs_TEXCOORD0.z = _DitherAlpha;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3.x = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat1.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat1.y = u_xlat9 * 0.25 + u_xlat3.x;
    vs_TEXCOORD1.xy = u_xlat1.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	float _UsingClipAlpha;
uniform 	float _ClipAlpha;
uniform lowp sampler2D _SPNoiseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD0.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD0.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD0.yx / vs_TEXCOORD0.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD0.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2 = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2 = floor(u_xlat16_2);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat3.x = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat3.x * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _OutlineColor;
uniform 	float _Outline;
uniform 	mediump float _OutlineUseTangent;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat3;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_OutlineUseTangent);
#endif
    u_xlat1.xyz = (bool(u_xlatb9)) ? in_TANGENT0.xyz : in_NORMAL0.xyz;
    u_xlat0.z = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat0.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
    u_xlat3.xy = u_xlat0.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * u_xlat0.xx + u_xlat3.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xy * vec2(_Outline) + u_xlat1.xy;
    gl_Position = u_xlat1;
    vs_COLOR0 = _OutlineColor;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat3.x * 0.5;
    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD0.w = u_xlat1.w;
    vs_TEXCOORD0.z = _DitherAlpha;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3.x = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat1.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat1.y = u_xlat9 * 0.25 + u_xlat3.x;
    vs_TEXCOORD1.xy = u_xlat1.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	float _UsingClipAlpha;
uniform 	float _ClipAlpha;
uniform lowp sampler2D _SPNoiseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD0.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD0.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD0.yx / vs_TEXCOORD0.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD0.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2 = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2 = floor(u_xlat16_2);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat3.x = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat3.x * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "OutlineType" = "Simple" "QUEUE" = "Geometry+10" "RenderType" = "Opaque" }
 Pass {
  Name "BASE"
  LOD 200
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Simple" "QUEUE" = "Geometry+10" "RenderType" = "Opaque" }
  GpuProgramID 171756
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec2 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13) + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat13;
float u_xlat18;
int u_xlati18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat18) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati18 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat13) + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati18) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
int u_xlati3;
bool u_xlatb3;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb3 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat3.xyxx, (-u_xlat3.xyxx)).xy;
    u_xlat3.xy = fract(abs(u_xlat3.xy));
    u_xlat3.x = (u_xlatb1.x) ? u_xlat3.x : (-u_xlat3.x);
    u_xlat3.y = (u_xlatb1.y) ? u_xlat3.y : (-u_xlat3.y);
    u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
    u_xlat3.xy = ceil(u_xlat3.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat3.x = (-u_xlat3.x) * u_xlat3.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat3.x + 0.99000001;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlati3==0);
#else
    u_xlatb3 = u_xlati3==0;
#endif
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat6 = u_xlat0.w + u_xlat0.y;
    u_xlat18 = u_xlat0.x * in_POSITION0.x;
    u_xlat14.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat14.y = u_xlat18 * 0.25 + u_xlat6;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
bvec2 u_xlatb18;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat3.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_29 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_29 = (u_xlati4.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    SV_Target0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat11;
int u_xlati11;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat11) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati11 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat17 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat17);
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati11) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb20;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb10 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10.xy = u_xlat10.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat10.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat10.xyxx, (-u_xlat10.xyxx)).xy;
    u_xlat10.xy = fract(abs(u_xlat10.xy));
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat10.y = (u_xlatb1.y) ? u_xlat10.y : (-u_xlat10.y);
    u_xlat10.xy = u_xlat10.xy * vec2(4.0, 4.0);
    u_xlat10.xy = ceil(u_xlat10.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat10.x = (-u_xlat10.x) * u_xlat10.y + u_xlat16_2.x;
    u_xlat10.x = u_xlat10.x + 0.99000001;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10 = int(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlatb0 = u_xlatb10 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_32 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_32 = u_xlat10_0.w * u_xlat16_32 + _BloomFactor;
    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
    u_xlat30 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD5.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat30 = (-u_xlat30) + 1.00100005;
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGShininess;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * _RGScale + _RGBias;
    u_xlat16_3 = vec4(u_xlat30) * _RGColor;
    u_xlat4 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat4.xxx;
    u_xlat6.xyz = u_xlat16_3.xyz * u_xlat4.yyy;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.zzz;
    u_xlat7.xyz = u_xlat16_3.xyz * u_xlat4.www;
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(_RGMaskB) + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat4.xyz;
    u_xlat16_8 = u_xlat4.y + u_xlat4.x;
    u_xlat16_8 = u_xlat4.z + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16_18.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat16_9 = (-u_xlat16_32) + _RGBloomFactor;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(u_xlat16_8);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_18.xyz;
    u_xlat16_4.w = u_xlat16_8 * u_xlat16_9 + u_xlat16_32;
    u_xlat4 = (-vec4(u_xlat30)) * _RGColor + u_xlat16_4;
    u_xlat3 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat4 + u_xlat16_3;
    u_xlat16_8 = u_xlat30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat30 = u_xlat16_8 * _RGRatio;
    u_xlat1.xyz = (-u_xlat1.xyz);
    u_xlat1.w = (-u_xlat16_32);
    u_xlat1 = u_xlat1 + u_xlat3;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat30 * u_xlat1.w + u_xlat16_32;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
float u_xlat13;
int u_xlati13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat4.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat4.xy;
    u_xlat16_5 = u_xlat4.y + 0.5;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati13 = int(u_xlat16_5);
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat20) + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _Shininess;
    u_xlat2.x = exp2(u_xlat2.x);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? u_xlat2.xx : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8 = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8 * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
ivec2 u_xlati3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
int u_xlati7;
bool u_xlatb7;
bvec2 u_xlatb14;
float u_xlat17;
float u_xlat22;
mediump float u_xlat16_23;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb7 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat7.xy = u_xlat7.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat7.xyxx, (-u_xlat7.xyxx)).xy;
    u_xlat7.xy = fract(abs(u_xlat7.xy));
    u_xlat7.x = (u_xlatb1.x) ? u_xlat7.x : (-u_xlat7.x);
    u_xlat7.y = (u_xlatb1.y) ? u_xlat7.y : (-u_xlat7.y);
    u_xlat7.xy = u_xlat7.xy * vec2(4.0, 4.0);
    u_xlat7.xy = ceil(u_xlat7.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat7.x = (-u_xlat7.x) * u_xlat7.y + u_xlat16_2.x;
    u_xlat7.x = u_xlat7.x + 0.99000001;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7 = int(u_xlat7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlati7==0);
#else
    u_xlatb7 = u_xlati7==0;
#endif
    u_xlatb0 = u_xlatb7 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat24 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat22) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + u_xlat3.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat22 = _SPNoiseScaler * _SPTransition;
    u_xlat3.xy = vec2(u_xlat22) * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
    u_xlat22 = u_xlat22 * 1.70000005 + (-u_xlat24);
    u_xlat22 = u_xlat22 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat4.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat17 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat22 = u_xlat22 * u_xlat17 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati3.y != 0) ? u_xlat1.xyz : u_xlat4.xyz;
    u_xlat16_23 = (u_xlati3.y != 0) ? _BloomFactor : u_xlat22;
    u_xlat22 = (u_xlati3.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati3.x != 0) ? u_xlat16_2.xyz : u_xlat1.xyz;
    u_xlat16_23 = (u_xlati3.x != 0) ? u_xlat16_23 : _BloomFactor;
    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    SV_Target0.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_23) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_23;
    SV_Target0.w = u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat13;
int u_xlati13;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat18 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = vec2(u_xlat13) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati13 = int(u_xlat16_4);
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _Shininess;
    u_xlat18 = exp2(u_xlat18);
    vs_TEXCOORD2.xy = (int(u_xlati13) != 0) ? vec2(u_xlat18) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + _BloomFactor;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
int u_xlati17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat11 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * _WorldSpaceLightPos0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat3.xy = vec2(u_xlat17) * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat3.xy;
    u_xlat16_4 = u_xlat3.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati17 = int(u_xlat16_4);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Shininess;
    u_xlat0.x = exp2(u_xlat0.x);
    vs_TEXCOORD2.xy = (int(u_xlati17) != 0) ? u_xlat0.xx : vec2(0.0250000004, 0.0250000004);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat12.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat12.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD3.zw = u_xlat12.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
ivec2 u_xlati5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec2 u_xlat9;
int u_xlati9;
bool u_xlatb9;
mediump float u_xlat16_11;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
float u_xlat27;
float u_xlat28;
mediump float u_xlat16_29;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb9 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat9.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat9.xy = u_xlat9.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat9.xy = u_xlat9.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat9.xyxx, (-u_xlat9.xyxx)).xy;
    u_xlat9.xy = fract(abs(u_xlat9.xy));
    u_xlat9.x = (u_xlatb1.x) ? u_xlat9.x : (-u_xlat9.x);
    u_xlat9.y = (u_xlatb1.y) ? u_xlat9.y : (-u_xlat9.y);
    u_xlat9.xy = u_xlat9.xy * vec2(4.0, 4.0);
    u_xlat9.xy = ceil(u_xlat9.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat9.x = (-u_xlat9.x) * u_xlat9.y + u_xlat16_2.x;
    u_xlat9.x = u_xlat9.x + 0.99000001;
    u_xlat9.x = floor(u_xlat9.x);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlati9 = int(u_xlat9.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlati9==0);
#else
    u_xlatb9 = u_xlati9==0;
#endif
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat28 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat10_5.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_29 = u_xlat10_6.x * 1.99000001;
    u_xlat30 = u_xlat16_29 * _SPNoiseScaler + -1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + (-_WorldSpaceCameraPos.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat28) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + _SPCubeMapOffset.xyz;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat28)) + u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_SPCubeMap, u_xlat4.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPCubeMapColor.xyz;
    u_xlat4.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat4.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat4.xyz + u_xlat16_7.xyz;
    u_xlat28 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat28) * vec2(1.70000005, 1.5) + (-vec2(u_xlat30));
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat28 = u_xlat28 * 1.70000005 + (-u_xlat30);
    u_xlat28 = u_xlat28 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat4.xyz);
    u_xlat30 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz + u_xlat4.xyz;
    u_xlat28 = u_xlat28 * u_xlat30 + _BloomFactor;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat4.xyz : u_xlat6.xyz;
    u_xlat16_29 = (u_xlati5.y != 0) ? _BloomFactor : u_xlat28;
    u_xlat28 = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat4.xyz;
    u_xlat16_29 = (u_xlati5.x != 0) ? u_xlat16_29 : _BloomFactor;
    u_xlat0.xyz = (-u_xlat16_2.xyz) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_2.x = (-u_xlat16_29) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_29;
    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD5.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.00100005;
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGShininess;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat27) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat6.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat6.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_11 = u_xlat3.y + u_xlat3.x;
    u_xlat16_11 = u_xlat3.z + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_11 * u_xlat16_20 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat27)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_11 = u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat16_11 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat27 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	float _Opaqueness;
uniform 	mediump vec4 _MainTex_ST;
uniform 	float _Shininess;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_COLOR0;
in mediump vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD11;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD12;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_COLOR0.xyz = vec3(0.0, 0.0, 0.0);
    vs_COLOR0.w = _Opaqueness;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat13 = dot(_WorldSpaceLightPos0, _WorldSpaceLightPos0);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.xy = u_xlat2.xx * vec2(0.497500002, 0.497500002) + vec2(0.5, 0.5);
    vs_TEXCOORD1.xy = u_xlat2.xy;
    u_xlat16_4 = u_xlat2.y + 0.5;
    u_xlat16_4 = floor(u_xlat16_4);
    u_xlat16_4 = max(u_xlat16_4, 0.0);
    u_xlati2 = int(u_xlat16_4);
    u_xlat8.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat21);
    u_xlat5.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat13) + u_xlat8.xyz;
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat13 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat8.xyz = vec3(u_xlat13) * u_xlat5.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat13 = log2(u_xlat13);
    u_xlat13 = u_xlat13 * _Shininess;
    u_xlat13 = exp2(u_xlat13);
    vs_TEXCOORD2.xy = (int(u_xlati2) != 0) ? vec2(u_xlat13) : vec2(0.0250000004, 0.0250000004);
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat2 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat13 = u_xlat2.w + u_xlat2.y;
    u_xlat8.x = u_xlat2.x * in_POSITION0.x;
    u_xlat14.x = u_xlat2.z * u_xlat2.z + u_xlat2.x;
    u_xlat14.y = u_xlat8.x * 0.25 + u_xlat13;
    vs_TEXCOORD3.zw = u_xlat14.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD11.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.w = u_xlat1.w;
    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.z = _DitherAlpha;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD12.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	float _SPTransitionBloomFactor;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	float _RGBloomFactor;
uniform 	float _RGMaskR;
uniform 	float _RGMaskG;
uniform 	float _RGMaskB;
uniform 	float _RGMaskA;
uniform 	float _RGMaskIntensity;
uniform 	vec4 _Color;
uniform 	vec4 _EnvColor;
uniform 	mediump float _BloomFactor;
uniform 	mediump vec3 _LightColor0;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _ClipAlpha;
uniform 	float _UsingClipAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Ramp;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD11;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD12;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
ivec2 u_xlati4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
float u_xlat27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD7.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD7.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD7.yx / vs_TEXCOORD7.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
        u_xlatu0.xy = uvec2(u_xlat0.xy);
        u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
        u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
        u_xlat0.x = vs_TEXCOORD7.z * 17.0 + (-u_xlat0.x);
        u_xlat0.x = u_xlat0.x + 0.99000001;
        u_xlat0.x = floor(u_xlat0.x);
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlati0 = int(u_xlat0.x);
        if((u_xlati0)==0){discard;}
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingClipAlpha);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_ClipAlpha<0.99000001);
#else
    u_xlatb8 = _ClipAlpha<0.99000001;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.xy = u_xlat8.xy * _ScreenParams.xy;
    u_xlat16_2.x = _ClipAlpha * 17.0;
    u_xlat8.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlatb1.xy = greaterThanEqual(u_xlat8.xyxx, (-u_xlat8.xyxx)).xy;
    u_xlat8.xy = fract(abs(u_xlat8.xy));
    u_xlat8.x = (u_xlatb1.x) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat8.y = (u_xlatb1.y) ? u_xlat8.y : (-u_xlat8.y);
    u_xlat8.xy = u_xlat8.xy * vec2(4.0, 4.0);
    u_xlat8.xy = ceil(u_xlat8.xy);
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat8.x = (-u_xlat8.x) * u_xlat8.y + u_xlat16_2.x;
    u_xlat8.x = u_xlat8.x + 0.99000001;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8 = int(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlati8==0);
#else
    u_xlatb8 = u_xlati8==0;
#endif
    u_xlatb0 = u_xlatb8 && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xyz = texture(_Ramp, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat10_1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
    u_xlat0.xyz = _Color.xyz * _EnvColor.xyz;
    u_xlat1.xyz = vec3(vec3(_Emission, _Emission, _Emission)) * _EmissionColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat10_0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD12.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD11.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat10_4.xyz = texture(_SPTex, vs_TEXCOORD3.xy).xyz;
    u_xlat10_5.xyz = texture(_SPNoiseTex, vs_TEXCOORD3.zw).xyz;
    u_xlat16_2.x = u_xlat10_5.x * 1.99000001;
    u_xlat27 = u_xlat16_2.x * _SPNoiseScaler + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + _SPCubeMapOffset.xyz;
    u_xlat25 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat3.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_SPCubeMap, u_xlat3.xyz).xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _SPCubeMapColor.xyz;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_2.xyz);
    u_xlat3.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat3.xyz + u_xlat16_2.xyz;
    u_xlat25 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat25) * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat25 = u_xlat25 * 1.70000005 + (-u_xlat27);
    u_xlat25 = u_xlat25 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat5.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat3.xyz);
    u_xlat27 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat25 = u_xlat25 * u_xlat27 + _BloomFactor;
    u_xlat16_2.xyz = (u_xlati4.y != 0) ? u_xlat3.xyz : u_xlat5.xyz;
    u_xlat16_26 = (u_xlati4.y != 0) ? _BloomFactor : u_xlat25;
    u_xlat25 = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_2.xyz = (u_xlati4.x != 0) ? u_xlat16_2.xyz : u_xlat3.xyz;
    u_xlat16_26 = (u_xlati4.x != 0) ? u_xlat16_26 : _BloomFactor;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_2.x = (-u_xlat16_26) + _EmissionBloomFactor;
    u_xlat16_2.x = u_xlat10_0.w * u_xlat16_2.x + u_xlat16_26;
    u_xlat24 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD5.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat24 = (-u_xlat24) + 1.00100005;
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGShininess;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * _RGScale + _RGBias;
    u_xlat16_1 = vec4(u_xlat24) * _RGColor;
    u_xlat3 = (-vs_TEXCOORD6) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat3.xxx;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat3.yyy;
    u_xlat3.xyz = u_xlat16_1.xyz * u_xlat3.zzz;
    u_xlat7.xyz = u_xlat16_1.xyz * u_xlat3.www;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_RGMaskG, _RGMaskG, _RGMaskG));
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_RGMaskR, _RGMaskR, _RGMaskR)) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_RGMaskB) + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(vec3(_RGMaskA, _RGMaskA, _RGMaskA)) + u_xlat3.xyz;
    u_xlat16_10 = u_xlat3.y + u_xlat3.x;
    u_xlat16_10 = u_xlat3.z + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat16_18 = (-u_xlat16_2.x) + _RGBloomFactor;
    u_xlat16_3.xyz = vec3(u_xlat16_10) * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_3.w = u_xlat16_10 * u_xlat16_18 + u_xlat16_2.x;
    u_xlat3 = (-vec4(u_xlat24)) * _RGColor + u_xlat16_3;
    u_xlat1 = vec4(vec4(_RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity, _RGMaskIntensity)) * u_xlat3 + u_xlat16_1;
    u_xlat16_10 = u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat16_10 * _RGRatio;
    u_xlat3.xyz = (-u_xlat0.xyz);
    u_xlat3.w = (-u_xlat16_2.x);
    u_xlat1 = u_xlat1 + u_xlat3;
    SV_Target0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat24 * u_xlat1.w + u_xlat16_2.x;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
}
}
}
CustomEditor "MoleMole.CharacterShaderEditorBase"
}