//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Scenes/Scenes_DLC/LightMapUnity_Matcap_Emission" {
Properties {
[MHYHeaderBox(OPTIONS)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Toggle(_ALPHATEST_ON)] _EnableAlphaCutoff ("Enable Alpha Cutoff", Float) = 0
[MHYKeywordFilter(_ALPHATEST_ON On)] _AlphaCutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
[MHYHeaderBox(MAPS)] [MHYSingleLineTextureNoScaleOffset(_Color)] _MainTex ("Albedo", 2D) = "white" { }
_Color ("Color", Color) = (1,1,1,1)
[MHYTextureScaleOffset] _MainMaps_ST ("Main Maps ST", Vector) = (1,1,0,0)
[MHYSingleLineTextureNoScaleOffset] _PropertyLightmapTex ("LightMap", 2D) = "gray" { }
[MHYTextureScaleOffset] _PropertyLightmapTexTS ("PropertyLightmapTexTS", Vector) = (0,0,0,0)
_ShadowColor ("Shadow Color", Color) = (0.5,0.5,0.5,1)
_ShadowIntegration ("Shadow Integration", Range(0, 1)) = 0.2
[MHYHeaderBox(LIGHTING)] _BloomIntensity ("Bloom Intensity", Range(0, 50)) = 1
_LightMapIntensity ("Light Map Intensity", Range(0, 5)) = 1.5
_FogTune ("Fog Tune", Range(0, 1)) = 1
_LightingColor ("Lighting Color", Color) = (0.2,0.2,0.2,1)
[MHYHeaderBox(MATCAP)] [Toggle(MATCAP_ON)] _EnableMatcap ("Enable Matcap", Float) = 0
_MatcapMaskMap ("MatcapMask Map", 2D) = "white" { }
[Toggle(BUMPMAP_ON)] _EnableBumpMap ("Enable Bump Map", Float) = 0
_BumpMap ("Normal Map", 2D) = "bump" { }
_MatCap ("MatCap (RGB)", 2D) = "white" { }
_MetalRef ("MetalRef", Range(0, 1)) = 0
_EmissionMask ("Emission Mask", 2D) = "black" { }
[Enum(R,0,G,1,B,2)] _UseChannel ("Use Channel", Float) = 1
[Enum(UV1st,0,UV2nd,1)] _UseSet ("UV Set", Float) = 1
_Emission ("Emission Color", Color) = (0,0,0,0.5)
_EmissionGIIntensity ("Emission GI Intensity", Range(0, 10)) = 2
[MHYHeaderBox(MATCAP SPECULAR)] [Toggle(SPECULAR_ON)] _EnableMatcapSpecular ("Enable Matcap Specular", Float) = 0
_SpecularMap ("Specular MatCap", 2D) = "black" { }
_SpecularIntensity ("Specular Intensity", Range(0, 1)) = 0
_LightmapThreshold ("Lightmap Threshold", Range(0, 1)) = 0.5
_IntensityInLightmap ("Intensity In Lightmap", Range(0, 1)) = 0.1
[MHYHeaderBox(LIGHTMAP)] [Toggle(LIGHTMAPCOLOR_ON)] _EnableLightmapColor ("Enable LightmapColor Change", Float) = 0
_LightmapColorScale ("LightmapColorScale", Range(0, 4)) = 1.85
_LightmapColorIns ("LightmapColorIns", Range(0, 2)) = 0.9
_LightmapColorChange ("LightmapColorChange (RGB)", 2D) = "white" { }
_LightmapColorLerp ("LightmapColorLerp", Range(0, 1)) = 1
_LightmapDarkArea ("LightmapDarkArea", Range(0, 0.5)) = 0
_LightmapDarkPromotion ("LightmapDarkPromotion", Range(0, 1)) = 0
[MHYHeaderBox(ADDLIGHT)] _AdditiveLightPower ("Additive Light Power", Range(0.1, 5)) = 1
_AdditiveLightIntensity ("Additive Light Intensity", Range(0, 1)) = 1
_Transparent ("_Trans", Range(0, 1)) = 1
}
SubShader {
 Tags { "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARDONLY"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 26664
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_19;
  highp vec2 tmpvar_20;
  tmpvar_20 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_EmissionMask, tmpvar_20).xyz;
  emissionTex_3 = tmpvar_21;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_22;
    tmpvar_22 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_22;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_23);
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_4;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_4;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_19;
  highp vec2 tmpvar_20;
  tmpvar_20 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_EmissionMask, tmpvar_20).xyz;
  emissionTex_3 = tmpvar_21;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_22;
    tmpvar_22 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_22;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_23);
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_4;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_4;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_19;
  highp vec2 tmpvar_20;
  tmpvar_20 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_EmissionMask, tmpvar_20).xyz;
  emissionTex_3 = tmpvar_21;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_22;
    tmpvar_22 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_22;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_23);
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_4;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_4;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 - (2.0 * (
    dot (worldNorm_7, tmpvar_24)
   * worldNorm_7)));
  R_6 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_28.x;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatCap, tmpvar_27);
  mc_5 = (mc_5 * (tmpvar_29.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 - (2.0 * (
    dot (worldNorm_7, tmpvar_24)
   * worldNorm_7)));
  R_6 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_28.x;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatCap, tmpvar_27);
  mc_5 = (mc_5 * (tmpvar_29.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 - (2.0 * (
    dot (worldNorm_7, tmpvar_24)
   * worldNorm_7)));
  R_6 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_28.x;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatCap, tmpvar_27);
  mc_5 = (mc_5 * (tmpvar_29.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_30 * worldNorm_9);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_9, tmpvar_31)
   * worldNorm_9)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_35.x;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_34);
  mc_6 = (mc_6 * (tmpvar_36.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_37;
  highp vec2 P_38;
  P_38 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_37 = texture2D (_SpecularMap, P_38);
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_37 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((float(
    (tmpvar_40 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_41);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_10;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_10;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_30 * worldNorm_9);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_9, tmpvar_31)
   * worldNorm_9)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_35.x;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_34);
  mc_6 = (mc_6 * (tmpvar_36.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_37;
  highp vec2 P_38;
  P_38 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_37 = texture2D (_SpecularMap, P_38);
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_37 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((float(
    (tmpvar_40 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_41);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_10;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_10;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_30 * worldNorm_9);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_9, tmpvar_31)
   * worldNorm_9)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_35.x;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_34);
  mc_6 = (mc_6 * (tmpvar_36.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_37;
  highp vec2 P_38;
  P_38 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_37 = texture2D (_SpecularMap, P_38);
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_37 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((float(
    (tmpvar_40 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_41);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_10;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_10;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_22;
  tmpvar_22 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
  highp float tmpvar_25;
  tmpvar_25 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_24 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMask, tmpvar_27).xyz;
  emissionTex_3 = tmpvar_28;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_29;
    tmpvar_29 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_29;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_30);
  mediump vec3 tmpvar_31;
  mediump vec3 srcColor_32;
  srcColor_32 = colorBlendLightMap_4;
  tmpvar_31 = (xlv_COLOR1.xyz + (srcColor_32 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec4 tmpvar_33;
  tmpvar_33.xyz = colorBlendLightMap_4;
  tmpvar_33.w = _BloomIntensity;
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_22;
  tmpvar_22 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
  highp float tmpvar_25;
  tmpvar_25 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_24 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMask, tmpvar_27).xyz;
  emissionTex_3 = tmpvar_28;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_29;
    tmpvar_29 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_29;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_30);
  mediump vec3 tmpvar_31;
  mediump vec3 srcColor_32;
  srcColor_32 = colorBlendLightMap_4;
  tmpvar_31 = (xlv_COLOR1.xyz + (srcColor_32 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec4 tmpvar_33;
  tmpvar_33.xyz = colorBlendLightMap_4;
  tmpvar_33.w = _BloomIntensity;
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_22;
  tmpvar_22 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
  highp float tmpvar_25;
  tmpvar_25 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_24 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMask, tmpvar_27).xyz;
  emissionTex_3 = tmpvar_28;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_29;
    tmpvar_29 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_29;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_30);
  mediump vec3 tmpvar_31;
  mediump vec3 srcColor_32;
  srcColor_32 = colorBlendLightMap_4;
  tmpvar_31 = (xlv_COLOR1.xyz + (srcColor_32 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec4 tmpvar_33;
  tmpvar_33.xyz = colorBlendLightMap_4;
  tmpvar_33.w = _BloomIntensity;
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_6 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_5 = (mc_5 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_9;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_9;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_6 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_5 = (mc_5 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_9;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_9;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_6 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_5 = (mc_5 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_9;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_9;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_37 * worldNorm_9);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_9, tmpvar_38)
   * worldNorm_9)));
  R_7 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_6 = (mc_6 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_44 = texture2D (_SpecularMap, P_45);
  highp vec4 tmpvar_46;
  tmpvar_46 = (tmpvar_44 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((float(
    (tmpvar_47 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_48);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_49;
  tmpvar_49 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_50;
  tmpvar_50 = texture2D (_EmissionMask, tmpvar_49).xyz;
  emissionTex_3 = tmpvar_50;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_51;
    tmpvar_51 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_51;
  };
  mediump vec3 tmpvar_52;
  tmpvar_52 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_52);
  mediump vec3 tmpvar_53;
  mediump vec3 srcColor_54;
  srcColor_54 = colorBlendLightMap_10;
  tmpvar_53 = (xlv_COLOR1.xyz + (srcColor_54 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_53;
  highp vec4 tmpvar_55;
  tmpvar_55.xyz = colorBlendLightMap_10;
  tmpvar_55.w = _BloomIntensity;
  tmpvar_1 = tmpvar_55;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_37 * worldNorm_9);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_9, tmpvar_38)
   * worldNorm_9)));
  R_7 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_6 = (mc_6 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_44 = texture2D (_SpecularMap, P_45);
  highp vec4 tmpvar_46;
  tmpvar_46 = (tmpvar_44 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((float(
    (tmpvar_47 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_48);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_49;
  tmpvar_49 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_50;
  tmpvar_50 = texture2D (_EmissionMask, tmpvar_49).xyz;
  emissionTex_3 = tmpvar_50;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_51;
    tmpvar_51 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_51;
  };
  mediump vec3 tmpvar_52;
  tmpvar_52 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_52);
  mediump vec3 tmpvar_53;
  mediump vec3 srcColor_54;
  srcColor_54 = colorBlendLightMap_10;
  tmpvar_53 = (xlv_COLOR1.xyz + (srcColor_54 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_53;
  highp vec4 tmpvar_55;
  tmpvar_55.xyz = colorBlendLightMap_10;
  tmpvar_55.w = _BloomIntensity;
  tmpvar_1 = tmpvar_55;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_37 * worldNorm_9);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_9, tmpvar_38)
   * worldNorm_9)));
  R_7 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_6 = (mc_6 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_44 = texture2D (_SpecularMap, P_45);
  highp vec4 tmpvar_46;
  tmpvar_46 = (tmpvar_44 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((float(
    (tmpvar_47 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_48);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_49;
  tmpvar_49 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_50;
  tmpvar_50 = texture2D (_EmissionMask, tmpvar_49).xyz;
  emissionTex_3 = tmpvar_50;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_51;
    tmpvar_51 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_51;
  };
  mediump vec3 tmpvar_52;
  tmpvar_52 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_52);
  mediump vec3 tmpvar_53;
  mediump vec3 srcColor_54;
  srcColor_54 = colorBlendLightMap_10;
  tmpvar_53 = (xlv_COLOR1.xyz + (srcColor_54 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_53;
  highp vec4 tmpvar_55;
  tmpvar_55.xyz = colorBlendLightMap_10;
  tmpvar_55.w = _BloomIntensity;
  tmpvar_1 = tmpvar_55;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_19;
  highp vec2 tmpvar_20;
  tmpvar_20 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_EmissionMask, tmpvar_20).xyz;
  emissionTex_3 = tmpvar_21;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_22;
    tmpvar_22 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_22;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_23);
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_4;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_4;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_19;
  highp vec2 tmpvar_20;
  tmpvar_20 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_EmissionMask, tmpvar_20).xyz;
  emissionTex_3 = tmpvar_21;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_22;
    tmpvar_22 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_22;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_23);
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_4;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_4;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_19;
  highp vec2 tmpvar_20;
  tmpvar_20 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_EmissionMask, tmpvar_20).xyz;
  emissionTex_3 = tmpvar_21;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_22;
    tmpvar_22 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_22;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_23);
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_4;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_4;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 - (2.0 * (
    dot (worldNorm_7, tmpvar_24)
   * worldNorm_7)));
  R_6 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_28.x;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatCap, tmpvar_27);
  mc_5 = (mc_5 * (tmpvar_29.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 - (2.0 * (
    dot (worldNorm_7, tmpvar_24)
   * worldNorm_7)));
  R_6 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_28.x;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatCap, tmpvar_27);
  mc_5 = (mc_5 * (tmpvar_29.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 - (2.0 * (
    dot (worldNorm_7, tmpvar_24)
   * worldNorm_7)));
  R_6 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_28.x;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatCap, tmpvar_27);
  mc_5 = (mc_5 * (tmpvar_29.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_30 * worldNorm_9);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_9, tmpvar_31)
   * worldNorm_9)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_35.x;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_34);
  mc_6 = (mc_6 * (tmpvar_36.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_37;
  highp vec2 P_38;
  P_38 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_37 = texture2D (_SpecularMap, P_38);
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_37 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((float(
    (tmpvar_40 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_41);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_10;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_10;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_30 * worldNorm_9);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_9, tmpvar_31)
   * worldNorm_9)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_35.x;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_34);
  mc_6 = (mc_6 * (tmpvar_36.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_37;
  highp vec2 P_38;
  P_38 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_37 = texture2D (_SpecularMap, P_38);
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_37 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((float(
    (tmpvar_40 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_41);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_10;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_10;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_30 * worldNorm_9);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_9, tmpvar_31)
   * worldNorm_9)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_35.x;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_34);
  mc_6 = (mc_6 * (tmpvar_36.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_37;
  highp vec2 P_38;
  P_38 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_37 = texture2D (_SpecularMap, P_38);
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_37 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((float(
    (tmpvar_40 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_41);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_10;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_10;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_22;
  tmpvar_22 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
  highp float tmpvar_25;
  tmpvar_25 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_24 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMask, tmpvar_27).xyz;
  emissionTex_3 = tmpvar_28;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_29;
    tmpvar_29 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_29;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_30);
  mediump vec3 tmpvar_31;
  mediump vec3 srcColor_32;
  srcColor_32 = colorBlendLightMap_4;
  tmpvar_31 = (xlv_COLOR1.xyz + (srcColor_32 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec4 tmpvar_33;
  tmpvar_33.xyz = colorBlendLightMap_4;
  tmpvar_33.w = _BloomIntensity;
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_22;
  tmpvar_22 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
  highp float tmpvar_25;
  tmpvar_25 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_24 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMask, tmpvar_27).xyz;
  emissionTex_3 = tmpvar_28;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_29;
    tmpvar_29 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_29;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_30);
  mediump vec3 tmpvar_31;
  mediump vec3 srcColor_32;
  srcColor_32 = colorBlendLightMap_4;
  tmpvar_31 = (xlv_COLOR1.xyz + (srcColor_32 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec4 tmpvar_33;
  tmpvar_33.xyz = colorBlendLightMap_4;
  tmpvar_33.w = _BloomIntensity;
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_22;
  tmpvar_22 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
  highp float tmpvar_25;
  tmpvar_25 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_24 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMask, tmpvar_27).xyz;
  emissionTex_3 = tmpvar_28;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_29;
    tmpvar_29 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_29;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_30);
  mediump vec3 tmpvar_31;
  mediump vec3 srcColor_32;
  srcColor_32 = colorBlendLightMap_4;
  tmpvar_31 = (xlv_COLOR1.xyz + (srcColor_32 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec4 tmpvar_33;
  tmpvar_33.xyz = colorBlendLightMap_4;
  tmpvar_33.w = _BloomIntensity;
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_6 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_5 = (mc_5 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_9;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_9;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_6 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_5 = (mc_5 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_9;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_9;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_6 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_5 = (mc_5 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_9;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_9;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_37 * worldNorm_9);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_9, tmpvar_38)
   * worldNorm_9)));
  R_7 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_6 = (mc_6 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_44 = texture2D (_SpecularMap, P_45);
  highp vec4 tmpvar_46;
  tmpvar_46 = (tmpvar_44 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((float(
    (tmpvar_47 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_48);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_49;
  tmpvar_49 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_50;
  tmpvar_50 = texture2D (_EmissionMask, tmpvar_49).xyz;
  emissionTex_3 = tmpvar_50;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_51;
    tmpvar_51 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_51;
  };
  mediump vec3 tmpvar_52;
  tmpvar_52 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_52);
  mediump vec3 tmpvar_53;
  mediump vec3 srcColor_54;
  srcColor_54 = colorBlendLightMap_10;
  tmpvar_53 = (xlv_COLOR1.xyz + (srcColor_54 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_53;
  highp vec4 tmpvar_55;
  tmpvar_55.xyz = colorBlendLightMap_10;
  tmpvar_55.w = _BloomIntensity;
  tmpvar_1 = tmpvar_55;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_37 * worldNorm_9);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_9, tmpvar_38)
   * worldNorm_9)));
  R_7 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_6 = (mc_6 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_44 = texture2D (_SpecularMap, P_45);
  highp vec4 tmpvar_46;
  tmpvar_46 = (tmpvar_44 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((float(
    (tmpvar_47 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_48);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_49;
  tmpvar_49 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_50;
  tmpvar_50 = texture2D (_EmissionMask, tmpvar_49).xyz;
  emissionTex_3 = tmpvar_50;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_51;
    tmpvar_51 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_51;
  };
  mediump vec3 tmpvar_52;
  tmpvar_52 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_52);
  mediump vec3 tmpvar_53;
  mediump vec3 srcColor_54;
  srcColor_54 = colorBlendLightMap_10;
  tmpvar_53 = (xlv_COLOR1.xyz + (srcColor_54 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_53;
  highp vec4 tmpvar_55;
  tmpvar_55.xyz = colorBlendLightMap_10;
  tmpvar_55.w = _BloomIntensity;
  tmpvar_1 = tmpvar_55;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_37 * worldNorm_9);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_9, tmpvar_38)
   * worldNorm_9)));
  R_7 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_6 = (mc_6 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_44 = texture2D (_SpecularMap, P_45);
  highp vec4 tmpvar_46;
  tmpvar_46 = (tmpvar_44 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((float(
    (tmpvar_47 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_48);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_49;
  tmpvar_49 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_50;
  tmpvar_50 = texture2D (_EmissionMask, tmpvar_49).xyz;
  emissionTex_3 = tmpvar_50;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_51;
    tmpvar_51 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_51;
  };
  mediump vec3 tmpvar_52;
  tmpvar_52 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_52);
  mediump vec3 tmpvar_53;
  mediump vec3 srcColor_54;
  srcColor_54 = colorBlendLightMap_10;
  tmpvar_53 = (xlv_COLOR1.xyz + (srcColor_54 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_53;
  highp vec4 tmpvar_55;
  tmpvar_55.xyz = colorBlendLightMap_10;
  tmpvar_55.w = _BloomIntensity;
  tmpvar_1 = tmpvar_55;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_EmissionMask, tmpvar_19).xyz;
  emissionTex_3 = tmpvar_20;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_21;
    tmpvar_21 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_21;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_22);
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_4;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_4;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_EmissionMask, tmpvar_19).xyz;
  emissionTex_3 = tmpvar_20;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_21;
    tmpvar_21 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_21;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_22);
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_4;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_4;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_EmissionMask, tmpvar_19).xyz;
  emissionTex_3 = tmpvar_20;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_21;
    tmpvar_21 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_21;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_22);
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_4;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_4;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_23 - (2.0 * (
    dot (worldNorm_7, tmpvar_23)
   * worldNorm_7)));
  R_6 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_27.x;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatCap, tmpvar_26);
  mc_5 = (mc_5 * (tmpvar_28.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_23 - (2.0 * (
    dot (worldNorm_7, tmpvar_23)
   * worldNorm_7)));
  R_6 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_27.x;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatCap, tmpvar_26);
  mc_5 = (mc_5 * (tmpvar_28.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_23 - (2.0 * (
    dot (worldNorm_7, tmpvar_23)
   * worldNorm_7)));
  R_6 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_27.x;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatCap, tmpvar_26);
  mc_5 = (mc_5 * (tmpvar_28.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_29 * worldNorm_9);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_9, tmpvar_30)
   * worldNorm_9)));
  R_7 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_34.x;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_33);
  mc_6 = (mc_6 * (tmpvar_35.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((tmpvar_33 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_36 = texture2D (_SpecularMap, P_37);
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_40;
  tmpvar_40 = clamp ((float(
    (tmpvar_39 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_40);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_3 = tmpvar_42;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_10;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_10;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_29 * worldNorm_9);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_9, tmpvar_30)
   * worldNorm_9)));
  R_7 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_34.x;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_33);
  mc_6 = (mc_6 * (tmpvar_35.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((tmpvar_33 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_36 = texture2D (_SpecularMap, P_37);
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_40;
  tmpvar_40 = clamp ((float(
    (tmpvar_39 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_40);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_3 = tmpvar_42;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_10;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_10;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_29 * worldNorm_9);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_9, tmpvar_30)
   * worldNorm_9)));
  R_7 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_34.x;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_33);
  mc_6 = (mc_6 * (tmpvar_35.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((tmpvar_33 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_36 = texture2D (_SpecularMap, P_37);
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_40;
  tmpvar_40 = clamp ((float(
    (tmpvar_39 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_40);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_3 = tmpvar_42;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_10;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_10;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
  highp float tmpvar_24;
  tmpvar_24 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_23 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMask, tmpvar_26).xyz;
  emissionTex_3 = tmpvar_27;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_28;
    tmpvar_28 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_28;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_29);
  mediump vec3 tmpvar_30;
  mediump vec3 srcColor_31;
  srcColor_31 = colorBlendLightMap_4;
  tmpvar_30 = (xlv_COLOR1.xyz + (srcColor_31 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec4 tmpvar_32;
  tmpvar_32.xyz = colorBlendLightMap_4;
  tmpvar_32.w = _BloomIntensity;
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
  highp float tmpvar_24;
  tmpvar_24 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_23 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMask, tmpvar_26).xyz;
  emissionTex_3 = tmpvar_27;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_28;
    tmpvar_28 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_28;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_29);
  mediump vec3 tmpvar_30;
  mediump vec3 srcColor_31;
  srcColor_31 = colorBlendLightMap_4;
  tmpvar_30 = (xlv_COLOR1.xyz + (srcColor_31 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec4 tmpvar_32;
  tmpvar_32.xyz = colorBlendLightMap_4;
  tmpvar_32.w = _BloomIntensity;
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
  highp float tmpvar_24;
  tmpvar_24 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_23 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMask, tmpvar_26).xyz;
  emissionTex_3 = tmpvar_27;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_28;
    tmpvar_28 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_28;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_29);
  mediump vec3 tmpvar_30;
  mediump vec3 srcColor_31;
  srcColor_31 = colorBlendLightMap_4;
  tmpvar_30 = (xlv_COLOR1.xyz + (srcColor_31 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec4 tmpvar_32;
  tmpvar_32.xyz = colorBlendLightMap_4;
  tmpvar_32.w = _BloomIntensity;
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_6 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_5 = (mc_5 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_9;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_9;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_6 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_5 = (mc_5 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_9;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_9;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_6 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_5 = (mc_5 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_9;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_9;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_36 * worldNorm_9);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_9, tmpvar_37)
   * worldNorm_9)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_6 = (mc_6 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_43 = texture2D (_SpecularMap, P_44);
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_47;
  tmpvar_47 = clamp ((float(
    (tmpvar_46 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_47);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_10;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_10;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_36 * worldNorm_9);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_9, tmpvar_37)
   * worldNorm_9)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_6 = (mc_6 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_43 = texture2D (_SpecularMap, P_44);
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_47;
  tmpvar_47 = clamp ((float(
    (tmpvar_46 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_47);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_10;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_10;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_36 * worldNorm_9);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_9, tmpvar_37)
   * worldNorm_9)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_6 = (mc_6 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_43 = texture2D (_SpecularMap, P_44);
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_47;
  tmpvar_47 = clamp ((float(
    (tmpvar_46 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_47);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_10;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_10;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_EmissionMask, tmpvar_19).xyz;
  emissionTex_3 = tmpvar_20;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_21;
    tmpvar_21 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_21;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_22);
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_4;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_4;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_EmissionMask, tmpvar_19).xyz;
  emissionTex_3 = tmpvar_20;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_21;
    tmpvar_21 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_21;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_22);
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_4;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_4;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_EmissionMask, tmpvar_19).xyz;
  emissionTex_3 = tmpvar_20;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_21;
    tmpvar_21 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_21;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_22);
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_4;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_4;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_23 - (2.0 * (
    dot (worldNorm_7, tmpvar_23)
   * worldNorm_7)));
  R_6 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_27.x;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatCap, tmpvar_26);
  mc_5 = (mc_5 * (tmpvar_28.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_23 - (2.0 * (
    dot (worldNorm_7, tmpvar_23)
   * worldNorm_7)));
  R_6 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_27.x;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatCap, tmpvar_26);
  mc_5 = (mc_5 * (tmpvar_28.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_23 - (2.0 * (
    dot (worldNorm_7, tmpvar_23)
   * worldNorm_7)));
  R_6 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_27.x;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatCap, tmpvar_26);
  mc_5 = (mc_5 * (tmpvar_28.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_29 * worldNorm_9);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_9, tmpvar_30)
   * worldNorm_9)));
  R_7 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_34.x;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_33);
  mc_6 = (mc_6 * (tmpvar_35.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((tmpvar_33 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_36 = texture2D (_SpecularMap, P_37);
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_40;
  tmpvar_40 = clamp ((float(
    (tmpvar_39 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_40);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_3 = tmpvar_42;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_10;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_10;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_29 * worldNorm_9);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_9, tmpvar_30)
   * worldNorm_9)));
  R_7 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_34.x;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_33);
  mc_6 = (mc_6 * (tmpvar_35.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((tmpvar_33 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_36 = texture2D (_SpecularMap, P_37);
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_40;
  tmpvar_40 = clamp ((float(
    (tmpvar_39 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_40);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_3 = tmpvar_42;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_10;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_10;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_29 * worldNorm_9);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_9, tmpvar_30)
   * worldNorm_9)));
  R_7 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_34.x;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_33);
  mc_6 = (mc_6 * (tmpvar_35.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((tmpvar_33 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_36 = texture2D (_SpecularMap, P_37);
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_40;
  tmpvar_40 = clamp ((float(
    (tmpvar_39 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_40);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_3 = tmpvar_42;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_10;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_10;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
  highp float tmpvar_24;
  tmpvar_24 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_23 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMask, tmpvar_26).xyz;
  emissionTex_3 = tmpvar_27;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_28;
    tmpvar_28 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_28;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_29);
  mediump vec3 tmpvar_30;
  mediump vec3 srcColor_31;
  srcColor_31 = colorBlendLightMap_4;
  tmpvar_30 = (xlv_COLOR1.xyz + (srcColor_31 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec4 tmpvar_32;
  tmpvar_32.xyz = colorBlendLightMap_4;
  tmpvar_32.w = _BloomIntensity;
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
  highp float tmpvar_24;
  tmpvar_24 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_23 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMask, tmpvar_26).xyz;
  emissionTex_3 = tmpvar_27;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_28;
    tmpvar_28 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_28;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_29);
  mediump vec3 tmpvar_30;
  mediump vec3 srcColor_31;
  srcColor_31 = colorBlendLightMap_4;
  tmpvar_30 = (xlv_COLOR1.xyz + (srcColor_31 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec4 tmpvar_32;
  tmpvar_32.xyz = colorBlendLightMap_4;
  tmpvar_32.w = _BloomIntensity;
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
  highp float tmpvar_24;
  tmpvar_24 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_23 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMask, tmpvar_26).xyz;
  emissionTex_3 = tmpvar_27;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_28;
    tmpvar_28 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_28;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_29);
  mediump vec3 tmpvar_30;
  mediump vec3 srcColor_31;
  srcColor_31 = colorBlendLightMap_4;
  tmpvar_30 = (xlv_COLOR1.xyz + (srcColor_31 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec4 tmpvar_32;
  tmpvar_32.xyz = colorBlendLightMap_4;
  tmpvar_32.w = _BloomIntensity;
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_6 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_5 = (mc_5 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_9;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_9;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_6 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_5 = (mc_5 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_9;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_9;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_6 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_5 = (mc_5 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_3 = tmpvar_43;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_9;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_9;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_36 * worldNorm_9);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_9, tmpvar_37)
   * worldNorm_9)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_6 = (mc_6 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_43 = texture2D (_SpecularMap, P_44);
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_47;
  tmpvar_47 = clamp ((float(
    (tmpvar_46 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_47);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_10;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_10;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_36 * worldNorm_9);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_9, tmpvar_37)
   * worldNorm_9)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_6 = (mc_6 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_43 = texture2D (_SpecularMap, P_44);
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_47;
  tmpvar_47 = clamp ((float(
    (tmpvar_46 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_47);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_10;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_10;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_36 * worldNorm_9);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_9, tmpvar_37)
   * worldNorm_9)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_41.x;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_40);
  mc_6 = (mc_6 * (tmpvar_42.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_43 = texture2D (_SpecularMap, P_44);
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_47;
  tmpvar_47 = clamp ((float(
    (tmpvar_46 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_47);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_10;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_10;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_EmissionMask, tmpvar_21).xyz;
  emissionTex_3 = tmpvar_22;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_23;
    tmpvar_23 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_23;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_24);
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_4;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_4;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_EmissionMask, tmpvar_21).xyz;
  emissionTex_3 = tmpvar_22;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_23;
    tmpvar_23 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_23;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_24);
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_4;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_4;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_EmissionMask, tmpvar_21).xyz;
  emissionTex_3 = tmpvar_22;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_23;
    tmpvar_23 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_23;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_24);
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_4;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_4;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 - (2.0 * (
    dot (worldNorm_7, tmpvar_25)
   * worldNorm_7)));
  R_6 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_29.x;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatCap, tmpvar_28);
  mc_5 = (mc_5 * (tmpvar_30.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 - (2.0 * (
    dot (worldNorm_7, tmpvar_25)
   * worldNorm_7)));
  R_6 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_29.x;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatCap, tmpvar_28);
  mc_5 = (mc_5 * (tmpvar_30.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 - (2.0 * (
    dot (worldNorm_7, tmpvar_25)
   * worldNorm_7)));
  R_6 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_29.x;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatCap, tmpvar_28);
  mc_5 = (mc_5 * (tmpvar_30.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_31 * worldNorm_9);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_9, tmpvar_32)
   * worldNorm_9)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_36.x;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_35);
  mc_6 = (mc_6 * (tmpvar_37.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_38;
  highp vec2 P_39;
  P_39 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_38 = texture2D (_SpecularMap, P_39);
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_38 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((float(
    (tmpvar_41 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_42);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_10;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_10;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_31 * worldNorm_9);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_9, tmpvar_32)
   * worldNorm_9)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_36.x;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_35);
  mc_6 = (mc_6 * (tmpvar_37.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_38;
  highp vec2 P_39;
  P_39 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_38 = texture2D (_SpecularMap, P_39);
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_38 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((float(
    (tmpvar_41 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_42);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_10;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_10;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_31 * worldNorm_9);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_9, tmpvar_32)
   * worldNorm_9)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_36.x;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_35);
  mc_6 = (mc_6 * (tmpvar_37.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_38;
  highp vec2 P_39;
  P_39 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_38 = texture2D (_SpecularMap, P_39);
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_38 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((float(
    (tmpvar_41 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_42);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_10;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_10;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.y = 0.5;
  tmpvar_24.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
  highp float tmpvar_26;
  tmpvar_26 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_25 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMask, tmpvar_28).xyz;
  emissionTex_3 = tmpvar_29;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_30;
    tmpvar_30 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_30;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_31);
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_4;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_32;
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_4;
  tmpvar_34.w = _BloomIntensity;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.y = 0.5;
  tmpvar_24.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
  highp float tmpvar_26;
  tmpvar_26 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_25 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMask, tmpvar_28).xyz;
  emissionTex_3 = tmpvar_29;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_30;
    tmpvar_30 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_30;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_31);
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_4;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_32;
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_4;
  tmpvar_34.w = _BloomIntensity;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.y = 0.5;
  tmpvar_24.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
  highp float tmpvar_26;
  tmpvar_26 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_25 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMask, tmpvar_28).xyz;
  emissionTex_3 = tmpvar_29;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_30;
    tmpvar_30 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_30;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_31);
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_4;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_32;
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_4;
  tmpvar_34.w = _BloomIntensity;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_37 * worldNorm_8);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_8, tmpvar_38)
   * worldNorm_8)));
  R_6 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_5 = (mc_5 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_9;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_9;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_37 * worldNorm_8);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_8, tmpvar_38)
   * worldNorm_8)));
  R_6 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_5 = (mc_5 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_9;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_9;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_37 * worldNorm_8);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_8, tmpvar_38)
   * worldNorm_8)));
  R_6 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_5 = (mc_5 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_9;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_9;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_38 * worldNorm_9);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_9, tmpvar_39)
   * worldNorm_9)));
  R_7 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_6 = (mc_6 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_45;
  highp vec2 P_46;
  P_46 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_45 = texture2D (_SpecularMap, P_46);
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_49;
  tmpvar_49 = clamp ((float(
    (tmpvar_48 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_49);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_50;
  tmpvar_50 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMask, tmpvar_50).xyz;
  emissionTex_3 = tmpvar_51;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_52;
    tmpvar_52 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_52;
  };
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_53);
  mediump vec3 tmpvar_54;
  mediump vec3 srcColor_55;
  srcColor_55 = colorBlendLightMap_10;
  tmpvar_54 = (xlv_COLOR1.xyz + (srcColor_55 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_54;
  highp vec4 tmpvar_56;
  tmpvar_56.xyz = colorBlendLightMap_10;
  tmpvar_56.w = _BloomIntensity;
  tmpvar_1 = tmpvar_56;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_38 * worldNorm_9);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_9, tmpvar_39)
   * worldNorm_9)));
  R_7 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_6 = (mc_6 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_45;
  highp vec2 P_46;
  P_46 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_45 = texture2D (_SpecularMap, P_46);
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_49;
  tmpvar_49 = clamp ((float(
    (tmpvar_48 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_49);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_50;
  tmpvar_50 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMask, tmpvar_50).xyz;
  emissionTex_3 = tmpvar_51;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_52;
    tmpvar_52 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_52;
  };
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_53);
  mediump vec3 tmpvar_54;
  mediump vec3 srcColor_55;
  srcColor_55 = colorBlendLightMap_10;
  tmpvar_54 = (xlv_COLOR1.xyz + (srcColor_55 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_54;
  highp vec4 tmpvar_56;
  tmpvar_56.xyz = colorBlendLightMap_10;
  tmpvar_56.w = _BloomIntensity;
  tmpvar_1 = tmpvar_56;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_38 * worldNorm_9);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_9, tmpvar_39)
   * worldNorm_9)));
  R_7 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_6 = (mc_6 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_45;
  highp vec2 P_46;
  P_46 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_45 = texture2D (_SpecularMap, P_46);
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_49;
  tmpvar_49 = clamp ((float(
    (tmpvar_48 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_49);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_50;
  tmpvar_50 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMask, tmpvar_50).xyz;
  emissionTex_3 = tmpvar_51;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_52;
    tmpvar_52 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_52;
  };
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_53);
  mediump vec3 tmpvar_54;
  mediump vec3 srcColor_55;
  srcColor_55 = colorBlendLightMap_10;
  tmpvar_54 = (xlv_COLOR1.xyz + (srcColor_55 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_54;
  highp vec4 tmpvar_56;
  tmpvar_56.xyz = colorBlendLightMap_10;
  tmpvar_56.w = _BloomIntensity;
  tmpvar_1 = tmpvar_56;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_EmissionMask, tmpvar_21).xyz;
  emissionTex_3 = tmpvar_22;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_23;
    tmpvar_23 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_23;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_24);
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_4;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_4;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_EmissionMask, tmpvar_21).xyz;
  emissionTex_3 = tmpvar_22;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_23;
    tmpvar_23 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_23;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_24);
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_4;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_4;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    (lmtex_6.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_EmissionMask, tmpvar_21).xyz;
  emissionTex_3 = tmpvar_22;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_23;
    tmpvar_23 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_23;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_24);
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_4;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_4;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 - (2.0 * (
    dot (worldNorm_7, tmpvar_25)
   * worldNorm_7)));
  R_6 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_29.x;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatCap, tmpvar_28);
  mc_5 = (mc_5 * (tmpvar_30.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 - (2.0 * (
    dot (worldNorm_7, tmpvar_25)
   * worldNorm_7)));
  R_6 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_29.x;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatCap, tmpvar_28);
  mc_5 = (mc_5 * (tmpvar_30.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 - (2.0 * (
    dot (worldNorm_7, tmpvar_25)
   * worldNorm_7)));
  R_6 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_29.x;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatCap, tmpvar_28);
  mc_5 = (mc_5 * (tmpvar_30.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_31 * worldNorm_9);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_9, tmpvar_32)
   * worldNorm_9)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_36.x;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_35);
  mc_6 = (mc_6 * (tmpvar_37.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_38;
  highp vec2 P_39;
  P_39 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_38 = texture2D (_SpecularMap, P_39);
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_38 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((float(
    (tmpvar_41 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_42);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_10;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_10;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_31 * worldNorm_9);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_9, tmpvar_32)
   * worldNorm_9)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_36.x;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_35);
  mc_6 = (mc_6 * (tmpvar_37.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_38;
  highp vec2 P_39;
  P_39 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_38 = texture2D (_SpecularMap, P_39);
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_38 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((float(
    (tmpvar_41 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_42);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_10;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_10;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    (lmtex_12.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_31 * worldNorm_9);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_9, tmpvar_32)
   * worldNorm_9)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_36.x;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_35);
  mc_6 = (mc_6 * (tmpvar_37.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_38;
  highp vec2 P_39;
  P_39 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_38 = texture2D (_SpecularMap, P_39);
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_38 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((float(
    (tmpvar_41 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_42);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_3 = tmpvar_44;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_10;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_10;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.y = 0.5;
  tmpvar_24.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
  highp float tmpvar_26;
  tmpvar_26 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_25 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMask, tmpvar_28).xyz;
  emissionTex_3 = tmpvar_29;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_30;
    tmpvar_30 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_30;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_31);
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_4;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_32;
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_4;
  tmpvar_34.w = _BloomIntensity;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.y = 0.5;
  tmpvar_24.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
  highp float tmpvar_26;
  tmpvar_26 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_25 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMask, tmpvar_28).xyz;
  emissionTex_3 = tmpvar_29;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_30;
    tmpvar_30 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_30;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_31);
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_4;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_32;
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_4;
  tmpvar_34.w = _BloomIntensity;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.y = 0.5;
  tmpvar_24.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
  highp float tmpvar_26;
  tmpvar_26 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_25 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_7.xyz * _Color.xyz) * ((fc_6 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMask, tmpvar_28).xyz;
  emissionTex_3 = tmpvar_29;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_30;
    tmpvar_30 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_30;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_31);
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_4;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_32;
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_4;
  tmpvar_34.w = _BloomIntensity;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_37 * worldNorm_8);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_8, tmpvar_38)
   * worldNorm_8)));
  R_6 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_5 = (mc_5 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_9;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_9;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_37 * worldNorm_8);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_8, tmpvar_38)
   * worldNorm_8)));
  R_6 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_5 = (mc_5 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_9;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_9;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_28;
  tmpvar_28 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
  highp float tmpvar_31;
  tmpvar_31 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_30 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp)) + (tmpvar_31 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_12.xyz * _Color.xyz) * ((fc_11 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_37 * worldNorm_8);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_8, tmpvar_38)
   * worldNorm_8)));
  R_6 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_42.x;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_41);
  mc_5 = (mc_5 * (tmpvar_43.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_9;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_9;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_38 * worldNorm_9);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_9, tmpvar_39)
   * worldNorm_9)));
  R_7 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_6 = (mc_6 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_45;
  highp vec2 P_46;
  P_46 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_45 = texture2D (_SpecularMap, P_46);
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_49;
  tmpvar_49 = clamp ((float(
    (tmpvar_48 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_49);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_50;
  tmpvar_50 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMask, tmpvar_50).xyz;
  emissionTex_3 = tmpvar_51;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_52;
    tmpvar_52 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_52;
  };
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_53);
  mediump vec3 tmpvar_54;
  mediump vec3 srcColor_55;
  srcColor_55 = colorBlendLightMap_10;
  tmpvar_54 = (xlv_COLOR1.xyz + (srcColor_55 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_54;
  highp vec4 tmpvar_56;
  tmpvar_56.xyz = colorBlendLightMap_10;
  tmpvar_56.w = _BloomIntensity;
  tmpvar_1 = tmpvar_56;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_38 * worldNorm_9);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_9, tmpvar_39)
   * worldNorm_9)));
  R_7 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_6 = (mc_6 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_45;
  highp vec2 P_46;
  P_46 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_45 = texture2D (_SpecularMap, P_46);
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_49;
  tmpvar_49 = clamp ((float(
    (tmpvar_48 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_49);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_50;
  tmpvar_50 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMask, tmpvar_50).xyz;
  emissionTex_3 = tmpvar_51;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_52;
    tmpvar_52 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_52;
  };
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_53);
  mediump vec3 tmpvar_54;
  mediump vec3 srcColor_55;
  srcColor_55 = colorBlendLightMap_10;
  tmpvar_54 = (xlv_COLOR1.xyz + (srcColor_55 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_54;
  highp vec4 tmpvar_56;
  tmpvar_56.xyz = colorBlendLightMap_10;
  tmpvar_56.w = _BloomIntensity;
  tmpvar_1 = tmpvar_56;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_13.xyz * _Color.xyz) * ((fc_12 * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_38 * worldNorm_9);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_9, tmpvar_39)
   * worldNorm_9)));
  R_7 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_6 = (mc_6 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_45;
  highp vec2 P_46;
  P_46 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_45 = texture2D (_SpecularMap, P_46);
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_49;
  tmpvar_49 = clamp ((float(
    (tmpvar_48 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_49);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_50;
  tmpvar_50 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMask, tmpvar_50).xyz;
  emissionTex_3 = tmpvar_51;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_52;
    tmpvar_52 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_52;
  };
  mediump vec3 tmpvar_53;
  tmpvar_53 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_53);
  mediump vec3 tmpvar_54;
  mediump vec3 srcColor_55;
  srcColor_55 = colorBlendLightMap_10;
  tmpvar_54 = (xlv_COLOR1.xyz + (srcColor_55 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_54;
  highp vec4 tmpvar_56;
  tmpvar_56.xyz = colorBlendLightMap_10;
  tmpvar_56.w = _BloomIntensity;
  tmpvar_1 = tmpvar_56;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_20))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_EmissionMask, tmpvar_23).xyz;
  emissionTex_3 = tmpvar_24;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_25;
    tmpvar_25 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_25;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_26);
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_4;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_4;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_20))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_EmissionMask, tmpvar_23).xyz;
  emissionTex_3 = tmpvar_24;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_25;
    tmpvar_25 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_25;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_26);
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_4;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_4;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_20))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_EmissionMask, tmpvar_23).xyz;
  emissionTex_3 = tmpvar_24;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_25;
    tmpvar_25 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_25;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_26);
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_4;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_4;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_7, tmpvar_27)
   * worldNorm_7)));
  R_6 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_31.x;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_30);
  mc_5 = (mc_5 * (tmpvar_32.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_33;
  tmpvar_33 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMask, tmpvar_33).xyz;
  emissionTex_3 = tmpvar_34;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_35;
    tmpvar_35 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_35;
  };
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_36);
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = _BloomIntensity;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_7, tmpvar_27)
   * worldNorm_7)));
  R_6 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_31.x;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_30);
  mc_5 = (mc_5 * (tmpvar_32.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_33;
  tmpvar_33 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMask, tmpvar_33).xyz;
  emissionTex_3 = tmpvar_34;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_35;
    tmpvar_35 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_35;
  };
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_36);
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = _BloomIntensity;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_7, tmpvar_27)
   * worldNorm_7)));
  R_6 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_31.x;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_30);
  mc_5 = (mc_5 * (tmpvar_32.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_33;
  tmpvar_33 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMask, tmpvar_33).xyz;
  emissionTex_3 = tmpvar_34;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_35;
    tmpvar_35 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_35;
  };
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_36);
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = _BloomIntensity;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_33 * worldNorm_9);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_9, tmpvar_34)
   * worldNorm_9)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_38.x;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_37);
  mc_6 = (mc_6 * (tmpvar_39.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_40 = texture2D (_SpecularMap, P_41);
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_44;
  tmpvar_44 = clamp ((float(
    (tmpvar_43 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_44);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_10;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_10;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_33 * worldNorm_9);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_9, tmpvar_34)
   * worldNorm_9)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_38.x;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_37);
  mc_6 = (mc_6 * (tmpvar_39.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_40 = texture2D (_SpecularMap, P_41);
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_44;
  tmpvar_44 = clamp ((float(
    (tmpvar_43 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_44);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_10;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_10;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_33 * worldNorm_9);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_9, tmpvar_34)
   * worldNorm_9)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_38.x;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_37);
  mc_6 = (mc_6 * (tmpvar_39.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_40 = texture2D (_SpecularMap, P_41);
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_44;
  tmpvar_44 = clamp ((float(
    (tmpvar_43 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_44);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_10;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_10;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_25;
  tmpvar_25 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
  highp float tmpvar_28;
  tmpvar_28 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_27 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_4;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_4;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_25;
  tmpvar_25 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
  highp float tmpvar_28;
  tmpvar_28 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_27 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_4;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_4;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_25;
  tmpvar_25 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
  highp float tmpvar_28;
  tmpvar_28 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_27 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_4;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_4;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_39 * worldNorm_8);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_8, tmpvar_40)
   * worldNorm_8)));
  R_6 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_5 = (mc_5 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_9;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_9;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_39 * worldNorm_8);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_8, tmpvar_40)
   * worldNorm_8)));
  R_6 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_5 = (mc_5 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_9;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_9;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_39 * worldNorm_8);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_8, tmpvar_40)
   * worldNorm_8)));
  R_6 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_5 = (mc_5 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_9;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_9;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_40 * worldNorm_9);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_9, tmpvar_41)
   * worldNorm_9)));
  R_7 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_6 = (mc_6 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_47 = texture2D (_SpecularMap, P_48);
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_51;
  tmpvar_51 = clamp ((float(
    (tmpvar_50 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_51);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_52;
  tmpvar_52 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_EmissionMask, tmpvar_52).xyz;
  emissionTex_3 = tmpvar_53;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_54;
    tmpvar_54 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_54;
  };
  mediump vec3 tmpvar_55;
  tmpvar_55 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_55);
  mediump vec3 tmpvar_56;
  mediump vec3 srcColor_57;
  srcColor_57 = colorBlendLightMap_10;
  tmpvar_56 = (xlv_COLOR1.xyz + (srcColor_57 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_56;
  highp vec4 tmpvar_58;
  tmpvar_58.xyz = colorBlendLightMap_10;
  tmpvar_58.w = _BloomIntensity;
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_40 * worldNorm_9);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_9, tmpvar_41)
   * worldNorm_9)));
  R_7 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_6 = (mc_6 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_47 = texture2D (_SpecularMap, P_48);
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_51;
  tmpvar_51 = clamp ((float(
    (tmpvar_50 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_51);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_52;
  tmpvar_52 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_EmissionMask, tmpvar_52).xyz;
  emissionTex_3 = tmpvar_53;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_54;
    tmpvar_54 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_54;
  };
  mediump vec3 tmpvar_55;
  tmpvar_55 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_55);
  mediump vec3 tmpvar_56;
  mediump vec3 srcColor_57;
  srcColor_57 = colorBlendLightMap_10;
  tmpvar_56 = (xlv_COLOR1.xyz + (srcColor_57 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_56;
  highp vec4 tmpvar_58;
  tmpvar_58.xyz = colorBlendLightMap_10;
  tmpvar_58.w = _BloomIntensity;
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_40 * worldNorm_9);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_9, tmpvar_41)
   * worldNorm_9)));
  R_7 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_6 = (mc_6 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_47 = texture2D (_SpecularMap, P_48);
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_51;
  tmpvar_51 = clamp ((float(
    (tmpvar_50 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_51);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_52;
  tmpvar_52 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_EmissionMask, tmpvar_52).xyz;
  emissionTex_3 = tmpvar_53;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_54;
    tmpvar_54 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_54;
  };
  mediump vec3 tmpvar_55;
  tmpvar_55 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_55);
  mediump vec3 tmpvar_56;
  mediump vec3 srcColor_57;
  srcColor_57 = colorBlendLightMap_10;
  tmpvar_56 = (xlv_COLOR1.xyz + (srcColor_57 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_56;
  highp vec4 tmpvar_58;
  tmpvar_58.xyz = colorBlendLightMap_10;
  tmpvar_58.w = _BloomIntensity;
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_20))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_EmissionMask, tmpvar_23).xyz;
  emissionTex_3 = tmpvar_24;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_25;
    tmpvar_25 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_25;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_26);
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_4;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_4;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_20))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_EmissionMask, tmpvar_23).xyz;
  emissionTex_3 = tmpvar_24;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_25;
    tmpvar_25 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_25;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_26);
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_4;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_4;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_16.w;
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_20))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_EmissionMask, tmpvar_23).xyz;
  emissionTex_3 = tmpvar_24;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_25;
    tmpvar_25 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_25;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_26);
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_4;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_4;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_7, tmpvar_27)
   * worldNorm_7)));
  R_6 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_31.x;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_30);
  mc_5 = (mc_5 * (tmpvar_32.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_33;
  tmpvar_33 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMask, tmpvar_33).xyz;
  emissionTex_3 = tmpvar_34;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_35;
    tmpvar_35 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_35;
  };
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_36);
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = _BloomIntensity;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_7, tmpvar_27)
   * worldNorm_7)));
  R_6 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_31.x;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_30);
  mc_5 = (mc_5 * (tmpvar_32.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_33;
  tmpvar_33 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMask, tmpvar_33).xyz;
  emissionTex_3 = tmpvar_34;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_35;
    tmpvar_35 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_35;
  };
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_36);
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = _BloomIntensity;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_7, tmpvar_27)
   * worldNorm_7)));
  R_6 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_31.x;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_30);
  mc_5 = (mc_5 * (tmpvar_32.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_33;
  tmpvar_33 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMask, tmpvar_33).xyz;
  emissionTex_3 = tmpvar_34;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_35;
    tmpvar_35 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_35;
  };
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_36);
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = _BloomIntensity;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_33 * worldNorm_9);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_9, tmpvar_34)
   * worldNorm_9)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_38.x;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_37);
  mc_6 = (mc_6 * (tmpvar_39.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_40 = texture2D (_SpecularMap, P_41);
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_44;
  tmpvar_44 = clamp ((float(
    (tmpvar_43 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_44);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_10;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_10;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_33 * worldNorm_9);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_9, tmpvar_34)
   * worldNorm_9)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_38.x;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_37);
  mc_6 = (mc_6 * (tmpvar_39.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_40 = texture2D (_SpecularMap, P_41);
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_44;
  tmpvar_44 = clamp ((float(
    (tmpvar_43 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_44);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_10;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_10;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_33 * worldNorm_9);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_9, tmpvar_34)
   * worldNorm_9)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_38.x;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_37);
  mc_6 = (mc_6 * (tmpvar_39.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_40 = texture2D (_SpecularMap, P_41);
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_44;
  tmpvar_44 = clamp ((float(
    (tmpvar_43 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_44);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_10;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_10;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_25;
  tmpvar_25 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
  highp float tmpvar_28;
  tmpvar_28 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_27 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_4;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_4;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_25;
  tmpvar_25 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
  highp float tmpvar_28;
  tmpvar_28 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_27 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_4;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_4;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_25;
  tmpvar_25 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
  highp float tmpvar_28;
  tmpvar_28 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_27 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMask, tmpvar_30).xyz;
  emissionTex_3 = tmpvar_31;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_32;
    tmpvar_32 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_32;
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_33);
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_4;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_34;
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_4;
  tmpvar_36.w = _BloomIntensity;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_39 * worldNorm_8);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_8, tmpvar_40)
   * worldNorm_8)));
  R_6 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_5 = (mc_5 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_9;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_9;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_39 * worldNorm_8);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_8, tmpvar_40)
   * worldNorm_8)));
  R_6 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_5 = (mc_5 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_9;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_9;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_39 * worldNorm_8);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_8, tmpvar_40)
   * worldNorm_8)));
  R_6 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_5 = (mc_5 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_9;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_9;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_40 * worldNorm_9);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_9, tmpvar_41)
   * worldNorm_9)));
  R_7 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_6 = (mc_6 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_47 = texture2D (_SpecularMap, P_48);
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_51;
  tmpvar_51 = clamp ((float(
    (tmpvar_50 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_51);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_52;
  tmpvar_52 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_EmissionMask, tmpvar_52).xyz;
  emissionTex_3 = tmpvar_53;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_54;
    tmpvar_54 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_54;
  };
  mediump vec3 tmpvar_55;
  tmpvar_55 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_55);
  mediump vec3 tmpvar_56;
  mediump vec3 srcColor_57;
  srcColor_57 = colorBlendLightMap_10;
  tmpvar_56 = (xlv_COLOR1.xyz + (srcColor_57 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_56;
  highp vec4 tmpvar_58;
  tmpvar_58.xyz = colorBlendLightMap_10;
  tmpvar_58.w = _BloomIntensity;
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_40 * worldNorm_9);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_9, tmpvar_41)
   * worldNorm_9)));
  R_7 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_6 = (mc_6 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_47 = texture2D (_SpecularMap, P_48);
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_51;
  tmpvar_51 = clamp ((float(
    (tmpvar_50 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_51);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_52;
  tmpvar_52 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_EmissionMask, tmpvar_52).xyz;
  emissionTex_3 = tmpvar_53;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_54;
    tmpvar_54 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_54;
  };
  mediump vec3 tmpvar_55;
  tmpvar_55 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_55);
  mediump vec3 tmpvar_56;
  mediump vec3 srcColor_57;
  srcColor_57 = colorBlendLightMap_10;
  tmpvar_56 = (xlv_COLOR1.xyz + (srcColor_57 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_56;
  highp vec4 tmpvar_58;
  tmpvar_58.xyz = colorBlendLightMap_10;
  tmpvar_58.w = _BloomIntensity;
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_40 * worldNorm_9);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_9, tmpvar_41)
   * worldNorm_9)));
  R_7 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_6 = (mc_6 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_47 = texture2D (_SpecularMap, P_48);
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_51;
  tmpvar_51 = clamp ((float(
    (tmpvar_50 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_51);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_52;
  tmpvar_52 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_EmissionMask, tmpvar_52).xyz;
  emissionTex_3 = tmpvar_53;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_54;
    tmpvar_54 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_54;
  };
  mediump vec3 tmpvar_55;
  tmpvar_55 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_55);
  mediump vec3 tmpvar_56;
  mediump vec3 srcColor_57;
  srcColor_57 = colorBlendLightMap_10;
  tmpvar_56 = (xlv_COLOR1.xyz + (srcColor_57 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_56;
  highp vec4 tmpvar_58;
  tmpvar_58.xyz = colorBlendLightMap_10;
  tmpvar_58.w = _BloomIntensity;
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_19))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_19))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_19))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_19))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_19))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_19))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_EmissionMask, tmpvar_22).xyz;
  emissionTex_3 = tmpvar_23;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_24;
    tmpvar_24 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_24;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_25);
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_4;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_4;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 - (2.0 * (
    dot (worldNorm_7, tmpvar_26)
   * worldNorm_7)));
  R_6 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_30.x;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_29);
  mc_5 = (mc_5 * (tmpvar_31.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_32 * worldNorm_9);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_9, tmpvar_33)
   * worldNorm_9)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_37.x;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_36);
  mc_6 = (mc_6 * (tmpvar_38.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_39 = texture2D (_SpecularMap, P_40);
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_39 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_43;
  tmpvar_43 = clamp ((float(
    (tmpvar_42 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_43);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_3 = tmpvar_45;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_10;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_10;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_26 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_EmissionMask, tmpvar_29).xyz;
  emissionTex_3 = tmpvar_30;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_31;
    tmpvar_31 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_31;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_32);
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_4;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_33;
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_4;
  tmpvar_35.w = _BloomIntensity;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30.y = 0.5;
  tmpvar_30.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
  highp float tmpvar_32;
  tmpvar_32 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_31 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp)) + (tmpvar_32 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_38 * worldNorm_8);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_8, tmpvar_39)
   * worldNorm_8)));
  R_6 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_43.x;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_42);
  mc_5 = (mc_5 * (tmpvar_44.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_3 = tmpvar_46;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_9;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_9;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
  highp float tmpvar_33;
  tmpvar_33 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_32 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp)) + (tmpvar_33 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_39 * worldNorm_9);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_9, tmpvar_40)
   * worldNorm_9)));
  R_7 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_44.x;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_43);
  mc_6 = (mc_6 * (tmpvar_45.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_46 = texture2D (_SpecularMap, P_47);
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_46 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_50;
  tmpvar_50 = clamp ((float(
    (tmpvar_49 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_50);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_51;
  tmpvar_51 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_EmissionMask, tmpvar_51).xyz;
  emissionTex_3 = tmpvar_52;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_53;
    tmpvar_53 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_53;
  };
  mediump vec3 tmpvar_54;
  tmpvar_54 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_54);
  mediump vec3 tmpvar_55;
  mediump vec3 srcColor_56;
  srcColor_56 = colorBlendLightMap_10;
  tmpvar_55 = (xlv_COLOR1.xyz + (srcColor_56 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_55;
  highp vec4 tmpvar_57;
  tmpvar_57.xyz = colorBlendLightMap_10;
  tmpvar_57.w = _BloomIntensity;
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_EmissionMask, tmpvar_25).xyz;
  emissionTex_3 = tmpvar_26;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_27;
    tmpvar_27 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_27;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_28);
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_4;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_4;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_EmissionMask, tmpvar_25).xyz;
  emissionTex_3 = tmpvar_26;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_27;
    tmpvar_27 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_27;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_28);
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_4;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_4;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_EmissionMask, tmpvar_25).xyz;
  emissionTex_3 = tmpvar_26;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_27;
    tmpvar_27 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_27;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_28);
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_4;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_4;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_28;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_7, tmpvar_29)
   * worldNorm_7)));
  R_6 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_33.x;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_32);
  mc_5 = (mc_5 * (tmpvar_34.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_35;
  tmpvar_35 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_36;
  tmpvar_36 = texture2D (_EmissionMask, tmpvar_35).xyz;
  emissionTex_3 = tmpvar_36;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_37;
    tmpvar_37 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_37;
  };
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_38);
  mediump vec3 tmpvar_39;
  mediump vec3 srcColor_40;
  srcColor_40 = colorBlendLightMap_8;
  tmpvar_39 = (xlv_COLOR1.xyz + (srcColor_40 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_39;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = colorBlendLightMap_8;
  tmpvar_41.w = _BloomIntensity;
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_28;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_7, tmpvar_29)
   * worldNorm_7)));
  R_6 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_33.x;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_32);
  mc_5 = (mc_5 * (tmpvar_34.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_35;
  tmpvar_35 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_36;
  tmpvar_36 = texture2D (_EmissionMask, tmpvar_35).xyz;
  emissionTex_3 = tmpvar_36;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_37;
    tmpvar_37 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_37;
  };
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_38);
  mediump vec3 tmpvar_39;
  mediump vec3 srcColor_40;
  srcColor_40 = colorBlendLightMap_8;
  tmpvar_39 = (xlv_COLOR1.xyz + (srcColor_40 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_39;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = colorBlendLightMap_8;
  tmpvar_41.w = _BloomIntensity;
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_28;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_7, tmpvar_29)
   * worldNorm_7)));
  R_6 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_33.x;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_32);
  mc_5 = (mc_5 * (tmpvar_34.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_35;
  tmpvar_35 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_36;
  tmpvar_36 = texture2D (_EmissionMask, tmpvar_35).xyz;
  emissionTex_3 = tmpvar_36;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_37;
    tmpvar_37 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_37;
  };
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_38);
  mediump vec3 tmpvar_39;
  mediump vec3 srcColor_40;
  srcColor_40 = colorBlendLightMap_8;
  tmpvar_39 = (xlv_COLOR1.xyz + (srcColor_40 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_39;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = colorBlendLightMap_8;
  tmpvar_41.w = _BloomIntensity;
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_35 * worldNorm_9);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_9, tmpvar_36)
   * worldNorm_9)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_6 = (mc_6 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_42 = texture2D (_SpecularMap, P_43);
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_46;
  tmpvar_46 = clamp ((float(
    (tmpvar_45 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_46);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_10;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_10;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_35 * worldNorm_9);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_9, tmpvar_36)
   * worldNorm_9)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_6 = (mc_6 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_42 = texture2D (_SpecularMap, P_43);
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_46;
  tmpvar_46 = clamp ((float(
    (tmpvar_45 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_46);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_10;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_10;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_35 * worldNorm_9);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_9, tmpvar_36)
   * worldNorm_9)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_6 = (mc_6 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_42 = texture2D (_SpecularMap, P_43);
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_46;
  tmpvar_46 = clamp ((float(
    (tmpvar_45 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_46);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_10;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_10;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_4;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_4;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_4;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_4;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_4;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_4;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_41 * worldNorm_8);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_8, tmpvar_42)
   * worldNorm_8)));
  R_6 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_5 = (mc_5 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_9;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_9;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_41 * worldNorm_8);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_8, tmpvar_42)
   * worldNorm_8)));
  R_6 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_5 = (mc_5 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_9;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_9;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_41 * worldNorm_8);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_8, tmpvar_42)
   * worldNorm_8)));
  R_6 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_5 = (mc_5 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_9;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_9;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  highp vec2 screenCoord_29;
  screenCoord_29 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_30;
  shadow_30 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_29);
    shadow_30 = tmpvar_31.x;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_32, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.y = 0.5;
  tmpvar_34.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightmapColorChange, tmpvar_34);
  highp float tmpvar_36;
  tmpvar_36 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_35 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_32, vec3(_LightmapColorLerp)) + (tmpvar_36 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_30))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = unity_MatrixV[0].xyz;
  tmpvar_42[1] = unity_MatrixV[1].xyz;
  tmpvar_42[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_42 * worldNorm_9);
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_43 - (2.0 * (
    dot (worldNorm_9, tmpvar_43)
   * worldNorm_9)));
  R_7 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = ((tmpvar_45.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_47.x;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MatCap, tmpvar_46);
  mc_6 = (mc_6 * (tmpvar_48.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = ((tmpvar_46 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_49 = texture2D (_SpecularMap, P_50);
  highp vec4 tmpvar_51;
  tmpvar_51 = (tmpvar_49 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((float(
    (tmpvar_52 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_53);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_54;
  tmpvar_54 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_EmissionMask, tmpvar_54).xyz;
  emissionTex_3 = tmpvar_55;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_56;
    tmpvar_56 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_56;
  };
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_57);
  mediump vec3 tmpvar_58;
  mediump vec3 srcColor_59;
  srcColor_59 = colorBlendLightMap_10;
  tmpvar_58 = (xlv_COLOR1.xyz + (srcColor_59 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_58;
  highp vec4 tmpvar_60;
  tmpvar_60.xyz = colorBlendLightMap_10;
  tmpvar_60.w = _BloomIntensity;
  tmpvar_1 = tmpvar_60;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  highp vec2 screenCoord_29;
  screenCoord_29 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_30;
  shadow_30 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_29);
    shadow_30 = tmpvar_31.x;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_32, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.y = 0.5;
  tmpvar_34.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightmapColorChange, tmpvar_34);
  highp float tmpvar_36;
  tmpvar_36 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_35 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_32, vec3(_LightmapColorLerp)) + (tmpvar_36 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_30))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = unity_MatrixV[0].xyz;
  tmpvar_42[1] = unity_MatrixV[1].xyz;
  tmpvar_42[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_42 * worldNorm_9);
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_43 - (2.0 * (
    dot (worldNorm_9, tmpvar_43)
   * worldNorm_9)));
  R_7 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = ((tmpvar_45.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_47.x;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MatCap, tmpvar_46);
  mc_6 = (mc_6 * (tmpvar_48.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = ((tmpvar_46 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_49 = texture2D (_SpecularMap, P_50);
  highp vec4 tmpvar_51;
  tmpvar_51 = (tmpvar_49 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((float(
    (tmpvar_52 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_53);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_54;
  tmpvar_54 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_EmissionMask, tmpvar_54).xyz;
  emissionTex_3 = tmpvar_55;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_56;
    tmpvar_56 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_56;
  };
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_57);
  mediump vec3 tmpvar_58;
  mediump vec3 srcColor_59;
  srcColor_59 = colorBlendLightMap_10;
  tmpvar_58 = (xlv_COLOR1.xyz + (srcColor_59 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_58;
  highp vec4 tmpvar_60;
  tmpvar_60.xyz = colorBlendLightMap_10;
  tmpvar_60.w = _BloomIntensity;
  tmpvar_1 = tmpvar_60;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  highp vec2 screenCoord_29;
  screenCoord_29 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_30;
  shadow_30 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_29);
    shadow_30 = tmpvar_31.x;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_32, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.y = 0.5;
  tmpvar_34.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightmapColorChange, tmpvar_34);
  highp float tmpvar_36;
  tmpvar_36 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_35 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_32, vec3(_LightmapColorLerp)) + (tmpvar_36 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_30))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = unity_MatrixV[0].xyz;
  tmpvar_42[1] = unity_MatrixV[1].xyz;
  tmpvar_42[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_42 * worldNorm_9);
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_43 - (2.0 * (
    dot (worldNorm_9, tmpvar_43)
   * worldNorm_9)));
  R_7 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = ((tmpvar_45.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_47.x;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MatCap, tmpvar_46);
  mc_6 = (mc_6 * (tmpvar_48.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = ((tmpvar_46 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_49 = texture2D (_SpecularMap, P_50);
  highp vec4 tmpvar_51;
  tmpvar_51 = (tmpvar_49 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((float(
    (tmpvar_52 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_53);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_54;
  tmpvar_54 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_EmissionMask, tmpvar_54).xyz;
  emissionTex_3 = tmpvar_55;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_56;
    tmpvar_56 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_56;
  };
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_57);
  mediump vec3 tmpvar_58;
  mediump vec3 srcColor_59;
  srcColor_59 = colorBlendLightMap_10;
  tmpvar_58 = (xlv_COLOR1.xyz + (srcColor_59 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_58;
  highp vec4 tmpvar_60;
  tmpvar_60.xyz = colorBlendLightMap_10;
  tmpvar_60.w = _BloomIntensity;
  tmpvar_1 = tmpvar_60;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_EmissionMask, tmpvar_25).xyz;
  emissionTex_3 = tmpvar_26;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_27;
    tmpvar_27 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_27;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_28);
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_4;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_4;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_EmissionMask, tmpvar_25).xyz;
  emissionTex_3 = tmpvar_26;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_27;
    tmpvar_27 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_27;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_28);
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_4;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_4;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_6.w = tmpvar_18.w;
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  lmtex_6.xyz = (unity_Lightmap_HDR.x * color_19.xyz);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_20;
  highp vec2 screenCoord_21;
  screenCoord_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_22;
  shadow_22 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_21);
    shadow_22 = tmpvar_23.x;
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_22))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_EmissionMask, tmpvar_25).xyz;
  emissionTex_3 = tmpvar_26;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_27;
    tmpvar_27 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_27;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_28);
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_4;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_4;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_28;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_7, tmpvar_29)
   * worldNorm_7)));
  R_6 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_33.x;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_32);
  mc_5 = (mc_5 * (tmpvar_34.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_35;
  tmpvar_35 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_36;
  tmpvar_36 = texture2D (_EmissionMask, tmpvar_35).xyz;
  emissionTex_3 = tmpvar_36;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_37;
    tmpvar_37 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_37;
  };
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_38);
  mediump vec3 tmpvar_39;
  mediump vec3 srcColor_40;
  srcColor_40 = colorBlendLightMap_8;
  tmpvar_39 = (xlv_COLOR1.xyz + (srcColor_40 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_39;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = colorBlendLightMap_8;
  tmpvar_41.w = _BloomIntensity;
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_28;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_7, tmpvar_29)
   * worldNorm_7)));
  R_6 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_33.x;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_32);
  mc_5 = (mc_5 * (tmpvar_34.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_35;
  tmpvar_35 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_36;
  tmpvar_36 = texture2D (_EmissionMask, tmpvar_35).xyz;
  emissionTex_3 = tmpvar_36;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_37;
    tmpvar_37 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_37;
  };
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_38);
  mediump vec3 tmpvar_39;
  mediump vec3 srcColor_40;
  srcColor_40 = colorBlendLightMap_8;
  tmpvar_39 = (xlv_COLOR1.xyz + (srcColor_40 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_39;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = colorBlendLightMap_8;
  tmpvar_41.w = _BloomIntensity;
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_22.w;
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_23.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_26))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_28;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_7, tmpvar_29)
   * worldNorm_7)));
  R_6 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_33.x;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_32);
  mc_5 = (mc_5 * (tmpvar_34.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_35;
  tmpvar_35 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_36;
  tmpvar_36 = texture2D (_EmissionMask, tmpvar_35).xyz;
  emissionTex_3 = tmpvar_36;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_37;
    tmpvar_37 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_37;
  };
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_38);
  mediump vec3 tmpvar_39;
  mediump vec3 srcColor_40;
  srcColor_40 = colorBlendLightMap_8;
  tmpvar_39 = (xlv_COLOR1.xyz + (srcColor_40 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_39;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = colorBlendLightMap_8;
  tmpvar_41.w = _BloomIntensity;
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_35 * worldNorm_9);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_9, tmpvar_36)
   * worldNorm_9)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_6 = (mc_6 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_42 = texture2D (_SpecularMap, P_43);
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_46;
  tmpvar_46 = clamp ((float(
    (tmpvar_45 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_46);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_10;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_10;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_35 * worldNorm_9);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_9, tmpvar_36)
   * worldNorm_9)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_6 = (mc_6 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_42 = texture2D (_SpecularMap, P_43);
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_46;
  tmpvar_46 = clamp ((float(
    (tmpvar_45 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_46);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_10;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_10;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_12.w = tmpvar_24.w;
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  lmtex_12.xyz = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_35 * worldNorm_9);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_9, tmpvar_36)
   * worldNorm_9)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_40.x;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_39);
  mc_6 = (mc_6 * (tmpvar_41.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_42 = texture2D (_SpecularMap, P_43);
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_46;
  tmpvar_46 = clamp ((float(
    (tmpvar_45 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_46);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_10;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_10;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_4;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_4;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_4;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_4;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_20.w;
  lowp vec4 color_21;
  color_21 = tmpvar_20;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_21.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
  highp float tmpvar_30;
  tmpvar_30 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_29 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp)) + (tmpvar_30 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_24))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_EmissionMask, tmpvar_32).xyz;
  emissionTex_3 = tmpvar_33;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_34;
    tmpvar_34 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_34;
  };
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_35);
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_4;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_36;
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_4;
  tmpvar_38.w = _BloomIntensity;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_41 * worldNorm_8);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_8, tmpvar_42)
   * worldNorm_8)));
  R_6 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_5 = (mc_5 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_9;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_9;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_41 * worldNorm_8);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_8, tmpvar_42)
   * worldNorm_8)));
  R_6 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_5 = (mc_5 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_9;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_9;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_13.w = tmpvar_25.w;
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  lmtex_13.xyz = (unity_Lightmap_HDR.x * color_26.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_41 * worldNorm_8);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_8, tmpvar_42)
   * worldNorm_8)));
  R_6 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_5 = (mc_5 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_48;
  tmpvar_48 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_49;
  tmpvar_49 = texture2D (_EmissionMask, tmpvar_48).xyz;
  emissionTex_3 = tmpvar_49;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_50;
    tmpvar_50 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_50;
  };
  mediump vec3 tmpvar_51;
  tmpvar_51 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_51);
  mediump vec3 tmpvar_52;
  mediump vec3 srcColor_53;
  srcColor_53 = colorBlendLightMap_9;
  tmpvar_52 = (xlv_COLOR1.xyz + (srcColor_53 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_52;
  highp vec4 tmpvar_54;
  tmpvar_54.xyz = colorBlendLightMap_9;
  tmpvar_54.w = _BloomIntensity;
  tmpvar_1 = tmpvar_54;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  highp vec2 screenCoord_29;
  screenCoord_29 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_30;
  shadow_30 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_29);
    shadow_30 = tmpvar_31.x;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_32, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.y = 0.5;
  tmpvar_34.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightmapColorChange, tmpvar_34);
  highp float tmpvar_36;
  tmpvar_36 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_35 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_32, vec3(_LightmapColorLerp)) + (tmpvar_36 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_30))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = unity_MatrixV[0].xyz;
  tmpvar_42[1] = unity_MatrixV[1].xyz;
  tmpvar_42[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_42 * worldNorm_9);
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_43 - (2.0 * (
    dot (worldNorm_9, tmpvar_43)
   * worldNorm_9)));
  R_7 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = ((tmpvar_45.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_47.x;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MatCap, tmpvar_46);
  mc_6 = (mc_6 * (tmpvar_48.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = ((tmpvar_46 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_49 = texture2D (_SpecularMap, P_50);
  highp vec4 tmpvar_51;
  tmpvar_51 = (tmpvar_49 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((float(
    (tmpvar_52 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_53);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_54;
  tmpvar_54 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_EmissionMask, tmpvar_54).xyz;
  emissionTex_3 = tmpvar_55;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_56;
    tmpvar_56 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_56;
  };
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_57);
  mediump vec3 tmpvar_58;
  mediump vec3 srcColor_59;
  srcColor_59 = colorBlendLightMap_10;
  tmpvar_58 = (xlv_COLOR1.xyz + (srcColor_59 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_58;
  highp vec4 tmpvar_60;
  tmpvar_60.xyz = colorBlendLightMap_10;
  tmpvar_60.w = _BloomIntensity;
  tmpvar_1 = tmpvar_60;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  highp vec2 screenCoord_29;
  screenCoord_29 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_30;
  shadow_30 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_29);
    shadow_30 = tmpvar_31.x;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_32, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.y = 0.5;
  tmpvar_34.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightmapColorChange, tmpvar_34);
  highp float tmpvar_36;
  tmpvar_36 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_35 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_32, vec3(_LightmapColorLerp)) + (tmpvar_36 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_30))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = unity_MatrixV[0].xyz;
  tmpvar_42[1] = unity_MatrixV[1].xyz;
  tmpvar_42[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_42 * worldNorm_9);
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_43 - (2.0 * (
    dot (worldNorm_9, tmpvar_43)
   * worldNorm_9)));
  R_7 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = ((tmpvar_45.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_47.x;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MatCap, tmpvar_46);
  mc_6 = (mc_6 * (tmpvar_48.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = ((tmpvar_46 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_49 = texture2D (_SpecularMap, P_50);
  highp vec4 tmpvar_51;
  tmpvar_51 = (tmpvar_49 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((float(
    (tmpvar_52 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_53);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_54;
  tmpvar_54 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_EmissionMask, tmpvar_54).xyz;
  emissionTex_3 = tmpvar_55;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_56;
    tmpvar_56 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_56;
  };
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_57);
  mediump vec3 tmpvar_58;
  mediump vec3 srcColor_59;
  srcColor_59 = colorBlendLightMap_10;
  tmpvar_58 = (xlv_COLOR1.xyz + (srcColor_59 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_58;
  highp vec4 tmpvar_60;
  tmpvar_60.xyz = colorBlendLightMap_10;
  tmpvar_60.w = _BloomIntensity;
  tmpvar_1 = tmpvar_60;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_26.w;
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_27.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_28;
  highp vec2 screenCoord_29;
  screenCoord_29 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_30;
  shadow_30 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_29);
    shadow_30 = tmpvar_31.x;
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_32, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.y = 0.5;
  tmpvar_34.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightmapColorChange, tmpvar_34);
  highp float tmpvar_36;
  tmpvar_36 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_35 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_32, vec3(_LightmapColorLerp)) + (tmpvar_36 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_30))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = unity_MatrixV[0].xyz;
  tmpvar_42[1] = unity_MatrixV[1].xyz;
  tmpvar_42[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_42 * worldNorm_9);
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_44;
  tmpvar_44 = (tmpvar_43 - (2.0 * (
    dot (worldNorm_9, tmpvar_43)
   * worldNorm_9)));
  R_7 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = ((tmpvar_45.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_47.x;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MatCap, tmpvar_46);
  mc_6 = (mc_6 * (tmpvar_48.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = ((tmpvar_46 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_49 = texture2D (_SpecularMap, P_50);
  highp vec4 tmpvar_51;
  tmpvar_51 = (tmpvar_49 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((float(
    (tmpvar_52 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_53);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_54;
  tmpvar_54 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_EmissionMask, tmpvar_54).xyz;
  emissionTex_3 = tmpvar_55;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_56;
    tmpvar_56 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_56;
  };
  mediump vec3 tmpvar_57;
  tmpvar_57 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_57);
  mediump vec3 tmpvar_58;
  mediump vec3 srcColor_59;
  srcColor_59 = colorBlendLightMap_10;
  tmpvar_58 = (xlv_COLOR1.xyz + (srcColor_59 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_58;
  highp vec4 tmpvar_60;
  tmpvar_60.xyz = colorBlendLightMap_10;
  tmpvar_60.w = _BloomIntensity;
  tmpvar_1 = tmpvar_60;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_EmissionMask, tmpvar_24).xyz;
  emissionTex_3 = tmpvar_25;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_26;
    tmpvar_26 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_26;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_27);
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_4;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_4;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_EmissionMask, tmpvar_24).xyz;
  emissionTex_3 = tmpvar_25;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_26;
    tmpvar_26 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_26;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_27);
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_4;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_4;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_EmissionMask, tmpvar_24).xyz;
  emissionTex_3 = tmpvar_25;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_26;
    tmpvar_26 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_26;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_27);
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_4;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_4;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_27;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_7, tmpvar_28)
   * worldNorm_7)));
  R_6 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_32.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_31);
  mc_5 = (mc_5 * (tmpvar_33.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_34;
  tmpvar_34 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_35;
  tmpvar_35 = texture2D (_EmissionMask, tmpvar_34).xyz;
  emissionTex_3 = tmpvar_35;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_36;
    tmpvar_36 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_36;
  };
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_37);
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = _BloomIntensity;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_27;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_7, tmpvar_28)
   * worldNorm_7)));
  R_6 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_32.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_31);
  mc_5 = (mc_5 * (tmpvar_33.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_34;
  tmpvar_34 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_35;
  tmpvar_35 = texture2D (_EmissionMask, tmpvar_34).xyz;
  emissionTex_3 = tmpvar_35;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_36;
    tmpvar_36 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_36;
  };
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_37);
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = _BloomIntensity;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_27;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_7, tmpvar_28)
   * worldNorm_7)));
  R_6 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_32.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_31);
  mc_5 = (mc_5 * (tmpvar_33.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_34;
  tmpvar_34 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_35;
  tmpvar_35 = texture2D (_EmissionMask, tmpvar_34).xyz;
  emissionTex_3 = tmpvar_35;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_36;
    tmpvar_36 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_36;
  };
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_37);
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = _BloomIntensity;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_34 * worldNorm_9);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_9, tmpvar_35)
   * worldNorm_9)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_39.x;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_38);
  mc_6 = (mc_6 * (tmpvar_40.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_41;
  highp vec2 P_42;
  P_42 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_41 = texture2D (_SpecularMap, P_42);
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_45;
  tmpvar_45 = clamp ((float(
    (tmpvar_44 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_45);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_10;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_10;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_34 * worldNorm_9);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_9, tmpvar_35)
   * worldNorm_9)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_39.x;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_38);
  mc_6 = (mc_6 * (tmpvar_40.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_41;
  highp vec2 P_42;
  P_42 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_41 = texture2D (_SpecularMap, P_42);
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_45;
  tmpvar_45 = clamp ((float(
    (tmpvar_44 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_45);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_10;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_10;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_34 * worldNorm_9);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_9, tmpvar_35)
   * worldNorm_9)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_39.x;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_38);
  mc_6 = (mc_6 * (tmpvar_40.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_41;
  highp vec2 P_42;
  P_42 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_41 = texture2D (_SpecularMap, P_42);
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_45;
  tmpvar_45 = clamp ((float(
    (tmpvar_44 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_45);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_10;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_10;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_4;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_4;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_4;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_4;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 tmpvar_2;
  highp vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3 = _glesMultiTexCoord1.xy;
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase.xyz + (h_21 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_23 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  tmpvar_13 = tmpvar_15;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_4;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_4;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_40 * worldNorm_8);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_8, tmpvar_41)
   * worldNorm_8)));
  R_6 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_5 = (mc_5 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_9;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_9;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_40 * worldNorm_8);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_8, tmpvar_41)
   * worldNorm_8)));
  R_6 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_5 = (mc_5 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_9;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_9;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_40 * worldNorm_8);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_8, tmpvar_41)
   * worldNorm_8)));
  R_6 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_5 = (mc_5 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_9;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_9;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_41 * worldNorm_9);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_9, tmpvar_42)
   * worldNorm_9)));
  R_7 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_6 = (mc_6 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_48 = texture2D (_SpecularMap, P_49);
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_52;
  tmpvar_52 = clamp ((float(
    (tmpvar_51 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_52);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_53;
  tmpvar_53 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_EmissionMask, tmpvar_53).xyz;
  emissionTex_3 = tmpvar_54;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_55;
    tmpvar_55 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_55;
  };
  mediump vec3 tmpvar_56;
  tmpvar_56 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_56);
  mediump vec3 tmpvar_57;
  mediump vec3 srcColor_58;
  srcColor_58 = colorBlendLightMap_10;
  tmpvar_57 = (xlv_COLOR1.xyz + (srcColor_58 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_57;
  highp vec4 tmpvar_59;
  tmpvar_59.xyz = colorBlendLightMap_10;
  tmpvar_59.w = _BloomIntensity;
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_41 * worldNorm_9);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_9, tmpvar_42)
   * worldNorm_9)));
  R_7 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_6 = (mc_6 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_48 = texture2D (_SpecularMap, P_49);
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_52;
  tmpvar_52 = clamp ((float(
    (tmpvar_51 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_52);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_53;
  tmpvar_53 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_EmissionMask, tmpvar_53).xyz;
  emissionTex_3 = tmpvar_54;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_55;
    tmpvar_55 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_55;
  };
  mediump vec3 tmpvar_56;
  tmpvar_56 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_56);
  mediump vec3 tmpvar_57;
  mediump vec3 srcColor_58;
  srcColor_58 = colorBlendLightMap_10;
  tmpvar_57 = (xlv_COLOR1.xyz + (srcColor_58 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_57;
  highp vec4 tmpvar_59;
  tmpvar_59.xyz = colorBlendLightMap_10;
  tmpvar_59.w = _BloomIntensity;
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase.xyz + (h_30 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_32 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  tmpvar_22 = tmpvar_24;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_41 * worldNorm_9);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_9, tmpvar_42)
   * worldNorm_9)));
  R_7 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_6 = (mc_6 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_48 = texture2D (_SpecularMap, P_49);
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_52;
  tmpvar_52 = clamp ((float(
    (tmpvar_51 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_52);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_53;
  tmpvar_53 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_EmissionMask, tmpvar_53).xyz;
  emissionTex_3 = tmpvar_54;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_55;
    tmpvar_55 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_55;
  };
  mediump vec3 tmpvar_56;
  tmpvar_56 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_56);
  mediump vec3 tmpvar_57;
  mediump vec3 srcColor_58;
  srcColor_58 = colorBlendLightMap_10;
  tmpvar_57 = (xlv_COLOR1.xyz + (srcColor_58 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_57;
  highp vec4 tmpvar_59;
  tmpvar_59.xyz = colorBlendLightMap_10;
  tmpvar_59.w = _BloomIntensity;
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_EmissionMask, tmpvar_24).xyz;
  emissionTex_3 = tmpvar_25;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_26;
    tmpvar_26 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_26;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_27);
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_4;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_4;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_EmissionMask, tmpvar_24).xyz;
  emissionTex_3 = tmpvar_25;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_26;
    tmpvar_26 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_26;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_27);
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_4;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_4;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _EmissionMask;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  mediump vec4 tex_C_Color_5;
  mediump vec4 lmtex_6;
  highp float THRESHOLDS_MATRIX_7[16];
  THRESHOLDS_MATRIX_7[0] = 0.05882353;
  THRESHOLDS_MATRIX_7[1] = 0.5294118;
  THRESHOLDS_MATRIX_7[2] = 0.1764706;
  THRESHOLDS_MATRIX_7[3] = 0.6470588;
  THRESHOLDS_MATRIX_7[4] = 0.7647059;
  THRESHOLDS_MATRIX_7[5] = 0.2941177;
  THRESHOLDS_MATRIX_7[6] = 0.8823529;
  THRESHOLDS_MATRIX_7[7] = 0.4117647;
  THRESHOLDS_MATRIX_7[8] = 0.2352941;
  THRESHOLDS_MATRIX_7[9] = 0.7058824;
  THRESHOLDS_MATRIX_7[10] = 0.1176471;
  THRESHOLDS_MATRIX_7[11] = 0.5882353;
  THRESHOLDS_MATRIX_7[12] = 0.9411765;
  THRESHOLDS_MATRIX_7[13] = 0.4705882;
  THRESHOLDS_MATRIX_7[14] = 0.8235294;
  THRESHOLDS_MATRIX_7[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_8;
    tmpvar_8 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_8.x / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (tmpvar_8.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = (_Transparent - THRESHOLDS_MATRIX_7[int((
      (tmpvar_11 * 4.0)
     + tmpvar_14))]);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_16;
  vpos_16 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_16.y = ((fract(vpos_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, vpos_16).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_5 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_5.xyz * _Color.xyz) * ((
    ((lmtex_6.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_6.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_21))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_EmissionMask, tmpvar_24).xyz;
  emissionTex_3 = tmpvar_25;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_26;
    tmpvar_26 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_26;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_27);
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_4;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_4;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_27;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_7, tmpvar_28)
   * worldNorm_7)));
  R_6 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_32.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_31);
  mc_5 = (mc_5 * (tmpvar_33.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_34;
  tmpvar_34 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_35;
  tmpvar_35 = texture2D (_EmissionMask, tmpvar_34).xyz;
  emissionTex_3 = tmpvar_35;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_36;
    tmpvar_36 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_36;
  };
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_37);
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = _BloomIntensity;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_27;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_7, tmpvar_28)
   * worldNorm_7)));
  R_6 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_32.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_31);
  mc_5 = (mc_5 * (tmpvar_33.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_34;
  tmpvar_34 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_35;
  tmpvar_35 = texture2D (_EmissionMask, tmpvar_34).xyz;
  emissionTex_3 = tmpvar_35;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_36;
    tmpvar_36 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_36;
  };
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_37);
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = _BloomIntensity;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _MatCap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  highp vec3 worldNorm_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp float THRESHOLDS_MATRIX_11[16];
  THRESHOLDS_MATRIX_11[0] = 0.05882353;
  THRESHOLDS_MATRIX_11[1] = 0.5294118;
  THRESHOLDS_MATRIX_11[2] = 0.1764706;
  THRESHOLDS_MATRIX_11[3] = 0.6470588;
  THRESHOLDS_MATRIX_11[4] = 0.7647059;
  THRESHOLDS_MATRIX_11[5] = 0.2941177;
  THRESHOLDS_MATRIX_11[6] = 0.8823529;
  THRESHOLDS_MATRIX_11[7] = 0.4117647;
  THRESHOLDS_MATRIX_11[8] = 0.2352941;
  THRESHOLDS_MATRIX_11[9] = 0.7058824;
  THRESHOLDS_MATRIX_11[10] = 0.1176471;
  THRESHOLDS_MATRIX_11[11] = 0.5882353;
  THRESHOLDS_MATRIX_11[12] = 0.9411765;
  THRESHOLDS_MATRIX_11[13] = 0.4705882;
  THRESHOLDS_MATRIX_11[14] = 0.8235294;
  THRESHOLDS_MATRIX_11[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_13;
    tmpvar_13 = (tmpvar_12.x / 4.0);
    highp float tmpvar_14;
    tmpvar_14 = (fract(abs(tmpvar_13)) * 4.0);
    highp float tmpvar_15;
    if ((tmpvar_13 >= 0.0)) {
      tmpvar_15 = tmpvar_14;
    } else {
      tmpvar_15 = -(tmpvar_14);
    };
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_12.y / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float x_19;
    x_19 = (_Transparent - THRESHOLDS_MATRIX_11[int((
      (tmpvar_15 * 4.0)
     + tmpvar_18))]);
    if ((x_19 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_20;
  vpos_20 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_20.y = ((fract(vpos_20.y) * 0.0625) + unity_LODFade.y);
  lowp float x_21;
  x_21 = (texture2D (_DitherMaskLOD2D, vpos_20).w - 0.5);
  if ((x_21 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_25))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_27;
  worldNorm_7 = xlv_TEXCOORD5;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_7, tmpvar_28)
   * worldNorm_7)));
  R_6 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_7, R_6, vec3(_MetalRef));
  worldNorm_7 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_8;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_32.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_31);
  mc_5 = (mc_5 * (tmpvar_33.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_8 = mix (colorBlendLightMap_8, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_34;
  tmpvar_34 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_35;
  tmpvar_35 = texture2D (_EmissionMask, tmpvar_34).xyz;
  emissionTex_3 = tmpvar_35;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_36;
    tmpvar_36 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_36;
  };
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + tmpvar_37);
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = _BloomIntensity;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_34 * worldNorm_9);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_9, tmpvar_35)
   * worldNorm_9)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_39.x;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_38);
  mc_6 = (mc_6 * (tmpvar_40.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_41;
  highp vec2 P_42;
  P_42 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_41 = texture2D (_SpecularMap, P_42);
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_45;
  tmpvar_45 = clamp ((float(
    (tmpvar_44 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_45);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_10;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_10;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_34 * worldNorm_9);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_9, tmpvar_35)
   * worldNorm_9)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_39.x;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_38);
  mc_6 = (mc_6 * (tmpvar_40.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_41;
  highp vec2 P_42;
  P_42 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_41 = texture2D (_SpecularMap, P_42);
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_45;
  tmpvar_45 = clamp ((float(
    (tmpvar_44 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_45);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_10;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_10;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  mediump vec4 tex_C_Color_11;
  mediump vec4 lmtex_12;
  highp float THRESHOLDS_MATRIX_13[16];
  THRESHOLDS_MATRIX_13[0] = 0.05882353;
  THRESHOLDS_MATRIX_13[1] = 0.5294118;
  THRESHOLDS_MATRIX_13[2] = 0.1764706;
  THRESHOLDS_MATRIX_13[3] = 0.6470588;
  THRESHOLDS_MATRIX_13[4] = 0.7647059;
  THRESHOLDS_MATRIX_13[5] = 0.2941177;
  THRESHOLDS_MATRIX_13[6] = 0.8823529;
  THRESHOLDS_MATRIX_13[7] = 0.4117647;
  THRESHOLDS_MATRIX_13[8] = 0.2352941;
  THRESHOLDS_MATRIX_13[9] = 0.7058824;
  THRESHOLDS_MATRIX_13[10] = 0.1176471;
  THRESHOLDS_MATRIX_13[11] = 0.5882353;
  THRESHOLDS_MATRIX_13[12] = 0.9411765;
  THRESHOLDS_MATRIX_13[13] = 0.4705882;
  THRESHOLDS_MATRIX_13[14] = 0.8235294;
  THRESHOLDS_MATRIX_13[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_15;
    tmpvar_15 = (tmpvar_14.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_14.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float x_21;
    x_21 = (_Transparent - THRESHOLDS_MATRIX_13[int((
      (tmpvar_17 * 4.0)
     + tmpvar_20))]);
    if ((x_21 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_22;
  vpos_22 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_22.y = ((fract(vpos_22.y) * 0.0625) + unity_LODFade.y);
  lowp float x_23;
  x_23 = (texture2D (_DitherMaskLOD2D, vpos_22).w - 0.5);
  if ((x_23 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_12 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_11 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_11.xyz * _Color.xyz) * ((
    ((lmtex_12.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_12.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_27))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_34 * worldNorm_9);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_9, tmpvar_35)
   * worldNorm_9)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_39.x;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_38);
  mc_6 = (mc_6 * (tmpvar_40.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_41;
  highp vec2 P_42;
  P_42 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_41 = texture2D (_SpecularMap, P_42);
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = dot (lmtex_12.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_45;
  tmpvar_45 = clamp ((float(
    (tmpvar_44 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_45);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_46;
  tmpvar_46 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_47;
  tmpvar_47 = texture2D (_EmissionMask, tmpvar_46).xyz;
  emissionTex_3 = tmpvar_47;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_48;
    tmpvar_48 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_48;
  };
  mediump vec3 tmpvar_49;
  tmpvar_49 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_49);
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_10;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_10;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_4;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_4;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_4;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_4;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2 = _glesMultiTexCoord1.xy;
  tmpvar_1.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3 = _glesColor;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  tmpvar_4 = tmpvar_12;
  mediump vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_15;
  mediump float fogFactor_16;
  mediump vec3 fogColor_17;
  mediump vec3 heightFogColor_18;
  highp float HeightFogFactor_19;
  mediump vec3 atomesphereFogColor_20;
  mediump float h_21;
  highp float linearFogDensity_22;
  mediump float len_23;
  highp float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((len_23 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_22 = (tmpvar_25 * (2.0 - tmpvar_25));
  if ((len_23 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_22 = (linearFogDensity_22 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_26;
  tmpvar_26 = min (pow (linearFogDensity_22, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_22 = tmpvar_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_10.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  h_21 = (tmpvar_27 * (2.0 - tmpvar_27));
  highp vec3 tmpvar_29;
  tmpvar_29 = (_HeigtFogColBase2.xyz + (h_21 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_20 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (atomesphereFogColor_20, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_23 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_20 = tmpvar_30;
  mediump float tmpvar_31;
  mediump float r_32;
  mediump float f_33;
  mediump float u_34;
  mediump float l_35;
  mediump float fogInt_36;
  fogInt_36 = 1.0;
  highp float tmpvar_37;
  tmpvar_37 = (_HeigtFogParams2.x * tmpvar_14.y);
  highp float tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  if ((tmpvar_38 > 0.01)) {
    highp float tmpvar_39;
    tmpvar_39 = exp(-(tmpvar_37));
    fogInt_36 = ((1.0 - tmpvar_39) / tmpvar_37);
  };
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (l_35 * _HeigtFogParams2.y);
  u_34 = tmpvar_41;
  fogInt_36 = (fogInt_36 * u_34);
  mediump float tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((l_35 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  r_32 = (tmpvar_42 * (2.0 - tmpvar_42));
  r_32 = ((r_32 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_33 = ((1.0 - clamp (
    exp2(-(fogInt_36))
  , 0.0, 1.0)) * r_32);
  highp float tmpvar_44;
  tmpvar_44 = min (f_33, _HeigtFogColBase2.w);
  tmpvar_31 = tmpvar_44;
  HeightFogFactor_19 = tmpvar_31;
  highp vec3 tmpvar_45;
  tmpvar_45 = _Mihoyo_FogColor2.xyz;
  heightFogColor_18 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = ((heightFogColor_18 * HeightFogFactor_19) + ((atomesphereFogColor_20 * tmpvar_26) * (1.0 - HeightFogFactor_19)));
  fogColor_17 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = ((1.0 - tmpvar_26) * (1.0 - HeightFogFactor_19));
  fogFactor_16 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = fogColor_17;
  tmpvar_48.w = fogFactor_16;
  tmpvar_15 = tmpvar_48;
  highp vec4 tmpvar_49;
  mediump float fogFactor_50;
  mediump vec3 fogColor_51;
  mediump vec3 heightFogColor_52;
  highp float HeightFogFactor_53;
  mediump vec3 atomesphereFogColor_54;
  mediump float h_55;
  highp float linearFogDensity_56;
  mediump float len_57;
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_14, tmpvar_14));
  len_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((len_57 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_56 = (tmpvar_59 * (2.0 - tmpvar_59));
  if ((len_57 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_56 = (linearFogDensity_56 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_60;
  tmpvar_60 = min (pow (linearFogDensity_56, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_56 = tmpvar_60;
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((tmpvar_10.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  h_55 = (tmpvar_61 * (2.0 - tmpvar_61));
  highp vec3 tmpvar_63;
  tmpvar_63 = (_HeigtFogColBase3.xyz + (h_55 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_54 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = mix (atomesphereFogColor_54, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_57 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_54 = tmpvar_64;
  mediump float tmpvar_65;
  mediump float r_66;
  mediump float f_67;
  mediump float u_68;
  mediump float l_69;
  mediump float fogInt_70;
  fogInt_70 = 1.0;
  highp float tmpvar_71;
  tmpvar_71 = (_HeigtFogParams3.x * tmpvar_14.y);
  highp float tmpvar_72;
  tmpvar_72 = abs(tmpvar_71);
  if ((tmpvar_72 > 0.01)) {
    highp float tmpvar_73;
    tmpvar_73 = exp(-(tmpvar_71));
    fogInt_70 = ((1.0 - tmpvar_73) / tmpvar_71);
  };
  highp float tmpvar_74;
  tmpvar_74 = sqrt(dot (tmpvar_14, tmpvar_14));
  l_69 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (l_69 * _HeigtFogParams3.y);
  u_68 = tmpvar_75;
  fogInt_70 = (fogInt_70 * u_68);
  mediump float tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((l_69 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  r_66 = (tmpvar_76 * (2.0 - tmpvar_76));
  r_66 = ((r_66 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_67 = ((1.0 - clamp (
    exp2(-(fogInt_70))
  , 0.0, 1.0)) * r_66);
  highp float tmpvar_78;
  tmpvar_78 = min (f_67, _HeigtFogColBase3.w);
  tmpvar_65 = tmpvar_78;
  HeightFogFactor_53 = tmpvar_65;
  highp vec3 tmpvar_79;
  tmpvar_79 = _Mihoyo_FogColor3.xyz;
  heightFogColor_52 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = ((heightFogColor_52 * HeightFogFactor_53) + ((atomesphereFogColor_54 * tmpvar_60) * (1.0 - HeightFogFactor_53)));
  fogColor_51 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = ((1.0 - tmpvar_60) * (1.0 - HeightFogFactor_53));
  fogFactor_50 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82.xyz = fogColor_51;
  tmpvar_82.w = fogFactor_50;
  tmpvar_49 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (tmpvar_15, tmpvar_49, vec4(_LerpFactor));
  tmpvar_13 = tmpvar_83;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  highp vec3 colorBlendLightMap_4;
  highp float gray_5;
  mediump vec3 fc_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp float THRESHOLDS_MATRIX_9[16];
  THRESHOLDS_MATRIX_9[0] = 0.05882353;
  THRESHOLDS_MATRIX_9[1] = 0.5294118;
  THRESHOLDS_MATRIX_9[2] = 0.1764706;
  THRESHOLDS_MATRIX_9[3] = 0.6470588;
  THRESHOLDS_MATRIX_9[4] = 0.7647059;
  THRESHOLDS_MATRIX_9[5] = 0.2941177;
  THRESHOLDS_MATRIX_9[6] = 0.8823529;
  THRESHOLDS_MATRIX_9[7] = 0.4117647;
  THRESHOLDS_MATRIX_9[8] = 0.2352941;
  THRESHOLDS_MATRIX_9[9] = 0.7058824;
  THRESHOLDS_MATRIX_9[10] = 0.1176471;
  THRESHOLDS_MATRIX_9[11] = 0.5882353;
  THRESHOLDS_MATRIX_9[12] = 0.9411765;
  THRESHOLDS_MATRIX_9[13] = 0.4705882;
  THRESHOLDS_MATRIX_9[14] = 0.8235294;
  THRESHOLDS_MATRIX_9[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_10.x / 4.0);
    highp float tmpvar_12;
    tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
    highp float tmpvar_13;
    if ((tmpvar_11 >= 0.0)) {
      tmpvar_13 = tmpvar_12;
    } else {
      tmpvar_13 = -(tmpvar_12);
    };
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_10.y / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float x_17;
    x_17 = (_Transparent - THRESHOLDS_MATRIX_9[int((
      (tmpvar_13 * 4.0)
     + tmpvar_16))]);
    if ((x_17 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_18;
  vpos_18 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_18.y = ((fract(vpos_18.y) * 0.0625) + unity_LODFade.y);
  lowp float x_19;
  x_19 = (texture2D (_DitherMaskLOD2D, vpos_18).w - 0.5);
  if ((x_19 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_21;
  highp vec2 screenCoord_22;
  screenCoord_22 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_23;
  shadow_23 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_22);
    shadow_23 = tmpvar_24.x;
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_8.xyz * _ShadowColor);
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
  gray_5 = tmpvar_26;
  highp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = (gray_5 * _LightmapColorScale);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
  highp float tmpvar_29;
  tmpvar_29 = clamp ((_LightmapDarkArea - gray_5), 0.0, 1.0);
  fc_6 = (mix ((
    (tmpvar_28 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp)) + (tmpvar_29 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (fc_6 * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_23))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_4 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMask, tmpvar_31).xyz;
  emissionTex_3 = tmpvar_32;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_33;
    tmpvar_33 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_33;
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_4 = (colorBlendLightMap_4 + tmpvar_34);
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_4;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_4 = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_4;
  tmpvar_37.w = _BloomIntensity;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_40 * worldNorm_8);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_8, tmpvar_41)
   * worldNorm_8)));
  R_6 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_5 = (mc_5 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_9;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_9;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_40 * worldNorm_8);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_8, tmpvar_41)
   * worldNorm_8)));
  R_6 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_5 = (mc_5 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_9;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_9;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump float matcapMask_4;
  mediump vec3 mc_5;
  mediump vec3 R_6;
  mediump vec3 normals_7;
  highp vec3 worldNorm_8;
  highp vec3 colorBlendLightMap_9;
  highp float gray_10;
  mediump vec3 fc_11;
  mediump vec4 tex_C_Color_12;
  mediump vec4 lmtex_13;
  highp float THRESHOLDS_MATRIX_14[16];
  THRESHOLDS_MATRIX_14[0] = 0.05882353;
  THRESHOLDS_MATRIX_14[1] = 0.5294118;
  THRESHOLDS_MATRIX_14[2] = 0.1764706;
  THRESHOLDS_MATRIX_14[3] = 0.6470588;
  THRESHOLDS_MATRIX_14[4] = 0.7647059;
  THRESHOLDS_MATRIX_14[5] = 0.2941177;
  THRESHOLDS_MATRIX_14[6] = 0.8823529;
  THRESHOLDS_MATRIX_14[7] = 0.4117647;
  THRESHOLDS_MATRIX_14[8] = 0.2352941;
  THRESHOLDS_MATRIX_14[9] = 0.7058824;
  THRESHOLDS_MATRIX_14[10] = 0.1176471;
  THRESHOLDS_MATRIX_14[11] = 0.5882353;
  THRESHOLDS_MATRIX_14[12] = 0.9411765;
  THRESHOLDS_MATRIX_14[13] = 0.4705882;
  THRESHOLDS_MATRIX_14[14] = 0.8235294;
  THRESHOLDS_MATRIX_14[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_16;
    tmpvar_16 = (tmpvar_15.x / 4.0);
    highp float tmpvar_17;
    tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
    highp float tmpvar_18;
    if ((tmpvar_16 >= 0.0)) {
      tmpvar_18 = tmpvar_17;
    } else {
      tmpvar_18 = -(tmpvar_17);
    };
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_15.y / 4.0);
    highp float tmpvar_20;
    tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
    highp float tmpvar_21;
    if ((tmpvar_19 >= 0.0)) {
      tmpvar_21 = tmpvar_20;
    } else {
      tmpvar_21 = -(tmpvar_20);
    };
    highp float x_22;
    x_22 = (_Transparent - THRESHOLDS_MATRIX_14[int((
      (tmpvar_18 * 4.0)
     + tmpvar_21))]);
    if ((x_22 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_23;
  vpos_23 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_23.y = ((fract(vpos_23.y) * 0.0625) + unity_LODFade.y);
  lowp float x_24;
  x_24 = (texture2D (_DitherMaskLOD2D, vpos_23).w - 0.5);
  if ((x_24 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_13 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_12 = tmpvar_26;
  highp vec2 screenCoord_27;
  screenCoord_27 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_28;
  shadow_28 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_27);
    shadow_28 = tmpvar_29.x;
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (lmtex_13.xyz * _ShadowColor);
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec3(0.299, 0.587, 0.114));
  gray_10 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.y = 0.5;
  tmpvar_32.x = (gray_10 * _LightmapColorScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
  highp float tmpvar_34;
  tmpvar_34 = clamp ((_LightmapDarkArea - gray_10), 0.0, 1.0);
  fc_11 = (mix ((
    (tmpvar_33 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_30, vec3(_LightmapColorLerp)) + (tmpvar_34 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_12.xyz * _Color.xyz) * ((
    (fc_11 * (1.0 - (clamp (
      (lmtex_13.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_28))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_9 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_8.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_8.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD7, normals_7);
  worldNorm_8.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_40 * worldNorm_8);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_8, tmpvar_41)
   * worldNorm_8)));
  R_6 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_8, R_6, vec3(_MetalRef));
  worldNorm_8 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  mc_5 = colorBlendLightMap_9;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_4 = tmpvar_45.x;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_44);
  mc_5 = (mc_5 * (tmpvar_46.xyz * vec3(2.0, 2.0, 2.0)));
  colorBlendLightMap_9 = mix (colorBlendLightMap_9, mc_5, vec3(matcapMask_4));
  highp vec2 tmpvar_47;
  tmpvar_47 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_48;
  tmpvar_48 = texture2D (_EmissionMask, tmpvar_47).xyz;
  emissionTex_3 = tmpvar_48;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_49;
    tmpvar_49 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_49;
  };
  mediump vec3 tmpvar_50;
  tmpvar_50 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_9 = (colorBlendLightMap_9 + tmpvar_50);
  mediump vec3 tmpvar_51;
  mediump vec3 srcColor_52;
  srcColor_52 = colorBlendLightMap_9;
  tmpvar_51 = (xlv_COLOR1.xyz + (srcColor_52 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_9 = tmpvar_51;
  highp vec4 tmpvar_53;
  tmpvar_53.xyz = colorBlendLightMap_9;
  tmpvar_53.w = _BloomIntensity;
  tmpvar_1 = tmpvar_53;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_41 * worldNorm_9);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_9, tmpvar_42)
   * worldNorm_9)));
  R_7 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_6 = (mc_6 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_48 = texture2D (_SpecularMap, P_49);
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_52;
  tmpvar_52 = clamp ((float(
    (tmpvar_51 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_52);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_53;
  tmpvar_53 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_EmissionMask, tmpvar_53).xyz;
  emissionTex_3 = tmpvar_54;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_55;
    tmpvar_55 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_55;
  };
  mediump vec3 tmpvar_56;
  tmpvar_56 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_56);
  mediump vec3 tmpvar_57;
  mediump vec3 srcColor_58;
  srcColor_58 = colorBlendLightMap_10;
  tmpvar_57 = (xlv_COLOR1.xyz + (srcColor_58 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_57;
  highp vec4 tmpvar_59;
  tmpvar_59.xyz = colorBlendLightMap_10;
  tmpvar_59.w = _BloomIntensity;
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_41 * worldNorm_9);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_9, tmpvar_42)
   * worldNorm_9)));
  R_7 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_6 = (mc_6 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_48 = texture2D (_SpecularMap, P_49);
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_52;
  tmpvar_52 = clamp ((float(
    (tmpvar_51 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_52);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_53;
  tmpvar_53 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_EmissionMask, tmpvar_53).xyz;
  emissionTex_3 = tmpvar_54;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_55;
    tmpvar_55 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_55;
  };
  mediump vec3 tmpvar_56;
  tmpvar_56 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_56);
  mediump vec3 tmpvar_57;
  mediump vec3 srcColor_58;
  srcColor_58 = colorBlendLightMap_10;
  tmpvar_57 = (xlv_COLOR1.xyz + (srcColor_58 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_57;
  highp vec4 tmpvar_59;
  tmpvar_59.xyz = colorBlendLightMap_10;
  tmpvar_59.w = _BloomIntensity;
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  mediump vec4 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_24;
  mediump float fogFactor_25;
  mediump vec3 fogColor_26;
  mediump vec3 heightFogColor_27;
  highp float HeightFogFactor_28;
  mediump vec3 atomesphereFogColor_29;
  mediump float h_30;
  highp float linearFogDensity_31;
  mediump float len_32;
  highp float tmpvar_33;
  tmpvar_33 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((len_32 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_31 = (tmpvar_34 * (2.0 - tmpvar_34));
  if ((len_32 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_31 = (linearFogDensity_31 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_35;
  tmpvar_35 = min (pow (linearFogDensity_31, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_31 = tmpvar_35;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  h_30 = (tmpvar_36 * (2.0 - tmpvar_36));
  highp vec3 tmpvar_38;
  tmpvar_38 = (_HeigtFogColBase2.xyz + (h_30 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_29 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (atomesphereFogColor_29, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_32 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_29 = tmpvar_39;
  mediump float tmpvar_40;
  mediump float r_41;
  mediump float f_42;
  mediump float u_43;
  mediump float l_44;
  mediump float fogInt_45;
  fogInt_45 = 1.0;
  highp float tmpvar_46;
  tmpvar_46 = (_HeigtFogParams2.x * tmpvar_23.y);
  highp float tmpvar_47;
  tmpvar_47 = abs(tmpvar_46);
  if ((tmpvar_47 > 0.01)) {
    highp float tmpvar_48;
    tmpvar_48 = exp(-(tmpvar_46));
    fogInt_45 = ((1.0 - tmpvar_48) / tmpvar_46);
  };
  highp float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_44 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (l_44 * _HeigtFogParams2.y);
  u_43 = tmpvar_50;
  fogInt_45 = (fogInt_45 * u_43);
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((l_44 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  r_41 = (tmpvar_51 * (2.0 - tmpvar_51));
  r_41 = ((r_41 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_42 = ((1.0 - clamp (
    exp2(-(fogInt_45))
  , 0.0, 1.0)) * r_41);
  highp float tmpvar_53;
  tmpvar_53 = min (f_42, _HeigtFogColBase2.w);
  tmpvar_40 = tmpvar_53;
  HeightFogFactor_28 = tmpvar_40;
  highp vec3 tmpvar_54;
  tmpvar_54 = _Mihoyo_FogColor2.xyz;
  heightFogColor_27 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = ((heightFogColor_27 * HeightFogFactor_28) + ((atomesphereFogColor_29 * tmpvar_35) * (1.0 - HeightFogFactor_28)));
  fogColor_26 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = ((1.0 - tmpvar_35) * (1.0 - HeightFogFactor_28));
  fogFactor_25 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = fogColor_26;
  tmpvar_57.w = fogFactor_25;
  tmpvar_24 = tmpvar_57;
  highp vec4 tmpvar_58;
  mediump float fogFactor_59;
  mediump vec3 fogColor_60;
  mediump vec3 heightFogColor_61;
  highp float HeightFogFactor_62;
  mediump vec3 atomesphereFogColor_63;
  mediump float h_64;
  highp float linearFogDensity_65;
  mediump float len_66;
  highp float tmpvar_67;
  tmpvar_67 = sqrt(dot (tmpvar_23, tmpvar_23));
  len_66 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((len_66 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_65 = (tmpvar_68 * (2.0 - tmpvar_68));
  if ((len_66 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_65 = (linearFogDensity_65 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_69;
  tmpvar_69 = min (pow (linearFogDensity_65, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_65 = tmpvar_69;
  mediump float tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  h_64 = (tmpvar_70 * (2.0 - tmpvar_70));
  highp vec3 tmpvar_72;
  tmpvar_72 = (_HeigtFogColBase3.xyz + (h_64 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_63 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = mix (atomesphereFogColor_63, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_66 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_63 = tmpvar_73;
  mediump float tmpvar_74;
  mediump float r_75;
  mediump float f_76;
  mediump float u_77;
  mediump float l_78;
  mediump float fogInt_79;
  fogInt_79 = 1.0;
  highp float tmpvar_80;
  tmpvar_80 = (_HeigtFogParams3.x * tmpvar_23.y);
  highp float tmpvar_81;
  tmpvar_81 = abs(tmpvar_80);
  if ((tmpvar_81 > 0.01)) {
    highp float tmpvar_82;
    tmpvar_82 = exp(-(tmpvar_80));
    fogInt_79 = ((1.0 - tmpvar_82) / tmpvar_80);
  };
  highp float tmpvar_83;
  tmpvar_83 = sqrt(dot (tmpvar_23, tmpvar_23));
  l_78 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (l_78 * _HeigtFogParams3.y);
  u_77 = tmpvar_84;
  fogInt_79 = (fogInt_79 * u_77);
  mediump float tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (((l_78 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_85 = tmpvar_86;
  r_75 = (tmpvar_85 * (2.0 - tmpvar_85));
  r_75 = ((r_75 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_76 = ((1.0 - clamp (
    exp2(-(fogInt_79))
  , 0.0, 1.0)) * r_75);
  highp float tmpvar_87;
  tmpvar_87 = min (f_76, _HeigtFogColBase3.w);
  tmpvar_74 = tmpvar_87;
  HeightFogFactor_62 = tmpvar_74;
  highp vec3 tmpvar_88;
  tmpvar_88 = _Mihoyo_FogColor3.xyz;
  heightFogColor_61 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = ((heightFogColor_61 * HeightFogFactor_62) + ((atomesphereFogColor_63 * tmpvar_69) * (1.0 - HeightFogFactor_62)));
  fogColor_60 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = ((1.0 - tmpvar_69) * (1.0 - HeightFogFactor_62));
  fogFactor_59 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91.xyz = fogColor_60;
  tmpvar_91.w = fogFactor_59;
  tmpvar_58 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (tmpvar_24, tmpvar_58, vec4(_LerpFactor));
  tmpvar_22 = tmpvar_92;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_19;
  xlv_TEXCOORD6 = tmpvar_20;
  xlv_TEXCOORD7 = tmpvar_21;
  xlv_COLOR1 = tmpvar_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float emissionMask_2;
  mediump vec3 emissionTex_3;
  mediump vec4 matcapSpecular_4;
  mediump float matcapMask_5;
  mediump vec3 mc_6;
  mediump vec3 R_7;
  mediump vec3 normals_8;
  highp vec3 worldNorm_9;
  highp vec3 colorBlendLightMap_10;
  highp float gray_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp float THRESHOLDS_MATRIX_15[16];
  THRESHOLDS_MATRIX_15[0] = 0.05882353;
  THRESHOLDS_MATRIX_15[1] = 0.5294118;
  THRESHOLDS_MATRIX_15[2] = 0.1764706;
  THRESHOLDS_MATRIX_15[3] = 0.6470588;
  THRESHOLDS_MATRIX_15[4] = 0.7647059;
  THRESHOLDS_MATRIX_15[5] = 0.2941177;
  THRESHOLDS_MATRIX_15[6] = 0.8823529;
  THRESHOLDS_MATRIX_15[7] = 0.4117647;
  THRESHOLDS_MATRIX_15[8] = 0.2352941;
  THRESHOLDS_MATRIX_15[9] = 0.7058824;
  THRESHOLDS_MATRIX_15[10] = 0.1176471;
  THRESHOLDS_MATRIX_15[11] = 0.5882353;
  THRESHOLDS_MATRIX_15[12] = 0.9411765;
  THRESHOLDS_MATRIX_15[13] = 0.4705882;
  THRESHOLDS_MATRIX_15[14] = 0.8235294;
  THRESHOLDS_MATRIX_15[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = ((xlv_TEXCOORD3 / xlv_TEXCOORD3.w).xy * _ScreenParams.xy);
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_16.x / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_16.y / 4.0);
    highp float tmpvar_21;
    tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
    highp float tmpvar_22;
    if ((tmpvar_20 >= 0.0)) {
      tmpvar_22 = tmpvar_21;
    } else {
      tmpvar_22 = -(tmpvar_21);
    };
    highp float x_23;
    x_23 = (_Transparent - THRESHOLDS_MATRIX_15[int((
      (tmpvar_19 * 4.0)
     + tmpvar_22))]);
    if ((x_23 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_24;
  vpos_24 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_24.y = ((fract(vpos_24.y) * 0.0625) + unity_LODFade.y);
  lowp float x_25;
  x_25 = (texture2D (_DitherMaskLOD2D, vpos_24).w - 0.5);
  if ((x_25 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_27;
  highp vec2 screenCoord_28;
  screenCoord_28 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_29;
  shadow_29 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_28);
    shadow_29 = tmpvar_30.x;
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (lmtex_14.xyz * _ShadowColor);
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec3(0.299, 0.587, 0.114));
  gray_11 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.y = 0.5;
  tmpvar_33.x = (gray_11 * _LightmapColorScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightmapColorChange, tmpvar_33);
  highp float tmpvar_35;
  tmpvar_35 = clamp ((_LightmapDarkArea - gray_11), 0.0, 1.0);
  fc_12 = (mix ((
    (tmpvar_34 * _LightmapColorIns)
  .xyz * _ShadowColor), tmpvar_31, vec3(_LightmapColorLerp)) + (tmpvar_35 * _LightmapDarkPromotion));
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tex_C_Color_13.xyz * _Color.xyz) * ((
    (fc_12 * (1.0 - (clamp (
      (lmtex_14.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_29))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_10 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_8 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_8);
  worldNorm_9.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_8);
  worldNorm_9.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD7, normals_8);
  worldNorm_9.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_9 = (tmpvar_41 * worldNorm_9);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_9, tmpvar_42)
   * worldNorm_9)));
  R_7 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_9, R_7, vec3(_MetalRef));
  worldNorm_9 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  mc_6 = colorBlendLightMap_10;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  matcapMask_5 = tmpvar_46.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_MatCap, tmpvar_45);
  mc_6 = (mc_6 * (tmpvar_47.xyz * vec3(2.0, 2.0, 2.0)));
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
  tmpvar_48 = texture2D (_SpecularMap, P_49);
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * _SpecularIntensity);
  matcapSpecular_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
  highp float tmpvar_52;
  tmpvar_52 = clamp ((float(
    (tmpvar_51 >= _LightmapThreshold)
  ) + _IntensityInLightmap), 0.0, 1.0);
  matcapSpecular_4 = (matcapSpecular_4 * tmpvar_52);
  mc_6 = (mc_6 + matcapSpecular_4.xyz);
  colorBlendLightMap_10 = mix (colorBlendLightMap_10, mc_6, vec3(matcapMask_5));
  highp vec2 tmpvar_53;
  tmpvar_53 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_EmissionMask, tmpvar_53).xyz;
  emissionTex_3 = tmpvar_54;
  emissionMask_2 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_2 = emissionTex_3.z;
  } else {
    highp float tmpvar_55;
    tmpvar_55 = mix (emissionTex_3.x, emissionTex_3.y, float(_UseChannel));
    emissionMask_2 = tmpvar_55;
  };
  mediump vec3 tmpvar_56;
  tmpvar_56 = ((emissionMask_2 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_10 = (colorBlendLightMap_10 + tmpvar_56);
  mediump vec3 tmpvar_57;
  mediump vec3 srcColor_58;
  srcColor_58 = colorBlendLightMap_10;
  tmpvar_57 = (xlv_COLOR1.xyz + (srcColor_58 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_10 = tmpvar_57;
  highp vec4 tmpvar_59;
  tmpvar_59.xyz = colorBlendLightMap_10;
  tmpvar_59.w = _BloomIntensity;
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/Meta/META"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
}