//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_NewHome/Avatar_No_LightMap" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 1
_MainTex ("Main Tex (RGB)", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightSpecColor ("Light Specular Color", Color) = (1,1,1,1)
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.51
_SecondShadow ("Second Shadow Threshold", Range(0, 1)) = 0.51
_FirstShadowMultColor ("First Shadow Multiply Color", Color) = (0.9,0.7,0.75,1)
_SecondShadowMultColor ("Second Shadow Multiply Color", Color) = (0.75,0.6,0.65,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
_DiffuseThreshold ("Diffuse Threshold", Range(0, 1)) = 0
_SpecularThreshold ("Specular Threshold", Range(0, 1)) = 0
_Emission ("Emission", Range(1, 100)) = 1
_EmissionColor ("Emmisive Color", Color) = (1,1,1,1)
_EmissionBloomFactor ("Emission Bloom Factor", Float) = 1
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_OutlineCamStart ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
_FadeDistance ("Fade Start Distance", Range(0.1, 10)) = 0.5
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 1
[Toggle(LOOKUP_COLOR)] _LookupColor ("Lookup Color", Float) = 0
[Toggle(LOOKUP_COLOR_BILINEAR)] _LookupColorBilinear ("Lookup Color Bilinear", Float) = 0
_factorTex ("Factor Tex", 2D) = "white" { }
_indexTex ("Index Tex", 2D) = "white" { }
_tableTex ("Lookup Tex", 2D) = "white" { }
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
_Culling ("Culling (0: Off, 1: Front, 2: Back)", Float) = 2
[Toggle(USINGBLOOMMASK)] _UsingBloomMask ("UsingBloomMask", Float) = 0
_BloomMaskTex ("Bloom Mask Tex", 2D) = "white" { }
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 43182
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  outColor_5.xyz = color_20;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  outColor_5.xyz = color_30;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  outColor_5.xyz = color_73;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_19.w;
  outColor_5.xyz = (tmpvar_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_20;
  color_20 = outColor_5.xyz;
  mediump vec3 tmpvar_21;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_21 = _lightProbColor.xyz;
  } else {
    tmpvar_21 = vec3(1.0, 1.0, 1.0);
  };
  color_20 = (outColor_5.xyz * tmpvar_21);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = N_3;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (color_20, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_29.w;
  outColor_5.xyz = (tmpvar_29.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_5.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_5.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_3;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_5.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_14.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5.w = tmpvar_72.w;
  outColor_5.xyz = (tmpvar_72.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_73;
  color_73 = outColor_5.xyz;
  mediump vec3 tmpvar_74;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_74 = _lightProbColor.xyz;
  } else {
    tmpvar_74 = vec3(1.0, 1.0, 1.0);
  };
  color_73 = (outColor_5.xyz * tmpvar_74);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = N_3;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (color_73, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_5.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  outColor_5.xyz = color_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  outColor_5.xyz = color_45;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  outColor_5.xyz = color_88;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = baseTexColor_4.xyz;
  mediump vec3 diffColor_8;
  diffColor_8 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_8 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_8 = tmpvar_7;
  };
  outColor_5.xyz = diffColor_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_11;
  mediump vec3 color_12;
  mediump vec3 H_13;
  H_13 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_14;
    highp vec3 tmpvar_15;
    tmpvar_15 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_14 = tmpvar_15;
    H_13 = normalize((_CustomLightDir.xyz + V_14));
  };
  mediump float tmpvar_16;
  tmpvar_16 = pow (max (dot (N_3, H_13), 0.0), _Shininess);
  if ((tmpvar_16 >= _SpecularThreshold)) {
    color_12 = (_LightSpecColor * _SpecMulti);
  } else {
    color_12 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_8 + color_12);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (baseTexColor_4.w * tmpvar_17.x);
  };
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = ((baseTexColor_4.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_18.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_19;
  tmpvar_19 = mix ((outColor_5 * _Color), tmpvar_18, baseTexColor_4.wwww);
  outColor_5 = tmpvar_19;
  mediump vec3 reflection_20;
  mediump vec3 R_21;
  mediump float intensity_22;
  mediump vec4 noiseTex_23;
  mediump vec4 spColor_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_24.xyz = tmpvar_25.xyz;
  spColor_24.w = tmpvar_19.w;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = (((1.99 * noiseTex_23.x) * _SPNoiseScaler) - 1.0);
  intensity_22 = tmpvar_27;
  highp vec3 tmpvar_28;
  highp vec3 I_29;
  I_29 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_23 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_28 = (I_29 - (2.0 * (
    dot (N_3, I_29)
   * N_3)));
  R_21 = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = textureCube (_SPCubeMap, R_21).xyz;
  reflection_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  mediump vec3 x_32;
  x_32 = (spColor_24.xyz * _SPOldColor.xyz);
  tmpvar_31 = mix (x_32, ((reflection_20 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_24.xyz = tmpvar_31;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_22 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_22 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_33;
      tmpvar_33 = mix (spColor_24, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_22) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_24 = tmpvar_33;
    };
  };
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_19.xyz, spColor_24.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_24.xyz = tmpvar_34;
  outColor_5.w = spColor_24.w;
  outColor_5.xyz = (spColor_24.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_35;
  color_35 = outColor_5.xyz;
  mediump vec3 tmpvar_36;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_36 = _lightProbColor.xyz;
  } else {
    tmpvar_36 = vec3(1.0, 1.0, 1.0);
  };
  color_35 = (outColor_5.xyz * tmpvar_36);
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = N_3;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (color_35, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_9;
  tmpvar_9 = tmpvar_8.w;
  mediump vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = tmpvar_9;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_tableTex, tmpvar_10).xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  mediump vec2 tmpvar_13;
  tmpvar_13.y = 1.0;
  tmpvar_13.x = tmpvar_9;
  lowp vec3 tmpvar_14;
  tmpvar_14 = texture2D (_tableTex, tmpvar_13).xyz;
  mediump vec3 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = mix (tmpvar_12, tmpvar_15, tmpvar_7.xxx);
  tmpvar_16.w = tmpvar_7.y;
  baseTexColor_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_16.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  outColor_5.xyz = diffColor_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_18 + color_22);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_7.y * tmpvar_27.x);
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = ((tmpvar_16.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_28.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix ((outColor_5 * _Color), tmpvar_28, baseTexColor_4.wwww);
  outColor_5 = tmpvar_29;
  mediump vec3 reflection_30;
  mediump vec3 R_31;
  mediump float intensity_32;
  mediump vec4 noiseTex_33;
  mediump vec4 spColor_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_34.xyz = tmpvar_35.xyz;
  spColor_34.w = tmpvar_29.w;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_33 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = (((1.99 * noiseTex_33.x) * _SPNoiseScaler) - 1.0);
  intensity_32 = tmpvar_37;
  highp vec3 tmpvar_38;
  highp vec3 I_39;
  I_39 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_33 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_38 = (I_39 - (2.0 * (
    dot (N_3, I_39)
   * N_3)));
  R_31 = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = textureCube (_SPCubeMap, R_31).xyz;
  reflection_30 = tmpvar_40;
  highp vec3 tmpvar_41;
  mediump vec3 x_42;
  x_42 = (spColor_34.xyz * _SPOldColor.xyz);
  tmpvar_41 = mix (x_42, ((reflection_30 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_34.xyz = tmpvar_41;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_32 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_32 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_43;
      tmpvar_43 = mix (spColor_34, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_32) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_34 = tmpvar_43;
    };
  };
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (tmpvar_29.xyz, spColor_34.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_34.xyz = tmpvar_44;
  outColor_5.w = spColor_34.w;
  outColor_5.xyz = (spColor_34.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_45;
  color_45 = outColor_5.xyz;
  mediump vec3 tmpvar_46;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_46 = _lightProbColor.xyz;
  } else {
    tmpvar_46 = vec3(1.0, 1.0, 1.0);
  };
  color_45 = (outColor_5.xyz * tmpvar_46);
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = N_3;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (color_45, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_5.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_17.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_5 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_6;
  highp vec2 pixelSize_7;
  pixelSize_7 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9 = floor(tmpvar_8);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract(tmpvar_8);
  highp vec2 uv_11;
  uv_11 = ((tmpvar_9 + vec2(0.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_factorTex, uv_11);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_indexTex, uv_11);
  mediump float tmpvar_15;
  tmpvar_15 = tmpvar_14.w;
  mediump vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15;
  lowp vec3 tmpvar_17;
  tmpvar_17 = texture2D (_tableTex, tmpvar_16).xyz;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump vec2 tmpvar_19;
  tmpvar_19.y = 1.0;
  tmpvar_19.x = tmpvar_15;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_tableTex, tmpvar_19).xyz;
  mediump vec3 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = mix (tmpvar_18, tmpvar_21, tmpvar_13.xxx);
  tmpvar_22.w = tmpvar_13.y;
  highp vec2 uv_23;
  uv_23 = ((tmpvar_9 + vec2(1.5, 0.5)) * pixelSize_7);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_factorTex, uv_23);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_indexTex, uv_23);
  mediump float tmpvar_27;
  tmpvar_27 = tmpvar_26.w;
  mediump vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = tmpvar_27;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_tableTex, tmpvar_28).xyz;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  mediump vec2 tmpvar_31;
  tmpvar_31.y = 1.0;
  tmpvar_31.x = tmpvar_27;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_tableTex, tmpvar_31).xyz;
  mediump vec3 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix (tmpvar_30, tmpvar_33, tmpvar_25.xxx);
  tmpvar_34.w = tmpvar_25.y;
  highp vec2 uv_35;
  uv_35 = ((tmpvar_9 + vec2(0.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_factorTex, uv_35);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_indexTex, uv_35);
  mediump float tmpvar_39;
  tmpvar_39 = tmpvar_38.w;
  mediump vec2 tmpvar_40;
  tmpvar_40.y = 0.0;
  tmpvar_40.x = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_tableTex, tmpvar_40).xyz;
  mediump vec3 tmpvar_42;
  tmpvar_42 = tmpvar_41;
  mediump vec2 tmpvar_43;
  tmpvar_43.y = 1.0;
  tmpvar_43.x = tmpvar_39;
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_tableTex, tmpvar_43).xyz;
  mediump vec3 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = mix (tmpvar_42, tmpvar_45, tmpvar_37.xxx);
  tmpvar_46.w = tmpvar_37.y;
  highp vec2 uv_47;
  uv_47 = ((tmpvar_9 + vec2(1.5, 1.5)) * pixelSize_7);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_factorTex, uv_47);
  mediump vec4 tmpvar_49;
  tmpvar_49 = tmpvar_48;
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_indexTex, uv_47);
  mediump float tmpvar_51;
  tmpvar_51 = tmpvar_50.w;
  mediump vec2 tmpvar_52;
  tmpvar_52.y = 0.0;
  tmpvar_52.x = tmpvar_51;
  lowp vec3 tmpvar_53;
  tmpvar_53 = texture2D (_tableTex, tmpvar_52).xyz;
  mediump vec3 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  mediump vec2 tmpvar_55;
  tmpvar_55.y = 1.0;
  tmpvar_55.x = tmpvar_51;
  lowp vec3 tmpvar_56;
  tmpvar_56 = texture2D (_tableTex, tmpvar_55).xyz;
  mediump vec3 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = mix (tmpvar_54, tmpvar_57, tmpvar_49.xxx);
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (mix (tmpvar_22, tmpvar_34, tmpvar_10.xxxx), mix (tmpvar_46, tmpvar_58, tmpvar_10.xxxx), tmpvar_10.yyyy);
  tmpvar_6 = tmpvar_59;
  baseTexColor_4 = tmpvar_6;
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_6.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1 < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_6.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  outColor_5.xyz = diffColor_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_61 + color_65);
  outColor_5.w = _BloomFactor;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_70;
    tmpvar_70 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_4.w = (tmpvar_6.w * tmpvar_70.x);
  };
  mediump vec4 tmpvar_71;
  tmpvar_71.xyz = ((tmpvar_6.xyz * _Emission) * _EmissionColor.xyz);
  tmpvar_71.w = _EmissionBloomFactor;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix ((outColor_5 * _Color), tmpvar_71, baseTexColor_4.wwww);
  outColor_5 = tmpvar_72;
  mediump vec3 reflection_73;
  mediump vec3 R_74;
  mediump float intensity_75;
  mediump vec4 noiseTex_76;
  mediump vec4 spColor_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_77.xyz = tmpvar_78.xyz;
  spColor_77.w = tmpvar_72.w;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_76 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = (((1.99 * noiseTex_76.x) * _SPNoiseScaler) - 1.0);
  intensity_75 = tmpvar_80;
  highp vec3 tmpvar_81;
  highp vec3 I_82;
  I_82 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_76 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_81 = (I_82 - (2.0 * (
    dot (N_3, I_82)
   * N_3)));
  R_74 = tmpvar_81;
  lowp vec3 tmpvar_83;
  tmpvar_83 = textureCube (_SPCubeMap, R_74).xyz;
  reflection_73 = tmpvar_83;
  highp vec3 tmpvar_84;
  mediump vec3 x_85;
  x_85 = (spColor_77.xyz * _SPOldColor.xyz);
  tmpvar_84 = mix (x_85, ((reflection_73 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_77.xyz = tmpvar_84;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_75 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_75 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_86;
      tmpvar_86 = mix (spColor_77, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_75) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_77 = tmpvar_86;
    };
  };
  highp vec3 tmpvar_87;
  tmpvar_87 = mix (tmpvar_72.xyz, spColor_77.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_77.xyz = tmpvar_87;
  outColor_5.w = spColor_77.w;
  outColor_5.xyz = (spColor_77.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_88;
  color_88 = outColor_5.xyz;
  mediump vec3 tmpvar_89;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_89 = _lightProbColor.xyz;
  } else {
    tmpvar_89 = vec3(1.0, 1.0, 1.0);
  };
  color_88 = (outColor_5.xyz * tmpvar_89);
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = N_3;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (color_88, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_5.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 76849
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
Fallback "Diffuse"
CustomEditor "MoleMole.CharacterShaderEditorBase"
}