//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Scenes/Scenes_DLC/LightMapUnity_Reflecting_AddLight" {
Properties {
[MHYHeaderBox(OPTIONS)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Toggle(_ALPHATEST_ON)] _EnableAlphaCutoff ("Enable Alpha Cutoff", Float) = 0
[MHYKeywordFilter(_ALPHATEST_ON On)] _AlphaCutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
[MHYHeaderBox(MAPS)] [MHYSingleLineTextureNoScaleOffset(_Color)] _MainTex ("Albedo", 2D) = "white" { }
[MHYTextureScaleOffset] _MainMaps_ST ("Main Maps ST", Vector) = (1,1,0,0)
_Color ("Color", Color) = (1,1,1,1)
[MHYSingleLineTextureNoScaleOffset] _PropertyLightmapTex ("LightMap", 2D) = "white" { }
[MHYTextureScaleOffset] _PropertyLightmapTexTS ("PropertyLightmapTexTS", Vector) = (0,0,0,0)
_ShadowColor ("Shadow Color", Color) = (0.5,0.5,0.5,1)
_ShadowIntegration ("Shadow Integration", Range(0, 1)) = 0.2
[MHYHeaderBox(Reflecting)] _ReflectionTex ("Reflection", 2D) = "black" { }
_ReflectMaskTex ("Reflect Mask Tex(R)", 2D) = "white" { }
_ReflectionAdjust ("Reflection(RG:Strength, BA:Dark", Vector) = (1,1,0,0)
_FresnelParams ("Fresnel Parameters", Vector) = (1,1,0,0)
[Toggle(BRUSHEDMAP_ON)] _EnableBushedMap ("Enable Brushed Map", Float) = 0
_BrushedNormalMap ("Brushed Normal Map", 2D) = "green" { }
_BrushScaleX ("Brush Scale X", Range(0, 1)) = 1
_BrushScaleY ("Brush Scale Y", Range(0, 1)) = 1
_MaskTilingX ("MaskTilingX", Range(0, 10)) = 5
_MaskTilingY ("MaskTilingY", Range(0, 10)) = 5
[MHYHeaderBox(LIGHTING)] _BloomIntensity ("Bloom Intensity", Range(0, 50)) = 1
_LightMapIntensity ("Light Map Intensity", Range(0, 5)) = 1.5
_FogTune ("Fog Tune", Range(0, 1)) = 1
_LightingColor ("Lighting Color", Color) = (0.2,0.2,0.2,1)
[MHYHeaderBox(ADDLIGHT)] _AdditiveLightPower ("Additive Light Power", Range(0.1, 5)) = 1
_AdditiveLightIntensity ("Additive Light Intensity", Range(0, 1)) = 1
}
SubShader {
 LOD 600
 Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARDONLY"
  LOD 600
  Tags { "DrawDepth" = "FrontFace" "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 33874
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_13;
  mediump float tmpvar_14;
  mediump vec3 N_15;
  N_15 = xlv_TEXCOORD4;
  tmpvar_14 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_15)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_ReflectionTex, tmpvar_16);
  reflColor_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_20);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_14));
  mediump vec3 tmpvar_21;
  mediump vec3 srcColor_22;
  srcColor_22 = colorBlendLightMap_6;
  tmpvar_21 = (xlv_COLOR1.xyz + (srcColor_22 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_21;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = colorBlendLightMap_6;
  tmpvar_23.w = _BloomIntensity;
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_13;
  mediump float tmpvar_14;
  mediump vec3 N_15;
  N_15 = xlv_TEXCOORD4;
  tmpvar_14 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_15)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_ReflectionTex, tmpvar_16);
  reflColor_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_20);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_14));
  mediump vec3 tmpvar_21;
  mediump vec3 srcColor_22;
  srcColor_22 = colorBlendLightMap_6;
  tmpvar_21 = (xlv_COLOR1.xyz + (srcColor_22 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_21;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = colorBlendLightMap_6;
  tmpvar_23.w = _BloomIntensity;
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_13;
  mediump float tmpvar_14;
  mediump vec3 N_15;
  N_15 = xlv_TEXCOORD4;
  tmpvar_14 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_15)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_ReflectionTex, tmpvar_16);
  reflColor_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_20);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_14));
  mediump vec3 tmpvar_21;
  mediump vec3 srcColor_22;
  srcColor_22 = colorBlendLightMap_6;
  tmpvar_21 = (xlv_COLOR1.xyz + (srcColor_22 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_21;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = colorBlendLightMap_6;
  tmpvar_23.w = _BloomIntensity;
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_18;
  tmpvar_18 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_18;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_19;
  tmpvar_19.x = _BrushScaleX;
  tmpvar_19.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_19);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_8;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_8;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_18;
  tmpvar_18 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_18;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_19;
  tmpvar_19.x = _BrushScaleX;
  tmpvar_19.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_19);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_8;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_8;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_18;
  tmpvar_18 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_18;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_19;
  tmpvar_19.x = _BrushScaleX;
  tmpvar_19.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_19);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_8;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_8;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_13;
  mediump float tmpvar_14;
  mediump vec3 N_15;
  N_15 = xlv_TEXCOORD4;
  tmpvar_14 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_15)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_ReflectionTex, tmpvar_16);
  reflColor_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_20);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_14));
  mediump vec3 tmpvar_21;
  mediump vec3 srcColor_22;
  srcColor_22 = colorBlendLightMap_6;
  tmpvar_21 = (xlv_COLOR1.xyz + (srcColor_22 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_21;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = colorBlendLightMap_6;
  tmpvar_23.w = _BloomIntensity;
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_13;
  mediump float tmpvar_14;
  mediump vec3 N_15;
  N_15 = xlv_TEXCOORD4;
  tmpvar_14 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_15)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_ReflectionTex, tmpvar_16);
  reflColor_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_20);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_14));
  mediump vec3 tmpvar_21;
  mediump vec3 srcColor_22;
  srcColor_22 = colorBlendLightMap_6;
  tmpvar_21 = (xlv_COLOR1.xyz + (srcColor_22 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_21;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = colorBlendLightMap_6;
  tmpvar_23.w = _BloomIntensity;
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_13;
  mediump float tmpvar_14;
  mediump vec3 N_15;
  N_15 = xlv_TEXCOORD4;
  tmpvar_14 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_15)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_ReflectionTex, tmpvar_16);
  reflColor_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_20);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_14));
  mediump vec3 tmpvar_21;
  mediump vec3 srcColor_22;
  srcColor_22 = colorBlendLightMap_6;
  tmpvar_21 = (xlv_COLOR1.xyz + (srcColor_22 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_21;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = colorBlendLightMap_6;
  tmpvar_23.w = _BloomIntensity;
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_18;
  tmpvar_18 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_18;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_19;
  tmpvar_19.x = _BrushScaleX;
  tmpvar_19.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_19);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_8;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_8;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_18;
  tmpvar_18 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_18;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_19;
  tmpvar_19.x = _BrushScaleX;
  tmpvar_19.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_19);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_8;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_8;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_18;
  tmpvar_18 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_18;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_19;
  tmpvar_19.x = _BrushScaleX;
  tmpvar_19.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_19);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_8;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_8;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 N_14;
  N_14 = xlv_TEXCOORD4;
  tmpvar_13 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_14)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectionTex, tmpvar_15);
  reflColor_4 = tmpvar_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_19);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_13));
  mediump vec3 tmpvar_20;
  mediump vec3 srcColor_21;
  srcColor_21 = colorBlendLightMap_6;
  tmpvar_20 = (xlv_COLOR1.xyz + (srcColor_21 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = colorBlendLightMap_6;
  tmpvar_22.w = _BloomIntensity;
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 N_14;
  N_14 = xlv_TEXCOORD4;
  tmpvar_13 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_14)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectionTex, tmpvar_15);
  reflColor_4 = tmpvar_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_19);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_13));
  mediump vec3 tmpvar_20;
  mediump vec3 srcColor_21;
  srcColor_21 = colorBlendLightMap_6;
  tmpvar_20 = (xlv_COLOR1.xyz + (srcColor_21 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = colorBlendLightMap_6;
  tmpvar_22.w = _BloomIntensity;
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 N_14;
  N_14 = xlv_TEXCOORD4;
  tmpvar_13 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_14)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectionTex, tmpvar_15);
  reflColor_4 = tmpvar_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_19);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_13));
  mediump vec3 tmpvar_20;
  mediump vec3 srcColor_21;
  srcColor_21 = colorBlendLightMap_6;
  tmpvar_20 = (xlv_COLOR1.xyz + (srcColor_21 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = colorBlendLightMap_6;
  tmpvar_22.w = _BloomIntensity;
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_17;
  tmpvar_17 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_17;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_18;
  tmpvar_18.x = _BrushScaleX;
  tmpvar_18.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_18);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_8;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_8;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_17;
  tmpvar_17 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_17;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_18;
  tmpvar_18.x = _BrushScaleX;
  tmpvar_18.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_18);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_8;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_8;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_17;
  tmpvar_17 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_17;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_18;
  tmpvar_18.x = _BrushScaleX;
  tmpvar_18.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_18);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_8;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_8;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 N_14;
  N_14 = xlv_TEXCOORD4;
  tmpvar_13 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_14)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectionTex, tmpvar_15);
  reflColor_4 = tmpvar_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_19);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_13));
  mediump vec3 tmpvar_20;
  mediump vec3 srcColor_21;
  srcColor_21 = colorBlendLightMap_6;
  tmpvar_20 = (xlv_COLOR1.xyz + (srcColor_21 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = colorBlendLightMap_6;
  tmpvar_22.w = _BloomIntensity;
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 N_14;
  N_14 = xlv_TEXCOORD4;
  tmpvar_13 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_14)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectionTex, tmpvar_15);
  reflColor_4 = tmpvar_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_19);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_13));
  mediump vec3 tmpvar_20;
  mediump vec3 srcColor_21;
  srcColor_21 = colorBlendLightMap_6;
  tmpvar_20 = (xlv_COLOR1.xyz + (srcColor_21 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = colorBlendLightMap_6;
  tmpvar_22.w = _BloomIntensity;
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 N_14;
  N_14 = xlv_TEXCOORD4;
  tmpvar_13 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_14)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectionTex, tmpvar_15);
  reflColor_4 = tmpvar_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_19);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_13));
  mediump vec3 tmpvar_20;
  mediump vec3 srcColor_21;
  srcColor_21 = colorBlendLightMap_6;
  tmpvar_20 = (xlv_COLOR1.xyz + (srcColor_21 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = colorBlendLightMap_6;
  tmpvar_22.w = _BloomIntensity;
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_17;
  tmpvar_17 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_17;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_18;
  tmpvar_18.x = _BrushScaleX;
  tmpvar_18.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_18);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_8;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_8;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_17;
  tmpvar_17 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_17;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_18;
  tmpvar_18.x = _BrushScaleX;
  tmpvar_18.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_18);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_8;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_8;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_17;
  tmpvar_17 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_17;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_18;
  tmpvar_18.x = _BrushScaleX;
  tmpvar_18.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_18);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_8;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_8;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_ReflectionTex, tmpvar_17);
  reflColor_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_21);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_22;
  mediump vec3 srcColor_23;
  srcColor_23 = colorBlendLightMap_6;
  tmpvar_22 = (xlv_COLOR1.xyz + (srcColor_23 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = colorBlendLightMap_6;
  tmpvar_24.w = _BloomIntensity;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_ReflectionTex, tmpvar_17);
  reflColor_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_21);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_22;
  mediump vec3 srcColor_23;
  srcColor_23 = colorBlendLightMap_6;
  tmpvar_22 = (xlv_COLOR1.xyz + (srcColor_23 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = colorBlendLightMap_6;
  tmpvar_24.w = _BloomIntensity;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_ReflectionTex, tmpvar_17);
  reflColor_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_21);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_22;
  mediump vec3 srcColor_23;
  srcColor_23 = colorBlendLightMap_6;
  tmpvar_22 = (xlv_COLOR1.xyz + (srcColor_23 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = colorBlendLightMap_6;
  tmpvar_24.w = _BloomIntensity;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_19;
  tmpvar_19 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_19;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_20;
  tmpvar_20.x = _BrushScaleX;
  tmpvar_20.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_20);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_8;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_8;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_19;
  tmpvar_19 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_19;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_20;
  tmpvar_20.x = _BrushScaleX;
  tmpvar_20.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_20);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_8;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_8;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_19;
  tmpvar_19 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_19;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_20;
  tmpvar_20.x = _BrushScaleX;
  tmpvar_20.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_20);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_8;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_8;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_ReflectionTex, tmpvar_17);
  reflColor_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_21);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_22;
  mediump vec3 srcColor_23;
  srcColor_23 = colorBlendLightMap_6;
  tmpvar_22 = (xlv_COLOR1.xyz + (srcColor_23 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = colorBlendLightMap_6;
  tmpvar_24.w = _BloomIntensity;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_ReflectionTex, tmpvar_17);
  reflColor_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_21);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_22;
  mediump vec3 srcColor_23;
  srcColor_23 = colorBlendLightMap_6;
  tmpvar_22 = (xlv_COLOR1.xyz + (srcColor_23 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = colorBlendLightMap_6;
  tmpvar_24.w = _BloomIntensity;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    (lmtex_8.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_14;
  mediump float tmpvar_15;
  mediump vec3 N_16;
  N_16 = xlv_TEXCOORD4;
  tmpvar_15 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_16)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_ReflectionTex, tmpvar_17);
  reflColor_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_21);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_15));
  mediump vec3 tmpvar_22;
  mediump vec3 srcColor_23;
  srcColor_23 = colorBlendLightMap_6;
  tmpvar_22 = (xlv_COLOR1.xyz + (srcColor_23 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = colorBlendLightMap_6;
  tmpvar_24.w = _BloomIntensity;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_19;
  tmpvar_19 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_19;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_20;
  tmpvar_20.x = _BrushScaleX;
  tmpvar_20.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_20);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_8;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_8;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_19;
  tmpvar_19 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_19;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_20;
  tmpvar_20.x = _BrushScaleX;
  tmpvar_20.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_20);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_8;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_8;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    (lmtex_10.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_19;
  tmpvar_19 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_19;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_20;
  tmpvar_20.x = _BrushScaleX;
  tmpvar_20.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_20);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_8;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_8;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  highp vec2 screenCoord_12;
  screenCoord_12 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_13;
  shadow_13 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_12);
    shadow_13 = tmpvar_14.x;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_13))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, tmpvar_19);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_6;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_6;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  highp vec2 screenCoord_12;
  screenCoord_12 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_13;
  shadow_13 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_12);
    shadow_13 = tmpvar_14.x;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_13))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, tmpvar_19);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_6;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_6;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  highp vec2 screenCoord_12;
  screenCoord_12 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_13;
  shadow_13 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_12);
    shadow_13 = tmpvar_14.x;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_13))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, tmpvar_19);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_6;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_6;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_21;
  tmpvar_21 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_21;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_22;
  tmpvar_22.x = _BrushScaleX;
  tmpvar_22.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_22);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_26);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_8;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_8;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_21;
  tmpvar_21 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_21;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_22;
  tmpvar_22.x = _BrushScaleX;
  tmpvar_22.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_22);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_26);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_8;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_8;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_21;
  tmpvar_21 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_21;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_22;
  tmpvar_22.x = _BrushScaleX;
  tmpvar_22.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_22);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_26);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_8;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_8;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  highp vec2 screenCoord_12;
  screenCoord_12 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_13;
  shadow_13 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_12);
    shadow_13 = tmpvar_14.x;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_13))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, tmpvar_19);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_6;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_6;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  highp vec2 screenCoord_12;
  screenCoord_12 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_13;
  shadow_13 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_12);
    shadow_13 = tmpvar_14.x;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_13))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, tmpvar_19);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_6;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_6;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_9.w;
  lowp vec4 color_10;
  color_10 = tmpvar_9;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_10.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_11;
  highp vec2 screenCoord_12;
  screenCoord_12 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_13;
  shadow_13 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_12);
    shadow_13 = tmpvar_14.x;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_13))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_16;
  mediump float tmpvar_17;
  mediump vec3 N_18;
  N_18 = xlv_TEXCOORD4;
  tmpvar_17 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_18)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_ReflectionTex, tmpvar_19);
  reflColor_4 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_23);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_17));
  mediump vec3 tmpvar_24;
  mediump vec3 srcColor_25;
  srcColor_25 = colorBlendLightMap_6;
  tmpvar_24 = (xlv_COLOR1.xyz + (srcColor_25 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_24;
  highp vec4 tmpvar_26;
  tmpvar_26.xyz = colorBlendLightMap_6;
  tmpvar_26.w = _BloomIntensity;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_21;
  tmpvar_21 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_21;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_22;
  tmpvar_22.x = _BrushScaleX;
  tmpvar_22.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_22);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_26);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_8;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_8;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_21;
  tmpvar_21 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_21;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_22;
  tmpvar_22.x = _BrushScaleX;
  tmpvar_22.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_22);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_26);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_8;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_8;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_21;
  tmpvar_21 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_21;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_22;
  tmpvar_22.x = _BrushScaleX;
  tmpvar_22.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_22);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_26);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_27;
  mediump vec3 srcColor_28;
  srcColor_28 = colorBlendLightMap_8;
  tmpvar_27 = (xlv_COLOR1.xyz + (srcColor_28 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29.xyz = colorBlendLightMap_8;
  tmpvar_29.w = _BloomIntensity;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  highp vec2 screenCoord_11;
  screenCoord_11 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_12;
  shadow_12 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_11);
    shadow_12 = tmpvar_13.x;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_12))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  highp vec2 screenCoord_11;
  screenCoord_11 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_12;
  shadow_12 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_11);
    shadow_12 = tmpvar_13.x;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_12))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  highp vec2 screenCoord_11;
  screenCoord_11 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_12;
  shadow_12 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_11);
    shadow_12 = tmpvar_13.x;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_12))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  highp vec2 screenCoord_11;
  screenCoord_11 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_12;
  shadow_12 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_11);
    shadow_12 = tmpvar_13.x;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_12))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  highp vec2 screenCoord_11;
  screenCoord_11 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_12;
  shadow_12 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_11);
    shadow_12 = tmpvar_13.x;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_12))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_10;
  highp vec2 screenCoord_11;
  screenCoord_11 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_12;
  shadow_12 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_11);
    shadow_12 = tmpvar_13.x;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_12))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_15;
  mediump float tmpvar_16;
  mediump vec3 N_17;
  N_17 = xlv_TEXCOORD4;
  tmpvar_16 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_17)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_ReflectionTex, tmpvar_18);
  reflColor_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_22);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_16));
  mediump vec3 tmpvar_23;
  mediump vec3 srcColor_24;
  srcColor_24 = colorBlendLightMap_6;
  tmpvar_23 = (xlv_COLOR1.xyz + (srcColor_24 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = colorBlendLightMap_6;
  tmpvar_25.w = _BloomIntensity;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_20;
  tmpvar_20 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_20;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_21;
  tmpvar_21.x = _BrushScaleX;
  tmpvar_21.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_21);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_8;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_8;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, tmpvar_21);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_6;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_6;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, tmpvar_21);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_6;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_6;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, tmpvar_21);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_6;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_6;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_17))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_20;
  mediump float tmpvar_21;
  mediump vec3 N_22;
  N_22 = xlv_TEXCOORD4;
  tmpvar_21 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_22)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_23;
  tmpvar_23 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_23;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_24;
  tmpvar_24.x = _BrushScaleX;
  tmpvar_24.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_24);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_26;
  lowp float tmpvar_27;
  tmpvar_27 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_28);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_21));
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_8;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_8;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_17))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_20;
  mediump float tmpvar_21;
  mediump vec3 N_22;
  N_22 = xlv_TEXCOORD4;
  tmpvar_21 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_22)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_23;
  tmpvar_23 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_23;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_24;
  tmpvar_24.x = _BrushScaleX;
  tmpvar_24.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_24);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_26;
  lowp float tmpvar_27;
  tmpvar_27 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_28);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_21));
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_8;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_8;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_17))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_20;
  mediump float tmpvar_21;
  mediump vec3 N_22;
  N_22 = xlv_TEXCOORD4;
  tmpvar_21 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_22)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_23;
  tmpvar_23 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_23;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_24;
  tmpvar_24.x = _BrushScaleX;
  tmpvar_24.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_24);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_26;
  lowp float tmpvar_27;
  tmpvar_27 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_28);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_21));
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_8;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_8;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, tmpvar_21);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_6;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_6;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, tmpvar_21);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_6;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_6;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_8.w = tmpvar_11.w;
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  lmtex_8.xyz = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_15))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_18;
  mediump float tmpvar_19;
  mediump vec3 N_20;
  N_20 = xlv_TEXCOORD4;
  tmpvar_19 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_20)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ReflectionTex, tmpvar_21);
  reflColor_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_25);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_19));
  mediump vec3 tmpvar_26;
  mediump vec3 srcColor_27;
  srcColor_27 = colorBlendLightMap_6;
  tmpvar_26 = (xlv_COLOR1.xyz + (srcColor_27 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = colorBlendLightMap_6;
  tmpvar_28.w = _BloomIntensity;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_17))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_20;
  mediump float tmpvar_21;
  mediump vec3 N_22;
  N_22 = xlv_TEXCOORD4;
  tmpvar_21 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_22)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_23;
  tmpvar_23 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_23;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_24;
  tmpvar_24.x = _BrushScaleX;
  tmpvar_24.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_24);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_26;
  lowp float tmpvar_27;
  tmpvar_27 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_28);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_21));
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_8;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_8;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_17))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_20;
  mediump float tmpvar_21;
  mediump vec3 N_22;
  N_22 = xlv_TEXCOORD4;
  tmpvar_21 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_22)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_23;
  tmpvar_23 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_23;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_24;
  tmpvar_24.x = _BrushScaleX;
  tmpvar_24.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_24);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_26;
  lowp float tmpvar_27;
  tmpvar_27 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_28);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_21));
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_8;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_8;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_10.w = tmpvar_13.w;
  lowp vec4 color_14;
  color_14 = tmpvar_13;
  lmtex_10.xyz = (unity_Lightmap_HDR.x * color_14.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_17))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_20;
  mediump float tmpvar_21;
  mediump vec3 N_22;
  N_22 = xlv_TEXCOORD4;
  tmpvar_21 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_22)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_23;
  tmpvar_23 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_23;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_24;
  tmpvar_24.x = _BrushScaleX;
  tmpvar_24.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_24);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_26;
  lowp float tmpvar_27;
  tmpvar_27 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_28);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_21));
  mediump vec3 tmpvar_29;
  mediump vec3 srcColor_30;
  srcColor_30 = colorBlendLightMap_8;
  tmpvar_29 = (xlv_COLOR1.xyz + (srcColor_30 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = colorBlendLightMap_8;
  tmpvar_31.w = _BloomIntensity;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, tmpvar_20);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_6;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_6;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, tmpvar_20);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_6;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_6;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, tmpvar_20);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_6;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_6;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_16))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_19;
  mediump float tmpvar_20;
  mediump vec3 N_21;
  N_21 = xlv_TEXCOORD4;
  tmpvar_20 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_21)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_22;
  tmpvar_22 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_22;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_23;
  tmpvar_23.x = _BrushScaleX;
  tmpvar_23.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_23);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_27);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_20));
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_8;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_8;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_16))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_19;
  mediump float tmpvar_20;
  mediump vec3 N_21;
  N_21 = xlv_TEXCOORD4;
  tmpvar_20 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_21)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_22;
  tmpvar_22 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_22;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_23;
  tmpvar_23.x = _BrushScaleX;
  tmpvar_23.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_23);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_27);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_20));
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_8;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_8;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_16))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_19;
  mediump float tmpvar_20;
  mediump vec3 N_21;
  N_21 = xlv_TEXCOORD4;
  tmpvar_20 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_21)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_22;
  tmpvar_22 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_22;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_23;
  tmpvar_23.x = _BrushScaleX;
  tmpvar_23.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_23);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_27);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_20));
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_8;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_8;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, tmpvar_20);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_6;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_6;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, tmpvar_20);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_6;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_6;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec3 I_5;
  highp vec3 colorBlendLightMap_6;
  mediump vec4 tex_C_Color_7;
  mediump vec4 lmtex_8;
  highp vec2 vpos_9;
  vpos_9 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_9.y = ((fract(vpos_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, vpos_9).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_7 = tmpvar_12;
  highp vec2 screenCoord_13;
  screenCoord_13 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_14;
  shadow_14 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_13);
    shadow_14 = tmpvar_15.x;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = ((tex_C_Color_7.xyz * _Color.xyz) * ((
    ((lmtex_8.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_8.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_14))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_6 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_5 = tmpvar_17;
  mediump float tmpvar_18;
  mediump vec3 N_19;
  N_19 = xlv_TEXCOORD4;
  tmpvar_18 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_5, N_19)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_ReflectionTex, tmpvar_20);
  reflColor_4 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_6 = (colorBlendLightMap_6 * tmpvar_24);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_6 = (colorBlendLightMap_6 + (reflColor_4.xyz * tmpvar_18));
  mediump vec3 tmpvar_25;
  mediump vec3 srcColor_26;
  srcColor_26 = colorBlendLightMap_6;
  tmpvar_25 = (xlv_COLOR1.xyz + (srcColor_26 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_6 = tmpvar_25;
  highp vec4 tmpvar_27;
  tmpvar_27.xyz = colorBlendLightMap_6;
  tmpvar_27.w = _BloomIntensity;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_16))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_19;
  mediump float tmpvar_20;
  mediump vec3 N_21;
  N_21 = xlv_TEXCOORD4;
  tmpvar_20 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_21)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_22;
  tmpvar_22 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_22;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_23;
  tmpvar_23.x = _BrushScaleX;
  tmpvar_23.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_23);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_27);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_20));
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_8;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_8;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_16))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_19;
  mediump float tmpvar_20;
  mediump vec3 N_21;
  N_21 = xlv_TEXCOORD4;
  tmpvar_20 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_21)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_22;
  tmpvar_22 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_22;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_23;
  tmpvar_23.x = _BrushScaleX;
  tmpvar_23.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_23);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_27);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_20));
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_8;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_8;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BrushedNormalMap;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _ReflectMaskTex;
uniform mediump vec4 _ReflectionAdjust;
uniform mediump vec4 _FresnelParams;
uniform highp float _BrushScaleX;
uniform highp float _BrushScaleY;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump float reflectG_2;
  mediump float reflectR_3;
  mediump vec4 reflColor_4;
  mediump vec2 brushedValue_5;
  highp vec2 uvSC_6;
  mediump vec3 I_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec4 tex_C_Color_9;
  mediump vec4 lmtex_10;
  highp vec2 vpos_11;
  vpos_11 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_11.y = ((fract(vpos_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, vpos_11).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_9 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((tex_C_Color_9.xyz * _Color.xyz) * ((
    ((lmtex_10.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_10.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_16))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_8 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD5));
  I_7 = tmpvar_19;
  mediump float tmpvar_20;
  mediump vec3 N_21;
  N_21 = xlv_TEXCOORD4;
  tmpvar_20 = (_FresnelParams.z + max (0.0, (
    pow (clamp ((1.0 - dot (I_7, N_21)), 0.001, 1.0), _FresnelParams.x)
   * _FresnelParams.y)));
  lowp vec2 tmpvar_22;
  tmpvar_22 = texture2D (_BrushedNormalMap, xlv_TEXCOORD1.xy).xy;
  brushedValue_5 = tmpvar_22;
  brushedValue_5 = ((brushedValue_5 * 2.0) - 1.0);
  highp vec2 tmpvar_23;
  tmpvar_23.x = _BrushScaleX;
  tmpvar_23.y = _BrushScaleY;
  brushedValue_5 = (brushedValue_5 * tmpvar_23);
  uvSC_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + brushedValue_5);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ReflectionTex, uvSC_6);
  reflColor_4 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_ReflectMaskTex, xlv_TEXCOORD0.xy).x;
  reflectR_3 = tmpvar_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_ReflectMaskTex, xlv_TEXCOORD1.zw).y;
  reflectG_2 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((1.0 - (
    (reflectR_3 * _ReflectionAdjust.z)
   + 
    (reflectG_2 * _ReflectionAdjust.w)
  )), 0.0, 1.0);
  colorBlendLightMap_8 = (colorBlendLightMap_8 * tmpvar_27);
  reflColor_4.xyz = (reflColor_4.xyz * clamp ((
    (reflectR_3 * _ReflectionAdjust.x)
   + 
    (reflectG_2 * _ReflectionAdjust.y)
  ), 0.0, 1.0));
  colorBlendLightMap_8 = (colorBlendLightMap_8 + (reflColor_4.xyz * tmpvar_20));
  mediump vec3 tmpvar_28;
  mediump vec3 srcColor_29;
  srcColor_29 = colorBlendLightMap_8;
  tmpvar_28 = (xlv_COLOR1.xyz + (srcColor_29 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = colorBlendLightMap_8;
  tmpvar_30.w = _BloomIntensity;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/AddLight/ADDLIGHT"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
SubShader {
 LOD 200
 Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARDONLY"
  LOD 200
  Tags { "DrawDepth" = "FrontFace" "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 97102
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 srcColor_10;
  srcColor_10 = colorBlendLightMap_2;
  tmpvar_9 = (xlv_COLOR1.xyz + (srcColor_10 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = colorBlendLightMap_2;
  tmpvar_11.w = _BloomIntensity;
  tmpvar_1 = tmpvar_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    (lmtex_4.xyz * _ShadowColor)
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 srcColor_9;
  srcColor_9 = colorBlendLightMap_2;
  tmpvar_8 = (xlv_COLOR1.xyz + (srcColor_9 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_8;
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = colorBlendLightMap_2;
  tmpvar_10.w = _BloomIntensity;
  tmpvar_1 = tmpvar_10;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_4.w = tmpvar_5.w;
  lowp vec4 color_6;
  color_6 = tmpvar_5;
  lmtex_4.xyz = (unity_Lightmap_HDR.x * color_6.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_7;
  highp vec2 screenCoord_8;
  screenCoord_8 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_9;
  shadow_9 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_8);
    shadow_9 = tmpvar_10.x;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_9))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec3 srcColor_13;
  srcColor_13 = colorBlendLightMap_2;
  tmpvar_12 = (xlv_COLOR1.xyz + (srcColor_13 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_12;
  highp vec4 tmpvar_14;
  tmpvar_14.xyz = colorBlendLightMap_2;
  tmpvar_14.w = _BloomIntensity;
  tmpvar_1 = tmpvar_14;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_4.zw = tmpvar_1;
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_6.zw;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_glesNormal * tmpvar_11));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_5 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase.xyz + (h_23 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_25 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  tmpvar_15 = tmpvar_17;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _BrushedNormalMap_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _BrushedNormalMap_ST.xy) + _BrushedNormalMap_ST.zw);
  tmpvar_3.zw = tmpvar_1;
  tmpvar_4 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  tmpvar_5 = normalize((_glesNormal * tmpvar_12));
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_13 = tmpvar_14.xyz;
  tmpvar_6 = tmpvar_13;
  mediump vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_17;
  mediump float fogFactor_18;
  mediump vec3 fogColor_19;
  mediump vec3 heightFogColor_20;
  highp float HeightFogFactor_21;
  mediump vec3 atomesphereFogColor_22;
  mediump float h_23;
  highp float linearFogDensity_24;
  mediump float len_25;
  highp float tmpvar_26;
  tmpvar_26 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((len_25 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_24 = (tmpvar_27 * (2.0 - tmpvar_27));
  if ((len_25 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_24 = (linearFogDensity_24 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_28;
  tmpvar_28 = min (pow (linearFogDensity_24, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_24 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  h_23 = (tmpvar_29 * (2.0 - tmpvar_29));
  highp vec3 tmpvar_31;
  tmpvar_31 = (_HeigtFogColBase2.xyz + (h_23 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_22 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (atomesphereFogColor_22, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_25 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_22 = tmpvar_32;
  mediump float tmpvar_33;
  mediump float r_34;
  mediump float f_35;
  mediump float u_36;
  mediump float l_37;
  mediump float fogInt_38;
  fogInt_38 = 1.0;
  highp float tmpvar_39;
  tmpvar_39 = (_HeigtFogParams2.x * tmpvar_16.y);
  highp float tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  if ((tmpvar_40 > 0.01)) {
    highp float tmpvar_41;
    tmpvar_41 = exp(-(tmpvar_39));
    fogInt_38 = ((1.0 - tmpvar_41) / tmpvar_39);
  };
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = (l_37 * _HeigtFogParams2.y);
  u_36 = tmpvar_43;
  fogInt_38 = (fogInt_38 * u_36);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((l_37 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  r_34 = (tmpvar_44 * (2.0 - tmpvar_44));
  r_34 = ((r_34 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_35 = ((1.0 - clamp (
    exp2(-(fogInt_38))
  , 0.0, 1.0)) * r_34);
  highp float tmpvar_46;
  tmpvar_46 = min (f_35, _HeigtFogColBase2.w);
  tmpvar_33 = tmpvar_46;
  HeightFogFactor_21 = tmpvar_33;
  highp vec3 tmpvar_47;
  tmpvar_47 = _Mihoyo_FogColor2.xyz;
  heightFogColor_20 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = ((heightFogColor_20 * HeightFogFactor_21) + ((atomesphereFogColor_22 * tmpvar_28) * (1.0 - HeightFogFactor_21)));
  fogColor_19 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = ((1.0 - tmpvar_28) * (1.0 - HeightFogFactor_21));
  fogFactor_18 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.xyz = fogColor_19;
  tmpvar_50.w = fogFactor_18;
  tmpvar_17 = tmpvar_50;
  highp vec4 tmpvar_51;
  mediump float fogFactor_52;
  mediump vec3 fogColor_53;
  mediump vec3 heightFogColor_54;
  highp float HeightFogFactor_55;
  mediump vec3 atomesphereFogColor_56;
  mediump float h_57;
  highp float linearFogDensity_58;
  mediump float len_59;
  highp float tmpvar_60;
  tmpvar_60 = sqrt(dot (tmpvar_16, tmpvar_16));
  len_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((len_59 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_58 = (tmpvar_61 * (2.0 - tmpvar_61));
  if ((len_59 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_58 = (linearFogDensity_58 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_62;
  tmpvar_62 = min (pow (linearFogDensity_58, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_58 = tmpvar_62;
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  h_57 = (tmpvar_63 * (2.0 - tmpvar_63));
  highp vec3 tmpvar_65;
  tmpvar_65 = (_HeigtFogColBase3.xyz + (h_57 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_56 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = mix (atomesphereFogColor_56, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_59 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_56 = tmpvar_66;
  mediump float tmpvar_67;
  mediump float r_68;
  mediump float f_69;
  mediump float u_70;
  mediump float l_71;
  mediump float fogInt_72;
  fogInt_72 = 1.0;
  highp float tmpvar_73;
  tmpvar_73 = (_HeigtFogParams3.x * tmpvar_16.y);
  highp float tmpvar_74;
  tmpvar_74 = abs(tmpvar_73);
  if ((tmpvar_74 > 0.01)) {
    highp float tmpvar_75;
    tmpvar_75 = exp(-(tmpvar_73));
    fogInt_72 = ((1.0 - tmpvar_75) / tmpvar_73);
  };
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_16, tmpvar_16));
  l_71 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (l_71 * _HeigtFogParams3.y);
  u_70 = tmpvar_77;
  fogInt_72 = (fogInt_72 * u_70);
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((l_71 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  r_68 = (tmpvar_78 * (2.0 - tmpvar_78));
  r_68 = ((r_68 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_69 = ((1.0 - clamp (
    exp2(-(fogInt_72))
  , 0.0, 1.0)) * r_68);
  highp float tmpvar_80;
  tmpvar_80 = min (f_69, _HeigtFogColBase3.w);
  tmpvar_67 = tmpvar_80;
  HeightFogFactor_55 = tmpvar_67;
  highp vec3 tmpvar_81;
  tmpvar_81 = _Mihoyo_FogColor3.xyz;
  heightFogColor_54 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = ((heightFogColor_54 * HeightFogFactor_55) + ((atomesphereFogColor_56 * tmpvar_62) * (1.0 - HeightFogFactor_55)));
  fogColor_53 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = ((1.0 - tmpvar_62) * (1.0 - HeightFogFactor_55));
  fogFactor_52 = tmpvar_83;
  mediump vec4 tmpvar_84;
  tmpvar_84.xyz = fogColor_53;
  tmpvar_84.w = fogFactor_52;
  tmpvar_51 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (tmpvar_17, tmpvar_51, vec4(_LerpFactor));
  tmpvar_15 = tmpvar_85;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_COLOR1 = tmpvar_15;
}


#endif
#ifdef FRAGMENT
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 colorBlendLightMap_2;
  mediump vec4 tex_C_Color_3;
  mediump vec4 lmtex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_3 = tmpvar_6;
  highp vec2 screenCoord_7;
  screenCoord_7 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_8;
  shadow_8 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_7);
    shadow_8 = tmpvar_9.x;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((tex_C_Color_3.xyz * _Color.xyz) * ((
    ((lmtex_4.xyz * _ShadowColor) * (1.0 - (clamp (
      (lmtex_4.x - _ShadowIntegration)
    , 0.0, 1.0) * (1.0 - shadow_8))))
   * _LightMapIntensity) + _LightingColor));
  colorBlendLightMap_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec3 srcColor_12;
  srcColor_12 = colorBlendLightMap_2;
  tmpvar_11 = (xlv_COLOR1.xyz + (srcColor_12 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_2 = tmpvar_11;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = colorBlendLightMap_2;
  tmpvar_13.w = _BloomIntensity;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "BRUSHEDMAP_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
}